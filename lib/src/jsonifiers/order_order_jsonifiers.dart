import 'package:sagas_meta/src/models/order_order.dart';
import 'package:sagas_meta/src/entity_base.dart';
import 'dart:convert';
import 'dart:typed_data';
import 'package:intl/intl.dart';

class OrderOrderJsonifier{
  static CommunicationEventOrder extractCommunicationEventOrder(dynamic json) {
    return CommunicationEventOrder(
        entityId: create_id_from('CommunicationEventOrder', ['orderId', 'communicationEventId'], json),
        orderId: json['orderId'] as String,
        communicationEventId: json['communicationEventId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static CommunicationEventOrder overridesCommunicationEventOrder(Map<String, dynamic> map) {
    return CommunicationEventOrder(
        entityId: create_id_from('CommunicationEventOrder', ['orderId', 'communicationEventId'], map),
        orderId: map['orderId'],
        communicationEventId: map['communicationEventId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ItemIssuanceQuantitySum extractItemIssuanceQuantitySum(dynamic json) {
    return ItemIssuanceQuantitySum(
        entityId: create_id_from('ItemIssuanceQuantitySum', [], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        orderId: json['orderId'] as String,
        issuedQuantitySum: json['issuedQuantitySum'] as double,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ItemIssuanceQuantitySum overridesItemIssuanceQuantitySum(Map<String, dynamic> map) {
    return ItemIssuanceQuantitySum(
        entityId: create_id_from('ItemIssuanceQuantitySum', [], map),
        orderItemSeqId: map['orderItemSeqId'],
        orderId: map['orderId'],
        issuedQuantitySum: map['issuedQuantitySum'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderAdjustment extractOrderAdjustment(dynamic json) {
    return OrderAdjustment(
        entityId: create_id_from('OrderAdjustment', ['orderAdjustmentId'], json),
        customerReferenceId: json['customerReferenceId'] as String,
        correspondingProductId: json['correspondingProductId'] as String,
        orderId: json['orderId'] as String,
        includeInShipping: json['includeInShipping'] as String,
        description: json['description'] as String,
        exemptAmount: json['exemptAmount'] as double,
        productPromoId: json['productPromoId'] as String,
        taxAuthPartyId: json['taxAuthPartyId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        oldPercentage: json['oldPercentage'] as double,
        primaryGeoId: json['primaryGeoId'] as String,
        taxAuthGeoId: json['taxAuthGeoId'] as String,
        originalAdjustmentId: json['originalAdjustmentId'] as String,
        secondaryGeoId: json['secondaryGeoId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        orderAdjustmentId: json['orderAdjustmentId'] as String,
        amountAlreadyIncluded: json['amountAlreadyIncluded'] as double,
        orderItemSeqId: json['orderItemSeqId'] as String,
        amount: json['amount'] as double,
        comments: json['comments'] as String,
        recurringAmount: json['recurringAmount'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        orderAdjustmentTypeId: json['orderAdjustmentTypeId'] as String,
        productPromoRuleId: json['productPromoRuleId'] as String,
        isManual: json['isManual'] as String,
        productFeatureId: json['productFeatureId'] as String,
        taxAuthorityRateSeqId: json['taxAuthorityRateSeqId'] as String,
        overrideGlAccountId: json['overrideGlAccountId'] as String,
        oldAmountPerQuantity: json['oldAmountPerQuantity'] as double,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        includeInTax: json['includeInTax'] as String,
        createdDate: check_dt(json['createdDate']),
        productPromoActionSeqId: json['productPromoActionSeqId'] as String,
        sourcePercentage: json['sourcePercentage'] as double,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderAdjustment overridesOrderAdjustment(Map<String, dynamic> map) {
    return OrderAdjustment(
        entityId: create_id_from('OrderAdjustment', ['orderAdjustmentId'], map),
        customerReferenceId: map['customerReferenceId'],
        correspondingProductId: map['correspondingProductId'],
        orderId: map['orderId'],
        includeInShipping: map['includeInShipping'],
        description: map['description'],
        exemptAmount: map['exemptAmount'],
        productPromoId: map['productPromoId'],
        taxAuthPartyId: map['taxAuthPartyId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        oldPercentage: map['oldPercentage'],
        primaryGeoId: map['primaryGeoId'],
        taxAuthGeoId: map['taxAuthGeoId'],
        originalAdjustmentId: map['originalAdjustmentId'],
        secondaryGeoId: map['secondaryGeoId'],
        createdByUserLogin: map['createdByUserLogin'],
        orderAdjustmentId: map['orderAdjustmentId'],
        amountAlreadyIncluded: map['amountAlreadyIncluded'],
        orderItemSeqId: map['orderItemSeqId'],
        amount: map['amount'],
        comments: map['comments'],
        recurringAmount: map['recurringAmount'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        orderAdjustmentTypeId: map['orderAdjustmentTypeId'],
        productPromoRuleId: map['productPromoRuleId'],
        isManual: map['isManual'],
        productFeatureId: map['productFeatureId'],
        taxAuthorityRateSeqId: map['taxAuthorityRateSeqId'],
        overrideGlAccountId: map['overrideGlAccountId'],
        oldAmountPerQuantity: map['oldAmountPerQuantity'],
        shipGroupSeqId: map['shipGroupSeqId'],
        includeInTax: map['includeInTax'],
        createdDate: map['createdDate'],
        productPromoActionSeqId: map['productPromoActionSeqId'],
        sourcePercentage: map['sourcePercentage'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderAdjustmentAttribute extractOrderAdjustmentAttribute(dynamic json) {
    return OrderAdjustmentAttribute(
        entityId: create_id_from('OrderAdjustmentAttribute', ['orderAdjustmentId', 'attrName'], json),
        attrDescription: json['attrDescription'] as String,
        attrValue: json['attrValue'] as String,
        orderAdjustmentId: json['orderAdjustmentId'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderAdjustmentAttribute overridesOrderAdjustmentAttribute(Map<String, dynamic> map) {
    return OrderAdjustmentAttribute(
        entityId: create_id_from('OrderAdjustmentAttribute', ['orderAdjustmentId', 'attrName'], map),
        attrDescription: map['attrDescription'],
        attrValue: map['attrValue'],
        orderAdjustmentId: map['orderAdjustmentId'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderAdjustmentBilling extractOrderAdjustmentBilling(dynamic json) {
    return OrderAdjustmentBilling(
        entityId: create_id_from('OrderAdjustmentBilling', ['orderAdjustmentId', 'invoiceId', 'invoiceItemSeqId'], json),
        amount: json['amount'] as double,
        invoiceId: json['invoiceId'] as String,
        invoiceItemSeqId: json['invoiceItemSeqId'] as String,
        orderAdjustmentId: json['orderAdjustmentId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderAdjustmentBilling overridesOrderAdjustmentBilling(Map<String, dynamic> map) {
    return OrderAdjustmentBilling(
        entityId: create_id_from('OrderAdjustmentBilling', ['orderAdjustmentId', 'invoiceId', 'invoiceItemSeqId'], map),
        amount: map['amount'],
        invoiceId: map['invoiceId'],
        invoiceItemSeqId: map['invoiceItemSeqId'],
        orderAdjustmentId: map['orderAdjustmentId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderAdjustmentType extractOrderAdjustmentType(dynamic json) {
    return OrderAdjustmentType(
        entityId: create_id_from('OrderAdjustmentType', ['orderAdjustmentTypeId'], json),
        parentTypeId: json['parentTypeId'] as String,
        hasTable: json['hasTable'] as String,
        orderAdjustmentTypeId: json['orderAdjustmentTypeId'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderAdjustmentType overridesOrderAdjustmentType(Map<String, dynamic> map) {
    return OrderAdjustmentType(
        entityId: create_id_from('OrderAdjustmentType', ['orderAdjustmentTypeId'], map),
        parentTypeId: map['parentTypeId'],
        hasTable: map['hasTable'],
        orderAdjustmentTypeId: map['orderAdjustmentTypeId'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderAdjustmentTypeAttr extractOrderAdjustmentTypeAttr(dynamic json) {
    return OrderAdjustmentTypeAttr(
        entityId: create_id_from('OrderAdjustmentTypeAttr', ['orderAdjustmentTypeId', 'attrName'], json),
        orderAdjustmentTypeId: json['orderAdjustmentTypeId'] as String,
        description: json['description'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderAdjustmentTypeAttr overridesOrderAdjustmentTypeAttr(Map<String, dynamic> map) {
    return OrderAdjustmentTypeAttr(
        entityId: create_id_from('OrderAdjustmentTypeAttr', ['orderAdjustmentTypeId', 'attrName'], map),
        orderAdjustmentTypeId: map['orderAdjustmentTypeId'],
        description: map['description'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderAttribute extractOrderAttribute(dynamic json) {
    return OrderAttribute(
        entityId: create_id_from('OrderAttribute', ['orderId', 'attrName'], json),
        orderId: json['orderId'] as String,
        attrDescription: json['attrDescription'] as String,
        attrValue: json['attrValue'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderAttribute overridesOrderAttribute(Map<String, dynamic> map) {
    return OrderAttribute(
        entityId: create_id_from('OrderAttribute', ['orderId', 'attrName'], map),
        orderId: map['orderId'],
        attrDescription: map['attrDescription'],
        attrValue: map['attrValue'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderBlacklist extractOrderBlacklist(dynamic json) {
    return OrderBlacklist(
        entityId: create_id_from('OrderBlacklist', ['blacklistString', 'orderBlacklistTypeId'], json),
        orderBlacklistTypeId: json['orderBlacklistTypeId'] as String,
        blacklistString: json['blacklistString'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderBlacklist overridesOrderBlacklist(Map<String, dynamic> map) {
    return OrderBlacklist(
        entityId: create_id_from('OrderBlacklist', ['blacklistString', 'orderBlacklistTypeId'], map),
        orderBlacklistTypeId: map['orderBlacklistTypeId'],
        blacklistString: map['blacklistString'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderBlacklistType extractOrderBlacklistType(dynamic json) {
    return OrderBlacklistType(
        entityId: create_id_from('OrderBlacklistType', ['orderBlacklistTypeId'], json),
        description: json['description'] as String,
        orderBlacklistTypeId: json['orderBlacklistTypeId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderBlacklistType overridesOrderBlacklistType(Map<String, dynamic> map) {
    return OrderBlacklistType(
        entityId: create_id_from('OrderBlacklistType', ['orderBlacklistTypeId'], map),
        description: map['description'],
        orderBlacklistTypeId: map['orderBlacklistTypeId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderContactMech extractOrderContactMech(dynamic json) {
    return OrderContactMech(
        entityId: create_id_from('OrderContactMech', ['orderId', 'contactMechPurposeTypeId', 'contactMechId'], json),
        contactMechPurposeTypeId: json['contactMechPurposeTypeId'] as String,
        orderId: json['orderId'] as String,
        contactMechId: json['contactMechId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderContactMech overridesOrderContactMech(Map<String, dynamic> map) {
    return OrderContactMech(
        entityId: create_id_from('OrderContactMech', ['orderId', 'contactMechPurposeTypeId', 'contactMechId'], map),
        contactMechPurposeTypeId: map['contactMechPurposeTypeId'],
        orderId: map['orderId'],
        contactMechId: map['contactMechId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderContent extractOrderContent(dynamic json) {
    return OrderContent(
        entityId: create_id_from('OrderContent', ['contentId', 'orderId', 'orderItemSeqId', 'orderContentTypeId', 'fromDate'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        fromDate: check_dt(json['fromDate']),
        orderId: json['orderId'] as String,
        contentId: json['contentId'] as String,
        orderContentTypeId: json['orderContentTypeId'] as String,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderContent overridesOrderContent(Map<String, dynamic> map) {
    return OrderContent(
        entityId: create_id_from('OrderContent', ['contentId', 'orderId', 'orderItemSeqId', 'orderContentTypeId', 'fromDate'], map),
        orderItemSeqId: map['orderItemSeqId'],
        fromDate: map['fromDate'],
        orderId: map['orderId'],
        contentId: map['contentId'],
        orderContentTypeId: map['orderContentTypeId'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderContentType extractOrderContentType(dynamic json) {
    return OrderContentType(
        entityId: create_id_from('OrderContentType', ['orderContentTypeId'], json),
        parentTypeId: json['parentTypeId'] as String,
        hasTable: json['hasTable'] as String,
        description: json['description'] as String,
        orderContentTypeId: json['orderContentTypeId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderContentType overridesOrderContentType(Map<String, dynamic> map) {
    return OrderContentType(
        entityId: create_id_from('OrderContentType', ['orderContentTypeId'], map),
        parentTypeId: map['parentTypeId'],
        hasTable: map['hasTable'],
        description: map['description'],
        orderContentTypeId: map['orderContentTypeId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderDeliverySchedule extractOrderDeliverySchedule(dynamic json) {
    return OrderDeliverySchedule(
        entityId: create_id_from('OrderDeliverySchedule', ['orderId', 'orderItemSeqId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        unitsPieces: json['unitsPieces'] as double,
        orderId: json['orderId'] as String,
        totalCubicSize: json['totalCubicSize'] as double,
        estimatedReadyDate: check_dt(json['estimatedReadyDate']),
        skidsPallets: json['skidsPallets'] as int,
        statusId: json['statusId'] as String,
        totalWeight: json['totalWeight'] as double,
        totalWeightUomId: json['totalWeightUomId'] as String,
        totalCubicUomId: json['totalCubicUomId'] as String,
        cartons: json['cartons'] as int,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderDeliverySchedule overridesOrderDeliverySchedule(Map<String, dynamic> map) {
    return OrderDeliverySchedule(
        entityId: create_id_from('OrderDeliverySchedule', ['orderId', 'orderItemSeqId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        unitsPieces: map['unitsPieces'],
        orderId: map['orderId'],
        totalCubicSize: map['totalCubicSize'],
        estimatedReadyDate: map['estimatedReadyDate'],
        skidsPallets: map['skidsPallets'],
        statusId: map['statusId'],
        totalWeight: map['totalWeight'],
        totalWeightUomId: map['totalWeightUomId'],
        totalCubicUomId: map['totalCubicUomId'],
        cartons: map['cartons'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeader extractOrderHeader(dynamic json) {
    return OrderHeader(
        entityId: create_id_from('OrderHeader', ['orderId'], json),
        invoicePerShipment: json['invoicePerShipment'] as String,
        salesChannelEnumId: json['salesChannelEnumId'] as String,
        orderId: json['orderId'] as String,
        orderTypeId: json['orderTypeId'] as String,
        billingAccountId: json['billingAccountId'] as String,
        terminalId: json['terminalId'] as String,
        isViewed: json['isViewed'] as String,
        visitId: json['visitId'] as String,
        agreementId: json['agreementId'] as String,
        productStoreId: json['productStoreId'] as String,
        remainingSubTotal: json['remainingSubTotal'] as double,
        orderName: json['orderName'] as String,
        webSiteId: json['webSiteId'] as String,
        isRushOrder: json['isRushOrder'] as String,
        entryDate: check_dt(json['entryDate']),
        grandTotal: json['grandTotal'] as double,
        autoOrderShoppingListId: json['autoOrderShoppingListId'] as String,
        externalId: json['externalId'] as String,
        priority: json['priority'] as String,
        transactionId: json['transactionId'] as String,
        firstAttemptOrderId: json['firstAttemptOrderId'] as String,
        originFacilityId: json['originFacilityId'] as String,
        statusId: json['statusId'] as String,
        createdBy: json['createdBy'] as String,
        currencyUom: json['currencyUom'] as String,
        syncStatusId: json['syncStatusId'] as String,
        pickSheetPrintedDate: check_dt(json['pickSheetPrintedDate']),
        needsInventoryIssuance: json['needsInventoryIssuance'] as String,
        orderDate: check_dt(json['orderDate']),
        internalCode: json['internalCode'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeader overridesOrderHeader(Map<String, dynamic> map) {
    return OrderHeader(
        entityId: create_id_from('OrderHeader', ['orderId'], map),
        invoicePerShipment: map['invoicePerShipment'],
        salesChannelEnumId: map['salesChannelEnumId'],
        orderId: map['orderId'],
        orderTypeId: map['orderTypeId'],
        billingAccountId: map['billingAccountId'],
        terminalId: map['terminalId'],
        isViewed: map['isViewed'],
        visitId: map['visitId'],
        agreementId: map['agreementId'],
        productStoreId: map['productStoreId'],
        remainingSubTotal: map['remainingSubTotal'],
        orderName: map['orderName'],
        webSiteId: map['webSiteId'],
        isRushOrder: map['isRushOrder'],
        entryDate: map['entryDate'],
        grandTotal: map['grandTotal'],
        autoOrderShoppingListId: map['autoOrderShoppingListId'],
        externalId: map['externalId'],
        priority: map['priority'],
        transactionId: map['transactionId'],
        firstAttemptOrderId: map['firstAttemptOrderId'],
        originFacilityId: map['originFacilityId'],
        statusId: map['statusId'],
        createdBy: map['createdBy'],
        currencyUom: map['currencyUom'],
        syncStatusId: map['syncStatusId'],
        pickSheetPrintedDate: map['pickSheetPrintedDate'],
        needsInventoryIssuance: map['needsInventoryIssuance'],
        orderDate: map['orderDate'],
        internalCode: map['internalCode'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderAndItemFacilityLocation extractOrderHeaderAndItemFacilityLocation(dynamic json) {
    return OrderHeaderAndItemFacilityLocation(
        entityId: create_id_from('OrderHeaderAndItemFacilityLocation', ['orderId', 'orderItemSeqId', 'inventoryItemId', 'shipGroupSeqId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        inventoryItemId: json['inventoryItemId'] as String,
        carrierPartyId: json['carrierPartyId'] as String,
        facilityId: json['facilityId'] as String,
        areaId: json['areaId'] as String,
        productId: json['productId'] as String,
        orderId: json['orderId'] as String,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        shipmentMethodTypeId: json['shipmentMethodTypeId'] as String,
        locationTypeEnumId: json['locationTypeEnumId'] as String,
        locationSeqId: json['locationSeqId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderAndItemFacilityLocation overridesOrderHeaderAndItemFacilityLocation(Map<String, dynamic> map) {
    return OrderHeaderAndItemFacilityLocation(
        entityId: create_id_from('OrderHeaderAndItemFacilityLocation', ['orderId', 'orderItemSeqId', 'inventoryItemId', 'shipGroupSeqId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        inventoryItemId: map['inventoryItemId'],
        carrierPartyId: map['carrierPartyId'],
        facilityId: map['facilityId'],
        areaId: map['areaId'],
        productId: map['productId'],
        orderId: map['orderId'],
        shipGroupSeqId: map['shipGroupSeqId'],
        shipmentMethodTypeId: map['shipmentMethodTypeId'],
        locationTypeEnumId: map['locationTypeEnumId'],
        locationSeqId: map['locationSeqId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderAndItems extractOrderHeaderAndItems(dynamic json) {
    return OrderHeaderAndItems(
        entityId: create_id_from('OrderHeaderAndItems', ['orderId', 'orderItemSeqId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        unitPrice: json['unitPrice'] as double,
        quantity: json['quantity'] as double,
        productId: json['productId'] as String,
        orderId: json['orderId'] as String,
        grandTotal: json['grandTotal'] as double,
        orderTypeId: json['orderTypeId'] as String,
        estimatedDeliveryDate: check_dt(json['estimatedDeliveryDate']),
        cancelQuantity: json['cancelQuantity'] as double,
        itemStatusId: json['itemStatusId'] as String,
        shipAfterDate: check_dt(json['shipAfterDate']),
        shipBeforeDate: check_dt(json['shipBeforeDate']),
        orderStatusId: json['orderStatusId'] as String,
        unitListPrice: json['unitListPrice'] as double,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        productStoreId: json['productStoreId'] as String,
        itemDescription: json['itemDescription'] as String,
        orderDate: check_dt(json['orderDate']),
        orderItemTypeId: json['orderItemTypeId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderAndItems overridesOrderHeaderAndItems(Map<String, dynamic> map) {
    return OrderHeaderAndItems(
        entityId: create_id_from('OrderHeaderAndItems', ['orderId', 'orderItemSeqId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        unitPrice: map['unitPrice'],
        quantity: map['quantity'],
        productId: map['productId'],
        orderId: map['orderId'],
        grandTotal: map['grandTotal'],
        orderTypeId: map['orderTypeId'],
        estimatedDeliveryDate: map['estimatedDeliveryDate'],
        cancelQuantity: map['cancelQuantity'],
        itemStatusId: map['itemStatusId'],
        shipAfterDate: map['shipAfterDate'],
        shipBeforeDate: map['shipBeforeDate'],
        orderStatusId: map['orderStatusId'],
        unitListPrice: map['unitListPrice'],
        estimatedShipDate: map['estimatedShipDate'],
        productStoreId: map['productStoreId'],
        itemDescription: map['itemDescription'],
        orderDate: map['orderDate'],
        orderItemTypeId: map['orderItemTypeId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderAndPaymentPref extractOrderHeaderAndPaymentPref(dynamic json) {
    return OrderHeaderAndPaymentPref(
        entityId: create_id_from('OrderHeaderAndPaymentPref', ['orderId', 'orderPaymentPreferenceId'], json),
        originFacilityId: json['originFacilityId'] as String,
        orderPaymentPreferenceId: json['orderPaymentPreferenceId'] as String,
        orderStatusId: json['orderStatusId'] as String,
        orderId: json['orderId'] as String,
        currencyUom: json['currencyUom'] as String,
        productStoreId: json['productStoreId'] as String,
        terminalId: json['terminalId'] as String,
        paymentMethodTypeId: json['paymentMethodTypeId'] as String,
        paymentStatusId: json['paymentStatusId'] as String,
        maxAmount: json['maxAmount'] as double,
        orderDate: check_dt(json['orderDate']),
        webSiteId: json['webSiteId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderAndPaymentPref overridesOrderHeaderAndPaymentPref(Map<String, dynamic> map) {
    return OrderHeaderAndPaymentPref(
        entityId: create_id_from('OrderHeaderAndPaymentPref', ['orderId', 'orderPaymentPreferenceId'], map),
        originFacilityId: map['originFacilityId'],
        orderPaymentPreferenceId: map['orderPaymentPreferenceId'],
        orderStatusId: map['orderStatusId'],
        orderId: map['orderId'],
        currencyUom: map['currencyUom'],
        productStoreId: map['productStoreId'],
        terminalId: map['terminalId'],
        paymentMethodTypeId: map['paymentMethodTypeId'],
        paymentStatusId: map['paymentStatusId'],
        maxAmount: map['maxAmount'],
        orderDate: map['orderDate'],
        webSiteId: map['webSiteId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderAndRoleSummary extractOrderHeaderAndRoleSummary(dynamic json) {
    return OrderHeaderAndRoleSummary(
        entityId: create_id_from('OrderHeaderAndRoleSummary', ['partyId', 'roleTypeId', 'orderId', 'totalOrders'], json),
        totalGrandAmount: json['totalGrandAmount'] as double,
        roleTypeId: json['roleTypeId'] as String,
        statusId: json['statusId'] as String,
        orderId: json['orderId'] as String,
        orderTypeId: json['orderTypeId'] as String,
        totalOrders: json['totalOrders'] as int,
        partyId: json['partyId'] as String,
        orderDate: check_dt(json['orderDate']),
        totalSubRemainingAmount: json['totalSubRemainingAmount'] as double,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderAndRoleSummary overridesOrderHeaderAndRoleSummary(Map<String, dynamic> map) {
    return OrderHeaderAndRoleSummary(
        entityId: create_id_from('OrderHeaderAndRoleSummary', ['partyId', 'roleTypeId', 'orderId', 'totalOrders'], map),
        totalGrandAmount: map['totalGrandAmount'],
        roleTypeId: map['roleTypeId'],
        statusId: map['statusId'],
        orderId: map['orderId'],
        orderTypeId: map['orderTypeId'],
        totalOrders: map['totalOrders'],
        partyId: map['partyId'],
        orderDate: map['orderDate'],
        totalSubRemainingAmount: map['totalSubRemainingAmount'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderAndRoles extractOrderHeaderAndRoles(dynamic json) {
    return OrderHeaderAndRoles(
        entityId: create_id_from('OrderHeaderAndRoles', ['roleTypeId', 'orderId', 'partyId'], json),
        invoicePerShipment: json['invoicePerShipment'] as String,
        salesChannelEnumId: json['salesChannelEnumId'] as String,
        orderId: json['orderId'] as String,
        orderTypeId: json['orderTypeId'] as String,
        billingAccountId: json['billingAccountId'] as String,
        terminalId: json['terminalId'] as String,
        isViewed: json['isViewed'] as String,
        visitId: json['visitId'] as String,
        agreementId: json['agreementId'] as String,
        productStoreId: json['productStoreId'] as String,
        partyId: json['partyId'] as String,
        remainingSubTotal: json['remainingSubTotal'] as double,
        orderName: json['orderName'] as String,
        webSiteId: json['webSiteId'] as String,
        isRushOrder: json['isRushOrder'] as String,
        roleTypeId: json['roleTypeId'] as String,
        entryDate: check_dt(json['entryDate']),
        grandTotal: json['grandTotal'] as double,
        autoOrderShoppingListId: json['autoOrderShoppingListId'] as String,
        externalId: json['externalId'] as String,
        priority: json['priority'] as String,
        transactionId: json['transactionId'] as String,
        firstAttemptOrderId: json['firstAttemptOrderId'] as String,
        originFacilityId: json['originFacilityId'] as String,
        statusId: json['statusId'] as String,
        createdBy: json['createdBy'] as String,
        currencyUom: json['currencyUom'] as String,
        syncStatusId: json['syncStatusId'] as String,
        pickSheetPrintedDate: check_dt(json['pickSheetPrintedDate']),
        needsInventoryIssuance: json['needsInventoryIssuance'] as String,
        orderDate: check_dt(json['orderDate']),
        internalCode: json['internalCode'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderAndRoles overridesOrderHeaderAndRoles(Map<String, dynamic> map) {
    return OrderHeaderAndRoles(
        entityId: create_id_from('OrderHeaderAndRoles', ['roleTypeId', 'orderId', 'partyId'], map),
        invoicePerShipment: map['invoicePerShipment'],
        salesChannelEnumId: map['salesChannelEnumId'],
        orderId: map['orderId'],
        orderTypeId: map['orderTypeId'],
        billingAccountId: map['billingAccountId'],
        terminalId: map['terminalId'],
        isViewed: map['isViewed'],
        visitId: map['visitId'],
        agreementId: map['agreementId'],
        productStoreId: map['productStoreId'],
        partyId: map['partyId'],
        remainingSubTotal: map['remainingSubTotal'],
        orderName: map['orderName'],
        webSiteId: map['webSiteId'],
        isRushOrder: map['isRushOrder'],
        roleTypeId: map['roleTypeId'],
        entryDate: map['entryDate'],
        grandTotal: map['grandTotal'],
        autoOrderShoppingListId: map['autoOrderShoppingListId'],
        externalId: map['externalId'],
        priority: map['priority'],
        transactionId: map['transactionId'],
        firstAttemptOrderId: map['firstAttemptOrderId'],
        originFacilityId: map['originFacilityId'],
        statusId: map['statusId'],
        createdBy: map['createdBy'],
        currencyUom: map['currencyUom'],
        syncStatusId: map['syncStatusId'],
        pickSheetPrintedDate: map['pickSheetPrintedDate'],
        needsInventoryIssuance: map['needsInventoryIssuance'],
        orderDate: map['orderDate'],
        internalCode: map['internalCode'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderAndShipGroups extractOrderHeaderAndShipGroups(dynamic json) {
    return OrderHeaderAndShipGroups(
        entityId: create_id_from('OrderHeaderAndShipGroups', ['orderId', 'shipGroupSeqId', 'roleTypeId', 'partyId'], json),
        invoicePerShipment: json['invoicePerShipment'] as String,
        salesChannelEnumId: json['salesChannelEnumId'] as String,
        orderId: json['orderId'] as String,
        postalCode: json['postalCode'] as String,
        billingAccountId: json['billingAccountId'] as String,
        postalCodeExt: json['postalCodeExt'] as String,
        contactMechId: json['contactMechId'] as String,
        telecomContactMechId: json['telecomContactMechId'] as String,
        countyGeoId: json['countyGeoId'] as String,
        visitId: json['visitId'] as String,
        toName: json['toName'] as String,
        cityGeoId: json['cityGeoId'] as String,
        partyId: json['partyId'] as String,
        shipmentMethodTypeId: json['shipmentMethodTypeId'] as String,
        trackingNumber: json['trackingNumber'] as String,
        remainingSubTotal: json['remainingSubTotal'] as double,
        countryGeoId: json['countryGeoId'] as String,
        giftMessage: json['giftMessage'] as String,
        entryDate: check_dt(json['entryDate']),
        grandTotal: json['grandTotal'] as double,
        shippingInstructions: json['shippingInstructions'] as String,
        autoOrderShoppingListId: json['autoOrderShoppingListId'] as String,
        priority: json['priority'] as String,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        estimatedDeliveryDate: check_dt(json['estimatedDeliveryDate']),
        transactionId: json['transactionId'] as String,
        carrierPartyId: json['carrierPartyId'] as String,
        directions: json['directions'] as String,
        statusId: json['statusId'] as String,
        currencyUom: json['currencyUom'] as String,
        syncStatusId: json['syncStatusId'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        pickSheetPrintedDate: check_dt(json['pickSheetPrintedDate']),
        needsInventoryIssuance: json['needsInventoryIssuance'] as String,
        geoPointId: json['geoPointId'] as String,
        orderDate: check_dt(json['orderDate']),
        houseNumberExt: json['houseNumberExt'] as String,
        city: json['city'] as String,
        postalCodeGeoId: json['postalCodeGeoId'] as String,
        shipByDate: check_dt(json['shipByDate']),
        houseNumber: json['houseNumber'] as int,
        orderTypeId: json['orderTypeId'] as String,
        terminalId: json['terminalId'] as String,
        isViewed: json['isViewed'] as String,
        attnName: json['attnName'] as String,
        agreementId: json['agreementId'] as String,
        isGift: json['isGift'] as String,
        productStoreId: json['productStoreId'] as String,
        orderName: json['orderName'] as String,
        webSiteId: json['webSiteId'] as String,
        isRushOrder: json['isRushOrder'] as String,
        roleTypeId: json['roleTypeId'] as String,
        facilityId: json['facilityId'] as String,
        address2: json['address2'] as String,
        address1: json['address1'] as String,
        maySplit: json['maySplit'] as String,
        externalId: json['externalId'] as String,
        supplierAgreementId: json['supplierAgreementId'] as String,
        vendorPartyId: json['vendorPartyId'] as String,
        shipAfterDate: check_dt(json['shipAfterDate']),
        firstAttemptOrderId: json['firstAttemptOrderId'] as String,
        originFacilityId: json['originFacilityId'] as String,
        createdBy: json['createdBy'] as String,
        carrierRoleTypeId: json['carrierRoleTypeId'] as String,
        municipalityGeoId: json['municipalityGeoId'] as String,
        supplierPartyId: json['supplierPartyId'] as String,
        stateProvinceGeoId: json['stateProvinceGeoId'] as String,
        internalCode: json['internalCode'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderAndShipGroups overridesOrderHeaderAndShipGroups(Map<String, dynamic> map) {
    return OrderHeaderAndShipGroups(
        entityId: create_id_from('OrderHeaderAndShipGroups', ['orderId', 'shipGroupSeqId', 'roleTypeId', 'partyId'], map),
        invoicePerShipment: map['invoicePerShipment'],
        salesChannelEnumId: map['salesChannelEnumId'],
        orderId: map['orderId'],
        postalCode: map['postalCode'],
        billingAccountId: map['billingAccountId'],
        postalCodeExt: map['postalCodeExt'],
        contactMechId: map['contactMechId'],
        telecomContactMechId: map['telecomContactMechId'],
        countyGeoId: map['countyGeoId'],
        visitId: map['visitId'],
        toName: map['toName'],
        cityGeoId: map['cityGeoId'],
        partyId: map['partyId'],
        shipmentMethodTypeId: map['shipmentMethodTypeId'],
        trackingNumber: map['trackingNumber'],
        remainingSubTotal: map['remainingSubTotal'],
        countryGeoId: map['countryGeoId'],
        giftMessage: map['giftMessage'],
        entryDate: map['entryDate'],
        grandTotal: map['grandTotal'],
        shippingInstructions: map['shippingInstructions'],
        autoOrderShoppingListId: map['autoOrderShoppingListId'],
        priority: map['priority'],
        shipGroupSeqId: map['shipGroupSeqId'],
        estimatedDeliveryDate: map['estimatedDeliveryDate'],
        transactionId: map['transactionId'],
        carrierPartyId: map['carrierPartyId'],
        directions: map['directions'],
        statusId: map['statusId'],
        currencyUom: map['currencyUom'],
        syncStatusId: map['syncStatusId'],
        estimatedShipDate: map['estimatedShipDate'],
        pickSheetPrintedDate: map['pickSheetPrintedDate'],
        needsInventoryIssuance: map['needsInventoryIssuance'],
        geoPointId: map['geoPointId'],
        orderDate: map['orderDate'],
        houseNumberExt: map['houseNumberExt'],
        city: map['city'],
        postalCodeGeoId: map['postalCodeGeoId'],
        shipByDate: map['shipByDate'],
        houseNumber: map['houseNumber'],
        orderTypeId: map['orderTypeId'],
        terminalId: map['terminalId'],
        isViewed: map['isViewed'],
        attnName: map['attnName'],
        agreementId: map['agreementId'],
        isGift: map['isGift'],
        productStoreId: map['productStoreId'],
        orderName: map['orderName'],
        webSiteId: map['webSiteId'],
        isRushOrder: map['isRushOrder'],
        roleTypeId: map['roleTypeId'],
        facilityId: map['facilityId'],
        address2: map['address2'],
        address1: map['address1'],
        maySplit: map['maySplit'],
        externalId: map['externalId'],
        supplierAgreementId: map['supplierAgreementId'],
        vendorPartyId: map['vendorPartyId'],
        shipAfterDate: map['shipAfterDate'],
        firstAttemptOrderId: map['firstAttemptOrderId'],
        originFacilityId: map['originFacilityId'],
        createdBy: map['createdBy'],
        carrierRoleTypeId: map['carrierRoleTypeId'],
        municipalityGeoId: map['municipalityGeoId'],
        supplierPartyId: map['supplierPartyId'],
        stateProvinceGeoId: map['stateProvinceGeoId'],
        internalCode: map['internalCode'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderAndShipGroupsByProduct extractOrderHeaderAndShipGroupsByProduct(dynamic json) {
    return OrderHeaderAndShipGroupsByProduct(
        entityId: create_id_from('OrderHeaderAndShipGroupsByProduct', ['productId', 'orderId', 'shipGroupSeqId', 'roleTypeId', 'partyId'], json),
        invoicePerShipment: json['invoicePerShipment'] as String,
        salesChannelEnumId: json['salesChannelEnumId'] as String,
        orderId: json['orderId'] as String,
        postalCode: json['postalCode'] as String,
        billingAccountId: json['billingAccountId'] as String,
        postalCodeExt: json['postalCodeExt'] as String,
        contactMechId: json['contactMechId'] as String,
        telecomContactMechId: json['telecomContactMechId'] as String,
        countyGeoId: json['countyGeoId'] as String,
        visitId: json['visitId'] as String,
        toName: json['toName'] as String,
        cityGeoId: json['cityGeoId'] as String,
        partyId: json['partyId'] as String,
        shipmentMethodTypeId: json['shipmentMethodTypeId'] as String,
        trackingNumber: json['trackingNumber'] as String,
        remainingSubTotal: json['remainingSubTotal'] as double,
        countryGeoId: json['countryGeoId'] as String,
        brandName: json['brandName'] as String,
        productId: json['productId'] as String,
        giftMessage: json['giftMessage'] as String,
        entryDate: check_dt(json['entryDate']),
        grandTotal: json['grandTotal'] as double,
        shippingInstructions: json['shippingInstructions'] as String,
        autoOrderShoppingListId: json['autoOrderShoppingListId'] as String,
        priority: json['priority'] as String,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        estimatedDeliveryDate: check_dt(json['estimatedDeliveryDate']),
        transactionId: json['transactionId'] as String,
        carrierPartyId: json['carrierPartyId'] as String,
        directions: json['directions'] as String,
        statusId: json['statusId'] as String,
        currencyUom: json['currencyUom'] as String,
        syncStatusId: json['syncStatusId'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        pickSheetPrintedDate: check_dt(json['pickSheetPrintedDate']),
        needsInventoryIssuance: json['needsInventoryIssuance'] as String,
        geoPointId: json['geoPointId'] as String,
        orderDate: check_dt(json['orderDate']),
        houseNumberExt: json['houseNumberExt'] as String,
        city: json['city'] as String,
        postalCodeGeoId: json['postalCodeGeoId'] as String,
        shipByDate: check_dt(json['shipByDate']),
        houseNumber: json['houseNumber'] as int,
        orderTypeId: json['orderTypeId'] as String,
        terminalId: json['terminalId'] as String,
        isViewed: json['isViewed'] as String,
        internalName: json['internalName'] as String,
        attnName: json['attnName'] as String,
        agreementId: json['agreementId'] as String,
        isGift: json['isGift'] as String,
        productStoreId: json['productStoreId'] as String,
        orderName: json['orderName'] as String,
        webSiteId: json['webSiteId'] as String,
        isRushOrder: json['isRushOrder'] as String,
        roleTypeId: json['roleTypeId'] as String,
        facilityId: json['facilityId'] as String,
        address2: json['address2'] as String,
        address1: json['address1'] as String,
        maySplit: json['maySplit'] as String,
        externalId: json['externalId'] as String,
        supplierAgreementId: json['supplierAgreementId'] as String,
        vendorPartyId: json['vendorPartyId'] as String,
        shipAfterDate: check_dt(json['shipAfterDate']),
        firstAttemptOrderId: json['firstAttemptOrderId'] as String,
        originFacilityId: json['originFacilityId'] as String,
        createdBy: json['createdBy'] as String,
        carrierRoleTypeId: json['carrierRoleTypeId'] as String,
        municipalityGeoId: json['municipalityGeoId'] as String,
        supplierPartyId: json['supplierPartyId'] as String,
        stateProvinceGeoId: json['stateProvinceGeoId'] as String,
        internalCode: json['internalCode'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderAndShipGroupsByProduct overridesOrderHeaderAndShipGroupsByProduct(Map<String, dynamic> map) {
    return OrderHeaderAndShipGroupsByProduct(
        entityId: create_id_from('OrderHeaderAndShipGroupsByProduct', ['productId', 'orderId', 'shipGroupSeqId', 'roleTypeId', 'partyId'], map),
        invoicePerShipment: map['invoicePerShipment'],
        salesChannelEnumId: map['salesChannelEnumId'],
        orderId: map['orderId'],
        postalCode: map['postalCode'],
        billingAccountId: map['billingAccountId'],
        postalCodeExt: map['postalCodeExt'],
        contactMechId: map['contactMechId'],
        telecomContactMechId: map['telecomContactMechId'],
        countyGeoId: map['countyGeoId'],
        visitId: map['visitId'],
        toName: map['toName'],
        cityGeoId: map['cityGeoId'],
        partyId: map['partyId'],
        shipmentMethodTypeId: map['shipmentMethodTypeId'],
        trackingNumber: map['trackingNumber'],
        remainingSubTotal: map['remainingSubTotal'],
        countryGeoId: map['countryGeoId'],
        brandName: map['brandName'],
        productId: map['productId'],
        giftMessage: map['giftMessage'],
        entryDate: map['entryDate'],
        grandTotal: map['grandTotal'],
        shippingInstructions: map['shippingInstructions'],
        autoOrderShoppingListId: map['autoOrderShoppingListId'],
        priority: map['priority'],
        shipGroupSeqId: map['shipGroupSeqId'],
        estimatedDeliveryDate: map['estimatedDeliveryDate'],
        transactionId: map['transactionId'],
        carrierPartyId: map['carrierPartyId'],
        directions: map['directions'],
        statusId: map['statusId'],
        currencyUom: map['currencyUom'],
        syncStatusId: map['syncStatusId'],
        estimatedShipDate: map['estimatedShipDate'],
        pickSheetPrintedDate: map['pickSheetPrintedDate'],
        needsInventoryIssuance: map['needsInventoryIssuance'],
        geoPointId: map['geoPointId'],
        orderDate: map['orderDate'],
        houseNumberExt: map['houseNumberExt'],
        city: map['city'],
        postalCodeGeoId: map['postalCodeGeoId'],
        shipByDate: map['shipByDate'],
        houseNumber: map['houseNumber'],
        orderTypeId: map['orderTypeId'],
        terminalId: map['terminalId'],
        isViewed: map['isViewed'],
        internalName: map['internalName'],
        attnName: map['attnName'],
        agreementId: map['agreementId'],
        isGift: map['isGift'],
        productStoreId: map['productStoreId'],
        orderName: map['orderName'],
        webSiteId: map['webSiteId'],
        isRushOrder: map['isRushOrder'],
        roleTypeId: map['roleTypeId'],
        facilityId: map['facilityId'],
        address2: map['address2'],
        address1: map['address1'],
        maySplit: map['maySplit'],
        externalId: map['externalId'],
        supplierAgreementId: map['supplierAgreementId'],
        vendorPartyId: map['vendorPartyId'],
        shipAfterDate: map['shipAfterDate'],
        firstAttemptOrderId: map['firstAttemptOrderId'],
        originFacilityId: map['originFacilityId'],
        createdBy: map['createdBy'],
        carrierRoleTypeId: map['carrierRoleTypeId'],
        municipalityGeoId: map['municipalityGeoId'],
        supplierPartyId: map['supplierPartyId'],
        stateProvinceGeoId: map['stateProvinceGeoId'],
        internalCode: map['internalCode'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderAndWorkEffort extractOrderHeaderAndWorkEffort(dynamic json) {
    return OrderHeaderAndWorkEffort(
        entityId: create_id_from('OrderHeaderAndWorkEffort', ['workEffortId', 'orderId'], json),
        workEffortId: json['workEffortId'] as String,
        invoicePerShipment: json['invoicePerShipment'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        salesChannelEnumId: json['salesChannelEnumId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        revisionNumber: json['revisionNumber'] as int,
        orderId: json['orderId'] as String,
        billingAccountId: json['billingAccountId'] as String,
        tempExprId: json['tempExprId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        visitId: json['visitId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        remainingSubTotal: json['remainingSubTotal'] as double,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        entryDate: check_dt(json['entryDate']),
        grandTotal: json['grandTotal'] as double,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        autoOrderShoppingListId: json['autoOrderShoppingListId'] as String,
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        transactionId: json['transactionId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        specialTerms: json['specialTerms'] as String,
        statusId: json['statusId'] as String,
        currencyUom: json['currencyUom'] as String,
        timeTransparency: json['timeTransparency'] as int,
        syncStatusId: json['syncStatusId'] as String,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        pickSheetPrintedDate: check_dt(json['pickSheetPrintedDate']),
        needsInventoryIssuance: json['needsInventoryIssuance'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        orderDate: check_dt(json['orderDate']),
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        orderTypeId: json['orderTypeId'] as String,
        moneyUomId: json['moneyUomId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        terminalId: json['terminalId'] as String,
        workEffortName: json['workEffortName'] as String,
        isViewed: json['isViewed'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        agreementId: json['agreementId'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        scopeEnumId: json['scopeEnumId'] as String,
        productStoreId: json['productStoreId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        orderName: json['orderName'] as String,
        webSiteId: json['webSiteId'] as String,
        isRushOrder: json['isRushOrder'] as String,
        facilityId: json['facilityId'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        externalId: json['externalId'] as String,
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        firstAttemptOrderId: json['firstAttemptOrderId'] as String,
        originFacilityId: json['originFacilityId'] as String,
        createdDate: check_dt(json['createdDate']),
        createdBy: json['createdBy'] as String,
        actualSetupMillis: json['actualSetupMillis'] as double,
        internalCode: json['internalCode'] as String,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderAndWorkEffort overridesOrderHeaderAndWorkEffort(Map<String, dynamic> map) {
    return OrderHeaderAndWorkEffort(
        entityId: create_id_from('OrderHeaderAndWorkEffort', ['workEffortId', 'orderId'], map),
        workEffortId: map['workEffortId'],
        invoicePerShipment: map['invoicePerShipment'],
        recurrenceInfoId: map['recurrenceInfoId'],
        salesChannelEnumId: map['salesChannelEnumId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        revisionNumber: map['revisionNumber'],
        orderId: map['orderId'],
        billingAccountId: map['billingAccountId'],
        tempExprId: map['tempExprId'],
        showAsEnumId: map['showAsEnumId'],
        visitId: map['visitId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        createdByUserLogin: map['createdByUserLogin'],
        remainingSubTotal: map['remainingSubTotal'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        entryDate: map['entryDate'],
        grandTotal: map['grandTotal'],
        estimatedStartDate: map['estimatedStartDate'],
        autoOrderShoppingListId: map['autoOrderShoppingListId'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        transactionId: map['transactionId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        specialTerms: map['specialTerms'],
        statusId: map['statusId'],
        currencyUom: map['currencyUom'],
        timeTransparency: map['timeTransparency'],
        syncStatusId: map['syncStatusId'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        pickSheetPrintedDate: map['pickSheetPrintedDate'],
        needsInventoryIssuance: map['needsInventoryIssuance'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        orderDate: map['orderDate'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        orderTypeId: map['orderTypeId'],
        moneyUomId: map['moneyUomId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        terminalId: map['terminalId'],
        workEffortName: map['workEffortName'],
        isViewed: map['isViewed'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        agreementId: map['agreementId'],
        actualStartDate: map['actualStartDate'],
        scopeEnumId: map['scopeEnumId'],
        productStoreId: map['productStoreId'],
        quantityProduced: map['quantityProduced'],
        orderName: map['orderName'],
        webSiteId: map['webSiteId'],
        isRushOrder: map['isRushOrder'],
        facilityId: map['facilityId'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        externalId: map['externalId'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        firstAttemptOrderId: map['firstAttemptOrderId'],
        originFacilityId: map['originFacilityId'],
        createdDate: map['createdDate'],
        createdBy: map['createdBy'],
        actualSetupMillis: map['actualSetupMillis'],
        internalCode: map['internalCode'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderItemAndInv extractOrderHeaderItemAndInv(dynamic json) {
    return OrderHeaderItemAndInv(
        entityId: create_id_from('OrderHeaderItemAndInv', ['orderId'], json),
        unitPrice: json['unitPrice'] as double,
        quantity: json['quantity'] as double,
        productId: json['productId'] as String,
        orderId: json['orderId'] as String,
        entryDate: check_dt(json['entryDate']),
        grandTotal: json['grandTotal'] as double,
        autoCancelDate: check_dt(json['autoCancelDate']),
        orderTypeId: json['orderTypeId'] as String,
        billingAccountId: json['billingAccountId'] as String,
        correspondingPoId: json['correspondingPoId'] as String,
        firstAttemptOrderId: json['firstAttemptOrderId'] as String,
        originFacilityId: json['originFacilityId'] as String,
        visitId: json['visitId'] as String,
        statusId: json['statusId'] as String,
        unitListPrice: json['unitListPrice'] as double,
        createdBy: json['createdBy'] as String,
        currencyUom: json['currencyUom'] as String,
        syncStatusId: json['syncStatusId'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        quantityNotAvailable: json['quantityNotAvailable'] as double,
        productStoreId: json['productStoreId'] as String,
        orderDate: check_dt(json['orderDate']),
        remainingSubTotal: json['remainingSubTotal'] as double,
        webSiteId: json['webSiteId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderItemAndInv overridesOrderHeaderItemAndInv(Map<String, dynamic> map) {
    return OrderHeaderItemAndInv(
        entityId: create_id_from('OrderHeaderItemAndInv', ['orderId'], map),
        unitPrice: map['unitPrice'],
        quantity: map['quantity'],
        productId: map['productId'],
        orderId: map['orderId'],
        entryDate: map['entryDate'],
        grandTotal: map['grandTotal'],
        autoCancelDate: map['autoCancelDate'],
        orderTypeId: map['orderTypeId'],
        billingAccountId: map['billingAccountId'],
        correspondingPoId: map['correspondingPoId'],
        firstAttemptOrderId: map['firstAttemptOrderId'],
        originFacilityId: map['originFacilityId'],
        visitId: map['visitId'],
        statusId: map['statusId'],
        unitListPrice: map['unitListPrice'],
        createdBy: map['createdBy'],
        currencyUom: map['currencyUom'],
        syncStatusId: map['syncStatusId'],
        estimatedShipDate: map['estimatedShipDate'],
        quantityNotAvailable: map['quantityNotAvailable'],
        productStoreId: map['productStoreId'],
        orderDate: map['orderDate'],
        remainingSubTotal: map['remainingSubTotal'],
        webSiteId: map['webSiteId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderItemAndInvRoles extractOrderHeaderItemAndInvRoles(dynamic json) {
    return OrderHeaderItemAndInvRoles(
        entityId: create_id_from('OrderHeaderItemAndInvRoles', ['orderId', 'partyId', 'roleTypeId'], json),
        orderId: json['orderId'] as String,
        orderTypeId: json['orderTypeId'] as String,
        billingAccountId: json['billingAccountId'] as String,
        visitId: json['visitId'] as String,
        unitListPrice: json['unitListPrice'] as double,
        productStoreId: json['productStoreId'] as String,
        partyId: json['partyId'] as String,
        remainingSubTotal: json['remainingSubTotal'] as double,
        webSiteId: json['webSiteId'] as String,
        unitPrice: json['unitPrice'] as double,
        roleTypeId: json['roleTypeId'] as String,
        quantity: json['quantity'] as double,
        productId: json['productId'] as String,
        entryDate: check_dt(json['entryDate']),
        grandTotal: json['grandTotal'] as double,
        autoCancelDate: check_dt(json['autoCancelDate']),
        correspondingPoId: json['correspondingPoId'] as String,
        firstAttemptOrderId: json['firstAttemptOrderId'] as String,
        originFacilityId: json['originFacilityId'] as String,
        statusId: json['statusId'] as String,
        createdBy: json['createdBy'] as String,
        currencyUom: json['currencyUom'] as String,
        syncStatusId: json['syncStatusId'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        quantityNotAvailable: json['quantityNotAvailable'] as double,
        orderDate: check_dt(json['orderDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderItemAndInvRoles overridesOrderHeaderItemAndInvRoles(Map<String, dynamic> map) {
    return OrderHeaderItemAndInvRoles(
        entityId: create_id_from('OrderHeaderItemAndInvRoles', ['orderId', 'partyId', 'roleTypeId'], map),
        orderId: map['orderId'],
        orderTypeId: map['orderTypeId'],
        billingAccountId: map['billingAccountId'],
        visitId: map['visitId'],
        unitListPrice: map['unitListPrice'],
        productStoreId: map['productStoreId'],
        partyId: map['partyId'],
        remainingSubTotal: map['remainingSubTotal'],
        webSiteId: map['webSiteId'],
        unitPrice: map['unitPrice'],
        roleTypeId: map['roleTypeId'],
        quantity: map['quantity'],
        productId: map['productId'],
        entryDate: map['entryDate'],
        grandTotal: map['grandTotal'],
        autoCancelDate: map['autoCancelDate'],
        correspondingPoId: map['correspondingPoId'],
        firstAttemptOrderId: map['firstAttemptOrderId'],
        originFacilityId: map['originFacilityId'],
        statusId: map['statusId'],
        createdBy: map['createdBy'],
        currencyUom: map['currencyUom'],
        syncStatusId: map['syncStatusId'],
        estimatedShipDate: map['estimatedShipDate'],
        quantityNotAvailable: map['quantityNotAvailable'],
        orderDate: map['orderDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderItemAndRoles extractOrderHeaderItemAndRoles(dynamic json) {
    return OrderHeaderItemAndRoles(
        entityId: create_id_from('OrderHeaderItemAndRoles', ['orderId', 'partyId', 'roleTypeId', 'orderItemSeqId'], json),
        orderId: json['orderId'] as String,
        orderTypeId: json['orderTypeId'] as String,
        billingAccountId: json['billingAccountId'] as String,
        orderItemStatusId: json['orderItemStatusId'] as String,
        visitId: json['visitId'] as String,
        unitListPrice: json['unitListPrice'] as double,
        productStoreId: json['productStoreId'] as String,
        itemDescription: json['itemDescription'] as String,
        partyId: json['partyId'] as String,
        remainingSubTotal: json['remainingSubTotal'] as double,
        orderName: json['orderName'] as String,
        webSiteId: json['webSiteId'] as String,
        orderItemTypeId: json['orderItemTypeId'] as String,
        unitPrice: json['unitPrice'] as double,
        orderItemSeqId: json['orderItemSeqId'] as String,
        roleTypeId: json['roleTypeId'] as String,
        quantity: json['quantity'] as double,
        productId: json['productId'] as String,
        entryDate: check_dt(json['entryDate']),
        grandTotal: json['grandTotal'] as double,
        autoCancelDate: check_dt(json['autoCancelDate']),
        correspondingPoId: json['correspondingPoId'] as String,
        firstAttemptOrderId: json['firstAttemptOrderId'] as String,
        originFacilityId: json['originFacilityId'] as String,
        statusId: json['statusId'] as String,
        createdBy: json['createdBy'] as String,
        currencyUom: json['currencyUom'] as String,
        syncStatusId: json['syncStatusId'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        orderDate: check_dt(json['orderDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderItemAndRoles overridesOrderHeaderItemAndRoles(Map<String, dynamic> map) {
    return OrderHeaderItemAndRoles(
        entityId: create_id_from('OrderHeaderItemAndRoles', ['orderId', 'partyId', 'roleTypeId', 'orderItemSeqId'], map),
        orderId: map['orderId'],
        orderTypeId: map['orderTypeId'],
        billingAccountId: map['billingAccountId'],
        orderItemStatusId: map['orderItemStatusId'],
        visitId: map['visitId'],
        unitListPrice: map['unitListPrice'],
        productStoreId: map['productStoreId'],
        itemDescription: map['itemDescription'],
        partyId: map['partyId'],
        remainingSubTotal: map['remainingSubTotal'],
        orderName: map['orderName'],
        webSiteId: map['webSiteId'],
        orderItemTypeId: map['orderItemTypeId'],
        unitPrice: map['unitPrice'],
        orderItemSeqId: map['orderItemSeqId'],
        roleTypeId: map['roleTypeId'],
        quantity: map['quantity'],
        productId: map['productId'],
        entryDate: map['entryDate'],
        grandTotal: map['grandTotal'],
        autoCancelDate: map['autoCancelDate'],
        correspondingPoId: map['correspondingPoId'],
        firstAttemptOrderId: map['firstAttemptOrderId'],
        originFacilityId: map['originFacilityId'],
        statusId: map['statusId'],
        createdBy: map['createdBy'],
        currencyUom: map['currencyUom'],
        syncStatusId: map['syncStatusId'],
        estimatedShipDate: map['estimatedShipDate'],
        orderDate: map['orderDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderItemAndShipGroup extractOrderHeaderItemAndShipGroup(dynamic json) {
    return OrderHeaderItemAndShipGroup(
        entityId: create_id_from('OrderHeaderItemAndShipGroup', ['orderId', 'orderItemSeqId', 'shipGroupSeqId'], json),
        orderId: json['orderId'] as String,
        billingAccountId: json['billingAccountId'] as String,
        oiEstimatedDeliveryDate: check_dt(json['oiEstimatedDeliveryDate']),
        visitId: json['visitId'] as String,
        deploymentId: json['deploymentId'] as String,
        remainingSubTotal: json['remainingSubTotal'] as double,
        shipmentMethodTypeId: json['shipmentMethodTypeId'] as String,
        selectedAmount: json['selectedAmount'] as double,
        orderItemSeqId: json['orderItemSeqId'] as String,
        unitPrice: json['unitPrice'] as double,
        giftMessage: json['giftMessage'] as String,
        productId: json['productId'] as String,
        entryDate: check_dt(json['entryDate']),
        grandTotal: json['grandTotal'] as double,
        isItemGroupPrimary: json['isItemGroupPrimary'] as String,
        priority: json['priority'] as String,
        supplierProductId: json['supplierProductId'] as String,
        estimatedDeliveryDate: check_dt(json['estimatedDeliveryDate']),
        transactionId: json['transactionId'] as String,
        quoteId: json['quoteId'] as String,
        carrierPartyId: json['carrierPartyId'] as String,
        statusId: json['statusId'] as String,
        syncStatusId: json['syncStatusId'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        subscriptionId: json['subscriptionId'] as String,
        shipByDate: check_dt(json['shipByDate']),
        terminalId: json['terminalId'] as String,
        isPromo: json['isPromo'] as String,
        isViewed: json['isViewed'] as String,
        oiCancelQuantity: json['oiCancelQuantity'] as double,
        productCategoryId: json['productCategoryId'] as String,
        productStoreId: json['productStoreId'] as String,
        oiShipBeforeDate: check_dt(json['oiShipBeforeDate']),
        orderName: json['orderName'] as String,
        webSiteId: json['webSiteId'] as String,
        isRushOrder: json['isRushOrder'] as String,
        dontCancelSetDate: check_dt(json['dontCancelSetDate']),
        recurringFreqUomId: json['recurringFreqUomId'] as String,
        fromInventoryItemId: json['fromInventoryItemId'] as String,
        budgetItemSeqId: json['budgetItemSeqId'] as String,
        supplierAgreementId: json['supplierAgreementId'] as String,
        correspondingPoId: json['correspondingPoId'] as String,
        cancelQuantity: json['cancelQuantity'] as double,
        vendorPartyId: json['vendorPartyId'] as String,
        oiSyncStatusId: json['oiSyncStatusId'] as String,
        firstAttemptOrderId: json['firstAttemptOrderId'] as String,
        originFacilityId: json['originFacilityId'] as String,
        oiEstimatedShipDate: check_dt(json['oiEstimatedShipDate']),
        carrierRoleTypeId: json['carrierRoleTypeId'] as String,
        internalCode: json['internalCode'] as String,
        invoicePerShipment: json['invoicePerShipment'] as String,
        salesChannelEnumId: json['salesChannelEnumId'] as String,
        reservedQuantity: json['reservedQuantity'] as double,
        contactMechId: json['contactMechId'] as String,
        telecomContactMechId: json['telecomContactMechId'] as String,
        oiExternalId: json['oiExternalId'] as String,
        cancelBackOrderDate: check_dt(json['cancelBackOrderDate']),
        itemDescription: json['itemDescription'] as String,
        trackingNumber: json['trackingNumber'] as String,
        unitRecurringPrice: json['unitRecurringPrice'] as double,
        shippingInstructions: json['shippingInstructions'] as String,
        autoCancelDate: check_dt(json['autoCancelDate']),
        autoOrderShoppingListId: json['autoOrderShoppingListId'] as String,
        productFeatureId: json['productFeatureId'] as String,
        oiQuantity: json['oiQuantity'] as double,
        overrideGlAccountId: json['overrideGlAccountId'] as String,
        budgetId: json['budgetId'] as String,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        currencyUom: json['currencyUom'] as String,
        pickSheetPrintedDate: check_dt(json['pickSheetPrintedDate']),
        needsInventoryIssuance: json['needsInventoryIssuance'] as String,
        shoppingListItemSeqId: json['shoppingListItemSeqId'] as String,
        orderDate: check_dt(json['orderDate']),
        salesOpportunityId: json['salesOpportunityId'] as String,
        dontCancelSetUserLogin: json['dontCancelSetUserLogin'] as String,
        orderTypeId: json['orderTypeId'] as String,
        isModifiedPrice: json['isModifiedPrice'] as String,
        oiShipAfterDate: check_dt(json['oiShipAfterDate']),
        shoppingListId: json['shoppingListId'] as String,
        unitListPrice: json['unitListPrice'] as double,
        unitAverageCost: json['unitAverageCost'] as double,
        agreementId: json['agreementId'] as String,
        isGift: json['isGift'] as String,
        orderItemTypeId: json['orderItemTypeId'] as String,
        facilityId: json['facilityId'] as String,
        quantity: json['quantity'] as double,
        comments: json['comments'] as String,
        orderItemGroupSeqId: json['orderItemGroupSeqId'] as String,
        quoteItemSeqId: json['quoteItemSeqId'] as String,
        maySplit: json['maySplit'] as String,
        externalId: json['externalId'] as String,
        shipAfterDate: check_dt(json['shipAfterDate']),
        createdBy: json['createdBy'] as String,
        oiStatusId: json['oiStatusId'] as String,
        supplierPartyId: json['supplierPartyId'] as String,
        changeByUserLoginId: json['changeByUserLoginId'] as String,
        prodCatalogId: json['prodCatalogId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderItemAndShipGroup overridesOrderHeaderItemAndShipGroup(Map<String, dynamic> map) {
    return OrderHeaderItemAndShipGroup(
        entityId: create_id_from('OrderHeaderItemAndShipGroup', ['orderId', 'orderItemSeqId', 'shipGroupSeqId'], map),
        orderId: map['orderId'],
        billingAccountId: map['billingAccountId'],
        oiEstimatedDeliveryDate: map['oiEstimatedDeliveryDate'],
        visitId: map['visitId'],
        deploymentId: map['deploymentId'],
        remainingSubTotal: map['remainingSubTotal'],
        shipmentMethodTypeId: map['shipmentMethodTypeId'],
        selectedAmount: map['selectedAmount'],
        orderItemSeqId: map['orderItemSeqId'],
        unitPrice: map['unitPrice'],
        giftMessage: map['giftMessage'],
        productId: map['productId'],
        entryDate: map['entryDate'],
        grandTotal: map['grandTotal'],
        isItemGroupPrimary: map['isItemGroupPrimary'],
        priority: map['priority'],
        supplierProductId: map['supplierProductId'],
        estimatedDeliveryDate: map['estimatedDeliveryDate'],
        transactionId: map['transactionId'],
        quoteId: map['quoteId'],
        carrierPartyId: map['carrierPartyId'],
        statusId: map['statusId'],
        syncStatusId: map['syncStatusId'],
        estimatedShipDate: map['estimatedShipDate'],
        subscriptionId: map['subscriptionId'],
        shipByDate: map['shipByDate'],
        terminalId: map['terminalId'],
        isPromo: map['isPromo'],
        isViewed: map['isViewed'],
        oiCancelQuantity: map['oiCancelQuantity'],
        productCategoryId: map['productCategoryId'],
        productStoreId: map['productStoreId'],
        oiShipBeforeDate: map['oiShipBeforeDate'],
        orderName: map['orderName'],
        webSiteId: map['webSiteId'],
        isRushOrder: map['isRushOrder'],
        dontCancelSetDate: map['dontCancelSetDate'],
        recurringFreqUomId: map['recurringFreqUomId'],
        fromInventoryItemId: map['fromInventoryItemId'],
        budgetItemSeqId: map['budgetItemSeqId'],
        supplierAgreementId: map['supplierAgreementId'],
        correspondingPoId: map['correspondingPoId'],
        cancelQuantity: map['cancelQuantity'],
        vendorPartyId: map['vendorPartyId'],
        oiSyncStatusId: map['oiSyncStatusId'],
        firstAttemptOrderId: map['firstAttemptOrderId'],
        originFacilityId: map['originFacilityId'],
        oiEstimatedShipDate: map['oiEstimatedShipDate'],
        carrierRoleTypeId: map['carrierRoleTypeId'],
        internalCode: map['internalCode'],
        invoicePerShipment: map['invoicePerShipment'],
        salesChannelEnumId: map['salesChannelEnumId'],
        reservedQuantity: map['reservedQuantity'],
        contactMechId: map['contactMechId'],
        telecomContactMechId: map['telecomContactMechId'],
        oiExternalId: map['oiExternalId'],
        cancelBackOrderDate: map['cancelBackOrderDate'],
        itemDescription: map['itemDescription'],
        trackingNumber: map['trackingNumber'],
        unitRecurringPrice: map['unitRecurringPrice'],
        shippingInstructions: map['shippingInstructions'],
        autoCancelDate: map['autoCancelDate'],
        autoOrderShoppingListId: map['autoOrderShoppingListId'],
        productFeatureId: map['productFeatureId'],
        oiQuantity: map['oiQuantity'],
        overrideGlAccountId: map['overrideGlAccountId'],
        budgetId: map['budgetId'],
        shipGroupSeqId: map['shipGroupSeqId'],
        currencyUom: map['currencyUom'],
        pickSheetPrintedDate: map['pickSheetPrintedDate'],
        needsInventoryIssuance: map['needsInventoryIssuance'],
        shoppingListItemSeqId: map['shoppingListItemSeqId'],
        orderDate: map['orderDate'],
        salesOpportunityId: map['salesOpportunityId'],
        dontCancelSetUserLogin: map['dontCancelSetUserLogin'],
        orderTypeId: map['orderTypeId'],
        isModifiedPrice: map['isModifiedPrice'],
        oiShipAfterDate: map['oiShipAfterDate'],
        shoppingListId: map['shoppingListId'],
        unitListPrice: map['unitListPrice'],
        unitAverageCost: map['unitAverageCost'],
        agreementId: map['agreementId'],
        isGift: map['isGift'],
        orderItemTypeId: map['orderItemTypeId'],
        facilityId: map['facilityId'],
        quantity: map['quantity'],
        comments: map['comments'],
        orderItemGroupSeqId: map['orderItemGroupSeqId'],
        quoteItemSeqId: map['quoteItemSeqId'],
        maySplit: map['maySplit'],
        externalId: map['externalId'],
        shipAfterDate: map['shipAfterDate'],
        createdBy: map['createdBy'],
        oiStatusId: map['oiStatusId'],
        supplierPartyId: map['supplierPartyId'],
        changeByUserLoginId: map['changeByUserLoginId'],
        prodCatalogId: map['prodCatalogId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderNote extractOrderHeaderNote(dynamic json) {
    return OrderHeaderNote(
        entityId: create_id_from('OrderHeaderNote', ['orderId', 'noteId'], json),
        orderId: json['orderId'] as String,
        internalNote: json['internalNote'] as String,
        noteId: json['noteId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderNote overridesOrderHeaderNote(Map<String, dynamic> map) {
    return OrderHeaderNote(
        entityId: create_id_from('OrderHeaderNote', ['orderId', 'noteId'], map),
        orderId: map['orderId'],
        internalNote: map['internalNote'],
        noteId: map['noteId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderNoteView extractOrderHeaderNoteView(dynamic json) {
    return OrderHeaderNoteView(
        entityId: create_id_from('OrderHeaderNoteView', ['orderId', 'noteId'], json),
        orderId: json['orderId'] as String,
        internalNote: json['internalNote'] as String,
        noteName: json['noteName'] as String,
        noteDateTime: check_dt(json['noteDateTime']),
        noteInfo: json['noteInfo'] as String,
        noteId: json['noteId'] as String,
        noteParty: json['noteParty'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderNoteView overridesOrderHeaderNoteView(Map<String, dynamic> map) {
    return OrderHeaderNoteView(
        entityId: create_id_from('OrderHeaderNoteView', ['orderId', 'noteId'], map),
        orderId: map['orderId'],
        internalNote: map['internalNote'],
        noteName: map['noteName'],
        noteDateTime: map['noteDateTime'],
        noteInfo: map['noteInfo'],
        noteId: map['noteId'],
        noteParty: map['noteParty'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderHeaderWorkEffort extractOrderHeaderWorkEffort(dynamic json) {
    return OrderHeaderWorkEffort(
        entityId: create_id_from('OrderHeaderWorkEffort', ['orderId', 'workEffortId'], json),
        workEffortId: json['workEffortId'] as String,
        orderId: json['orderId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderHeaderWorkEffort overridesOrderHeaderWorkEffort(Map<String, dynamic> map) {
    return OrderHeaderWorkEffort(
        entityId: create_id_from('OrderHeaderWorkEffort', ['orderId', 'workEffortId'], map),
        workEffortId: map['workEffortId'],
        orderId: map['orderId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItem extractOrderItem(dynamic json) {
    return OrderItem(
        entityId: create_id_from('OrderItem', ['orderId', 'orderItemSeqId'], json),
        orderId: json['orderId'] as String,
        deploymentId: json['deploymentId'] as String,
        cancelBackOrderDate: check_dt(json['cancelBackOrderDate']),
        itemDescription: json['itemDescription'] as String,
        selectedAmount: json['selectedAmount'] as double,
        orderItemSeqId: json['orderItemSeqId'] as String,
        unitPrice: json['unitPrice'] as double,
        productId: json['productId'] as String,
        unitRecurringPrice: json['unitRecurringPrice'] as double,
        isItemGroupPrimary: json['isItemGroupPrimary'] as String,
        autoCancelDate: check_dt(json['autoCancelDate']),
        productFeatureId: json['productFeatureId'] as String,
        overrideGlAccountId: json['overrideGlAccountId'] as String,
        budgetId: json['budgetId'] as String,
        supplierProductId: json['supplierProductId'] as String,
        estimatedDeliveryDate: check_dt(json['estimatedDeliveryDate']),
        quoteId: json['quoteId'] as String,
        statusId: json['statusId'] as String,
        syncStatusId: json['syncStatusId'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        shoppingListItemSeqId: json['shoppingListItemSeqId'] as String,
        subscriptionId: json['subscriptionId'] as String,
        salesOpportunityId: json['salesOpportunityId'] as String,
        dontCancelSetUserLogin: json['dontCancelSetUserLogin'] as String,
        isPromo: json['isPromo'] as String,
        isModifiedPrice: json['isModifiedPrice'] as String,
        shipBeforeDate: check_dt(json['shipBeforeDate']),
        productCategoryId: json['productCategoryId'] as String,
        shoppingListId: json['shoppingListId'] as String,
        unitListPrice: json['unitListPrice'] as double,
        unitAverageCost: json['unitAverageCost'] as double,
        orderItemTypeId: json['orderItemTypeId'] as String,
        dontCancelSetDate: check_dt(json['dontCancelSetDate']),
        quantity: json['quantity'] as double,
        comments: json['comments'] as String,
        recurringFreqUomId: json['recurringFreqUomId'] as String,
        orderItemGroupSeqId: json['orderItemGroupSeqId'] as String,
        quoteItemSeqId: json['quoteItemSeqId'] as String,
        externalId: json['externalId'] as String,
        fromInventoryItemId: json['fromInventoryItemId'] as String,
        budgetItemSeqId: json['budgetItemSeqId'] as String,
        correspondingPoId: json['correspondingPoId'] as String,
        cancelQuantity: json['cancelQuantity'] as double,
        shipAfterDate: check_dt(json['shipAfterDate']),
        changeByUserLoginId: json['changeByUserLoginId'] as String,
        prodCatalogId: json['prodCatalogId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItem overridesOrderItem(Map<String, dynamic> map) {
    return OrderItem(
        entityId: create_id_from('OrderItem', ['orderId', 'orderItemSeqId'], map),
        orderId: map['orderId'],
        deploymentId: map['deploymentId'],
        cancelBackOrderDate: map['cancelBackOrderDate'],
        itemDescription: map['itemDescription'],
        selectedAmount: map['selectedAmount'],
        orderItemSeqId: map['orderItemSeqId'],
        unitPrice: map['unitPrice'],
        productId: map['productId'],
        unitRecurringPrice: map['unitRecurringPrice'],
        isItemGroupPrimary: map['isItemGroupPrimary'],
        autoCancelDate: map['autoCancelDate'],
        productFeatureId: map['productFeatureId'],
        overrideGlAccountId: map['overrideGlAccountId'],
        budgetId: map['budgetId'],
        supplierProductId: map['supplierProductId'],
        estimatedDeliveryDate: map['estimatedDeliveryDate'],
        quoteId: map['quoteId'],
        statusId: map['statusId'],
        syncStatusId: map['syncStatusId'],
        estimatedShipDate: map['estimatedShipDate'],
        shoppingListItemSeqId: map['shoppingListItemSeqId'],
        subscriptionId: map['subscriptionId'],
        salesOpportunityId: map['salesOpportunityId'],
        dontCancelSetUserLogin: map['dontCancelSetUserLogin'],
        isPromo: map['isPromo'],
        isModifiedPrice: map['isModifiedPrice'],
        shipBeforeDate: map['shipBeforeDate'],
        productCategoryId: map['productCategoryId'],
        shoppingListId: map['shoppingListId'],
        unitListPrice: map['unitListPrice'],
        unitAverageCost: map['unitAverageCost'],
        orderItemTypeId: map['orderItemTypeId'],
        dontCancelSetDate: map['dontCancelSetDate'],
        quantity: map['quantity'],
        comments: map['comments'],
        recurringFreqUomId: map['recurringFreqUomId'],
        orderItemGroupSeqId: map['orderItemGroupSeqId'],
        quoteItemSeqId: map['quoteItemSeqId'],
        externalId: map['externalId'],
        fromInventoryItemId: map['fromInventoryItemId'],
        budgetItemSeqId: map['budgetItemSeqId'],
        correspondingPoId: map['correspondingPoId'],
        cancelQuantity: map['cancelQuantity'],
        shipAfterDate: map['shipAfterDate'],
        changeByUserLoginId: map['changeByUserLoginId'],
        prodCatalogId: map['prodCatalogId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemAndProduct extractOrderItemAndProduct(dynamic json) {
    return OrderItemAndProduct(
        entityId: create_id_from('OrderItemAndProduct', ['orderId', 'orderItemSeqId'], json),
        orderId: json['orderId'] as String,
        originGeoId: json['originGeoId'] as String,
        mediumImageUrl: json['mediumImageUrl'] as String,
        productName: json['productName'] as String,
        originalImageUrl: json['originalImageUrl'] as String,
        inShippingBox: json['inShippingBox'] as String,
        supportDiscontinuationDate: check_dt(json['supportDiscontinuationDate']),
        productWidth: json['productWidth'] as double,
        deploymentId: json['deploymentId'] as String,
        productRating: json['productRating'] as double,
        createdByUserLogin: json['createdByUserLogin'] as String,
        selectedAmount: json['selectedAmount'] as double,
        orderItemSeqId: json['orderItemSeqId'] as String,
        unitPrice: json['unitPrice'] as double,
        requireAmount: json['requireAmount'] as String,
        productId: json['productId'] as String,
        taxable: json['taxable'] as String,
        primaryProductCategoryId: json['primaryProductCategoryId'] as String,
        salesDiscontinuationDate: check_dt(json['salesDiscontinuationDate']),
        isItemGroupPrimary: json['isItemGroupPrimary'] as String,
        supplierProductId: json['supplierProductId'] as String,
        estimatedDeliveryDate: check_dt(json['estimatedDeliveryDate']),
        quoteId: json['quoteId'] as String,
        salesDiscWhenNotAvail: json['salesDiscWhenNotAvail'] as String,
        returnable: json['returnable'] as String,
        statusId: json['statusId'] as String,
        syncStatusId: json['syncStatusId'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        subscriptionId: json['subscriptionId'] as String,
        priceDetailText: json['priceDetailText'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        diameterUomId: json['diameterUomId'] as String,
        productDiameter: json['productDiameter'] as double,
        ratingTypeEnum: json['ratingTypeEnum'] as String,
        chargeShipping: json['chargeShipping'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        isPromo: json['isPromo'] as String,
        quantityIncluded: json['quantityIncluded'] as double,
        heightUomId: json['heightUomId'] as String,
        shipBeforeDate: check_dt(json['shipBeforeDate']),
        productCategoryId: json['productCategoryId'] as String,
        virtualVariantMethodEnum: json['virtualVariantMethodEnum'] as String,
        shippingWeight: json['shippingWeight'] as double,
        shippingWidth: json['shippingWidth'] as double,
        shippingDepth: json['shippingDepth'] as double,
        inventoryItemTypeId: json['inventoryItemTypeId'] as String,
        piecesIncluded: json['piecesIncluded'] as int,
        dontCancelSetDate: check_dt(json['dontCancelSetDate']),
        recurringFreqUomId: json['recurringFreqUomId'] as String,
        productHeight: json['productHeight'] as double,
        fromInventoryItemId: json['fromInventoryItemId'] as String,
        defaultShipmentBoxTypeId: json['defaultShipmentBoxTypeId'] as String,
        orderDecimalQuantity: json['orderDecimalQuantity'] as String,
        budgetItemSeqId: json['budgetItemSeqId'] as String,
        productWeight: json['productWeight'] as double,
        depthUomId: json['depthUomId'] as String,
        correspondingPoId: json['correspondingPoId'] as String,
        cancelQuantity: json['cancelQuantity'] as double,
        createdDate: check_dt(json['createdDate']),
        isVariant: json['isVariant'] as String,
        detailScreen: json['detailScreen'] as String,
        requireInventory: json['requireInventory'] as String,
        quantityUomId: json['quantityUomId'] as String,
        introductionDate: check_dt(json['introductionDate']),
        shippingHeight: json['shippingHeight'] as double,
        detailImageUrl: json['detailImageUrl'] as String,
        includeInPromotions: json['includeInPromotions'] as String,
        configId: json['configId'] as String,
        cancelBackOrderDate: check_dt(json['cancelBackOrderDate']),
        billOfMaterialLevel: json['billOfMaterialLevel'] as int,
        itemDescription: json['itemDescription'] as String,
        lotIdFilledIn: json['lotIdFilledIn'] as String,
        brandName: json['brandName'] as String,
        smallImageUrl: json['smallImageUrl'] as String,
        unitRecurringPrice: json['unitRecurringPrice'] as double,
        autoCancelDate: check_dt(json['autoCancelDate']),
        productFeatureId: json['productFeatureId'] as String,
        overrideGlAccountId: json['overrideGlAccountId'] as String,
        budgetId: json['budgetId'] as String,
        weightUomId: json['weightUomId'] as String,
        shoppingListItemSeqId: json['shoppingListItemSeqId'] as String,
        isVirtual: json['isVirtual'] as String,
        salesOpportunityId: json['salesOpportunityId'] as String,
        widthUomId: json['widthUomId'] as String,
        longDescription: json['longDescription'] as String,
        autoCreateKeywords: json['autoCreateKeywords'] as String,
        dontCancelSetUserLogin: json['dontCancelSetUserLogin'] as String,
        amountUomTypeId: json['amountUomTypeId'] as String,
        description: json['description'] as String,
        isModifiedPrice: json['isModifiedPrice'] as String,
        internalName: json['internalName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        shoppingListId: json['shoppingListId'] as String,
        unitListPrice: json['unitListPrice'] as double,
        unitAverageCost: json['unitAverageCost'] as double,
        reservMaxPersons: json['reservMaxPersons'] as double,
        fixedAmount: json['fixedAmount'] as double,
        orderItemTypeId: json['orderItemTypeId'] as String,
        productDepth: json['productDepth'] as double,
        quantity: json['quantity'] as double,
        comments: json['comments'] as String,
        facilityId: json['facilityId'] as String,
        releaseDate: check_dt(json['releaseDate']),
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        orderItemGroupSeqId: json['orderItemGroupSeqId'] as String,
        quoteItemSeqId: json['quoteItemSeqId'] as String,
        externalId: json['externalId'] as String,
        inventoryMessage: json['inventoryMessage'] as String,
        productTypeId: json['productTypeId'] as String,
        shipAfterDate: check_dt(json['shipAfterDate']),
        largeImageUrl: json['largeImageUrl'] as String,
        requirementMethodEnumId: json['requirementMethodEnumId'] as String,
        changeByUserLoginId: json['changeByUserLoginId'] as String,
        prodCatalogId: json['prodCatalogId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemAndProduct overridesOrderItemAndProduct(Map<String, dynamic> map) {
    return OrderItemAndProduct(
        entityId: create_id_from('OrderItemAndProduct', ['orderId', 'orderItemSeqId'], map),
        orderId: map['orderId'],
        originGeoId: map['originGeoId'],
        mediumImageUrl: map['mediumImageUrl'],
        productName: map['productName'],
        originalImageUrl: map['originalImageUrl'],
        inShippingBox: map['inShippingBox'],
        supportDiscontinuationDate: map['supportDiscontinuationDate'],
        productWidth: map['productWidth'],
        deploymentId: map['deploymentId'],
        productRating: map['productRating'],
        createdByUserLogin: map['createdByUserLogin'],
        selectedAmount: map['selectedAmount'],
        orderItemSeqId: map['orderItemSeqId'],
        unitPrice: map['unitPrice'],
        requireAmount: map['requireAmount'],
        productId: map['productId'],
        taxable: map['taxable'],
        primaryProductCategoryId: map['primaryProductCategoryId'],
        salesDiscontinuationDate: map['salesDiscontinuationDate'],
        isItemGroupPrimary: map['isItemGroupPrimary'],
        supplierProductId: map['supplierProductId'],
        estimatedDeliveryDate: map['estimatedDeliveryDate'],
        quoteId: map['quoteId'],
        salesDiscWhenNotAvail: map['salesDiscWhenNotAvail'],
        returnable: map['returnable'],
        statusId: map['statusId'],
        syncStatusId: map['syncStatusId'],
        estimatedShipDate: map['estimatedShipDate'],
        subscriptionId: map['subscriptionId'],
        priceDetailText: map['priceDetailText'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        diameterUomId: map['diameterUomId'],
        productDiameter: map['productDiameter'],
        ratingTypeEnum: map['ratingTypeEnum'],
        chargeShipping: map['chargeShipping'],
        reservNthPPPerc: map['reservNthPPPerc'],
        isPromo: map['isPromo'],
        quantityIncluded: map['quantityIncluded'],
        heightUomId: map['heightUomId'],
        shipBeforeDate: map['shipBeforeDate'],
        productCategoryId: map['productCategoryId'],
        virtualVariantMethodEnum: map['virtualVariantMethodEnum'],
        shippingWeight: map['shippingWeight'],
        shippingWidth: map['shippingWidth'],
        shippingDepth: map['shippingDepth'],
        inventoryItemTypeId: map['inventoryItemTypeId'],
        piecesIncluded: map['piecesIncluded'],
        dontCancelSetDate: map['dontCancelSetDate'],
        recurringFreqUomId: map['recurringFreqUomId'],
        productHeight: map['productHeight'],
        fromInventoryItemId: map['fromInventoryItemId'],
        defaultShipmentBoxTypeId: map['defaultShipmentBoxTypeId'],
        orderDecimalQuantity: map['orderDecimalQuantity'],
        budgetItemSeqId: map['budgetItemSeqId'],
        productWeight: map['productWeight'],
        depthUomId: map['depthUomId'],
        correspondingPoId: map['correspondingPoId'],
        cancelQuantity: map['cancelQuantity'],
        createdDate: map['createdDate'],
        isVariant: map['isVariant'],
        detailScreen: map['detailScreen'],
        requireInventory: map['requireInventory'],
        quantityUomId: map['quantityUomId'],
        introductionDate: map['introductionDate'],
        shippingHeight: map['shippingHeight'],
        detailImageUrl: map['detailImageUrl'],
        includeInPromotions: map['includeInPromotions'],
        configId: map['configId'],
        cancelBackOrderDate: map['cancelBackOrderDate'],
        billOfMaterialLevel: map['billOfMaterialLevel'],
        itemDescription: map['itemDescription'],
        lotIdFilledIn: map['lotIdFilledIn'],
        brandName: map['brandName'],
        smallImageUrl: map['smallImageUrl'],
        unitRecurringPrice: map['unitRecurringPrice'],
        autoCancelDate: map['autoCancelDate'],
        productFeatureId: map['productFeatureId'],
        overrideGlAccountId: map['overrideGlAccountId'],
        budgetId: map['budgetId'],
        weightUomId: map['weightUomId'],
        shoppingListItemSeqId: map['shoppingListItemSeqId'],
        isVirtual: map['isVirtual'],
        salesOpportunityId: map['salesOpportunityId'],
        widthUomId: map['widthUomId'],
        longDescription: map['longDescription'],
        autoCreateKeywords: map['autoCreateKeywords'],
        dontCancelSetUserLogin: map['dontCancelSetUserLogin'],
        amountUomTypeId: map['amountUomTypeId'],
        description: map['description'],
        isModifiedPrice: map['isModifiedPrice'],
        internalName: map['internalName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        shoppingListId: map['shoppingListId'],
        unitListPrice: map['unitListPrice'],
        unitAverageCost: map['unitAverageCost'],
        reservMaxPersons: map['reservMaxPersons'],
        fixedAmount: map['fixedAmount'],
        orderItemTypeId: map['orderItemTypeId'],
        productDepth: map['productDepth'],
        quantity: map['quantity'],
        comments: map['comments'],
        facilityId: map['facilityId'],
        releaseDate: map['releaseDate'],
        lastModifiedDate: map['lastModifiedDate'],
        orderItemGroupSeqId: map['orderItemGroupSeqId'],
        quoteItemSeqId: map['quoteItemSeqId'],
        externalId: map['externalId'],
        inventoryMessage: map['inventoryMessage'],
        productTypeId: map['productTypeId'],
        shipAfterDate: map['shipAfterDate'],
        largeImageUrl: map['largeImageUrl'],
        requirementMethodEnumId: map['requirementMethodEnumId'],
        changeByUserLoginId: map['changeByUserLoginId'],
        prodCatalogId: map['prodCatalogId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemAndProductContentInfo extractOrderItemAndProductContentInfo(dynamic json) {
    return OrderItemAndProductContentInfo(
        entityId: create_id_from('OrderItemAndProductContentInfo', ['orderId', 'orderItemSeqId', 'contentId', 'productContentTypeId', 'fromDate'], json),
        useTimeUomId: json['useTimeUomId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        orderId: json['orderId'] as String,
        originGeoId: json['originGeoId'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        mediumImageUrl: json['mediumImageUrl'] as String,
        productName: json['productName'] as String,
        originalImageUrl: json['originalImageUrl'] as String,
        inShippingBox: json['inShippingBox'] as String,
        supportDiscontinuationDate: check_dt(json['supportDiscontinuationDate']),
        productWidth: json['productWidth'] as double,
        deploymentId: json['deploymentId'] as String,
        dataResourceId: json['dataResourceId'] as String,
        productRating: json['productRating'] as double,
        createdByUserLogin: json['createdByUserLogin'] as String,
        selectedAmount: json['selectedAmount'] as double,
        orderItemSeqId: json['orderItemSeqId'] as String,
        unitPrice: json['unitPrice'] as double,
        requireAmount: json['requireAmount'] as String,
        productId: json['productId'] as String,
        taxable: json['taxable'] as String,
        primaryProductCategoryId: json['primaryProductCategoryId'] as String,
        salesDiscontinuationDate: check_dt(json['salesDiscontinuationDate']),
        isItemGroupPrimary: json['isItemGroupPrimary'] as String,
        useCountLimit: json['useCountLimit'] as int,
        supplierProductId: json['supplierProductId'] as String,
        estimatedDeliveryDate: check_dt(json['estimatedDeliveryDate']),
        quoteId: json['quoteId'] as String,
        salesDiscWhenNotAvail: json['salesDiscWhenNotAvail'] as String,
        returnable: json['returnable'] as String,
        statusId: json['statusId'] as String,
        syncStatusId: json['syncStatusId'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        subscriptionId: json['subscriptionId'] as String,
        priceDetailText: json['priceDetailText'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        childBranchCount: json['childBranchCount'] as int,
        diameterUomId: json['diameterUomId'] as String,
        productDiameter: json['productDiameter'] as double,
        contentTypeId: json['contentTypeId'] as String,
        ratingTypeEnum: json['ratingTypeEnum'] as String,
        contentStatusId: json['contentStatusId'] as String,
        chargeShipping: json['chargeShipping'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        isPromo: json['isPromo'] as String,
        quantityIncluded: json['quantityIncluded'] as double,
        heightUomId: json['heightUomId'] as String,
        shipBeforeDate: check_dt(json['shipBeforeDate']),
        dataSourceId: json['dataSourceId'] as String,
        productCategoryId: json['productCategoryId'] as String,
        virtualVariantMethodEnum: json['virtualVariantMethodEnum'] as String,
        shippingWeight: json['shippingWeight'] as double,
        shippingWidth: json['shippingWidth'] as double,
        shippingDepth: json['shippingDepth'] as double,
        inventoryItemTypeId: json['inventoryItemTypeId'] as String,
        piecesIncluded: json['piecesIncluded'] as int,
        dontCancelSetDate: check_dt(json['dontCancelSetDate']),
        purchaseFromDate: check_dt(json['purchaseFromDate']),
        recurringFreqUomId: json['recurringFreqUomId'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        productHeight: json['productHeight'] as double,
        fromInventoryItemId: json['fromInventoryItemId'] as String,
        defaultShipmentBoxTypeId: json['defaultShipmentBoxTypeId'] as String,
        orderDecimalQuantity: json['orderDecimalQuantity'] as String,
        budgetItemSeqId: json['budgetItemSeqId'] as String,
        productWeight: json['productWeight'] as double,
        depthUomId: json['depthUomId'] as String,
        correspondingPoId: json['correspondingPoId'] as String,
        productContentTypeId: json['productContentTypeId'] as String,
        cancelQuantity: json['cancelQuantity'] as double,
        contentName: json['contentName'] as String,
        createdDate: check_dt(json['createdDate']),
        localeString: json['localeString'] as String,
        isVariant: json['isVariant'] as String,
        ownerContentId: json['ownerContentId'] as String,
        detailScreen: json['detailScreen'] as String,
        requireInventory: json['requireInventory'] as String,
        quantityUomId: json['quantityUomId'] as String,
        introductionDate: check_dt(json['introductionDate']),
        shippingHeight: json['shippingHeight'] as double,
        privilegeEnumId: json['privilegeEnumId'] as String,
        detailImageUrl: json['detailImageUrl'] as String,
        includeInPromotions: json['includeInPromotions'] as String,
        configId: json['configId'] as String,
        cancelBackOrderDate: check_dt(json['cancelBackOrderDate']),
        billOfMaterialLevel: json['billOfMaterialLevel'] as int,
        itemDescription: json['itemDescription'] as String,
        lotIdFilledIn: json['lotIdFilledIn'] as String,
        brandName: json['brandName'] as String,
        smallImageUrl: json['smallImageUrl'] as String,
        unitRecurringPrice: json['unitRecurringPrice'] as double,
        instanceOfContentId: json['instanceOfContentId'] as String,
        autoCancelDate: check_dt(json['autoCancelDate']),
        productFeatureId: json['productFeatureId'] as String,
        overrideGlAccountId: json['overrideGlAccountId'] as String,
        budgetId: json['budgetId'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        weightUomId: json['weightUomId'] as String,
        shoppingListItemSeqId: json['shoppingListItemSeqId'] as String,
        isVirtual: json['isVirtual'] as String,
        salesOpportunityId: json['salesOpportunityId'] as String,
        widthUomId: json['widthUomId'] as String,
        longDescription: json['longDescription'] as String,
        autoCreateKeywords: json['autoCreateKeywords'] as String,
        dontCancelSetUserLogin: json['dontCancelSetUserLogin'] as String,
        amountUomTypeId: json['amountUomTypeId'] as String,
        contentId: json['contentId'] as String,
        description: json['description'] as String,
        childLeafCount: json['childLeafCount'] as int,
        isModifiedPrice: json['isModifiedPrice'] as String,
        internalName: json['internalName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        shoppingListId: json['shoppingListId'] as String,
        unitListPrice: json['unitListPrice'] as double,
        unitAverageCost: json['unitAverageCost'] as double,
        useRoleTypeId: json['useRoleTypeId'] as String,
        useTime: json['useTime'] as int,
        reservMaxPersons: json['reservMaxPersons'] as double,
        fixedAmount: json['fixedAmount'] as double,
        orderItemTypeId: json['orderItemTypeId'] as String,
        productDepth: json['productDepth'] as double,
        quantity: json['quantity'] as double,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        releaseDate: check_dt(json['releaseDate']),
        orderItemGroupSeqId: json['orderItemGroupSeqId'] as String,
        quoteItemSeqId: json['quoteItemSeqId'] as String,
        externalId: json['externalId'] as String,
        inventoryMessage: json['inventoryMessage'] as String,
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        productTypeId: json['productTypeId'] as String,
        shipAfterDate: check_dt(json['shipAfterDate']),
        largeImageUrl: json['largeImageUrl'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        purchaseThruDate: check_dt(json['purchaseThruDate']),
        requirementMethodEnumId: json['requirementMethodEnumId'] as String,
        changeByUserLoginId: json['changeByUserLoginId'] as String,
        prodCatalogId: json['prodCatalogId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemAndProductContentInfo overridesOrderItemAndProductContentInfo(Map<String, dynamic> map) {
    return OrderItemAndProductContentInfo(
        entityId: create_id_from('OrderItemAndProductContentInfo', ['orderId', 'orderItemSeqId', 'contentId', 'productContentTypeId', 'fromDate'], map),
        useTimeUomId: map['useTimeUomId'],
        sequenceNum: map['sequenceNum'],
        orderId: map['orderId'],
        originGeoId: map['originGeoId'],
        mimeTypeId: map['mimeTypeId'],
        mediumImageUrl: map['mediumImageUrl'],
        productName: map['productName'],
        originalImageUrl: map['originalImageUrl'],
        inShippingBox: map['inShippingBox'],
        supportDiscontinuationDate: map['supportDiscontinuationDate'],
        productWidth: map['productWidth'],
        deploymentId: map['deploymentId'],
        dataResourceId: map['dataResourceId'],
        productRating: map['productRating'],
        createdByUserLogin: map['createdByUserLogin'],
        selectedAmount: map['selectedAmount'],
        orderItemSeqId: map['orderItemSeqId'],
        unitPrice: map['unitPrice'],
        requireAmount: map['requireAmount'],
        productId: map['productId'],
        taxable: map['taxable'],
        primaryProductCategoryId: map['primaryProductCategoryId'],
        salesDiscontinuationDate: map['salesDiscontinuationDate'],
        isItemGroupPrimary: map['isItemGroupPrimary'],
        useCountLimit: map['useCountLimit'],
        supplierProductId: map['supplierProductId'],
        estimatedDeliveryDate: map['estimatedDeliveryDate'],
        quoteId: map['quoteId'],
        salesDiscWhenNotAvail: map['salesDiscWhenNotAvail'],
        returnable: map['returnable'],
        statusId: map['statusId'],
        syncStatusId: map['syncStatusId'],
        estimatedShipDate: map['estimatedShipDate'],
        subscriptionId: map['subscriptionId'],
        priceDetailText: map['priceDetailText'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        childBranchCount: map['childBranchCount'],
        diameterUomId: map['diameterUomId'],
        productDiameter: map['productDiameter'],
        contentTypeId: map['contentTypeId'],
        ratingTypeEnum: map['ratingTypeEnum'],
        contentStatusId: map['contentStatusId'],
        chargeShipping: map['chargeShipping'],
        reservNthPPPerc: map['reservNthPPPerc'],
        isPromo: map['isPromo'],
        quantityIncluded: map['quantityIncluded'],
        heightUomId: map['heightUomId'],
        shipBeforeDate: map['shipBeforeDate'],
        dataSourceId: map['dataSourceId'],
        productCategoryId: map['productCategoryId'],
        virtualVariantMethodEnum: map['virtualVariantMethodEnum'],
        shippingWeight: map['shippingWeight'],
        shippingWidth: map['shippingWidth'],
        shippingDepth: map['shippingDepth'],
        inventoryItemTypeId: map['inventoryItemTypeId'],
        piecesIncluded: map['piecesIncluded'],
        dontCancelSetDate: map['dontCancelSetDate'],
        purchaseFromDate: map['purchaseFromDate'],
        recurringFreqUomId: map['recurringFreqUomId'],
        templateDataResourceId: map['templateDataResourceId'],
        productHeight: map['productHeight'],
        fromInventoryItemId: map['fromInventoryItemId'],
        defaultShipmentBoxTypeId: map['defaultShipmentBoxTypeId'],
        orderDecimalQuantity: map['orderDecimalQuantity'],
        budgetItemSeqId: map['budgetItemSeqId'],
        productWeight: map['productWeight'],
        depthUomId: map['depthUomId'],
        correspondingPoId: map['correspondingPoId'],
        productContentTypeId: map['productContentTypeId'],
        cancelQuantity: map['cancelQuantity'],
        contentName: map['contentName'],
        createdDate: map['createdDate'],
        localeString: map['localeString'],
        isVariant: map['isVariant'],
        ownerContentId: map['ownerContentId'],
        detailScreen: map['detailScreen'],
        requireInventory: map['requireInventory'],
        quantityUomId: map['quantityUomId'],
        introductionDate: map['introductionDate'],
        shippingHeight: map['shippingHeight'],
        privilegeEnumId: map['privilegeEnumId'],
        detailImageUrl: map['detailImageUrl'],
        includeInPromotions: map['includeInPromotions'],
        configId: map['configId'],
        cancelBackOrderDate: map['cancelBackOrderDate'],
        billOfMaterialLevel: map['billOfMaterialLevel'],
        itemDescription: map['itemDescription'],
        lotIdFilledIn: map['lotIdFilledIn'],
        brandName: map['brandName'],
        smallImageUrl: map['smallImageUrl'],
        unitRecurringPrice: map['unitRecurringPrice'],
        instanceOfContentId: map['instanceOfContentId'],
        autoCancelDate: map['autoCancelDate'],
        productFeatureId: map['productFeatureId'],
        overrideGlAccountId: map['overrideGlAccountId'],
        budgetId: map['budgetId'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        weightUomId: map['weightUomId'],
        shoppingListItemSeqId: map['shoppingListItemSeqId'],
        isVirtual: map['isVirtual'],
        salesOpportunityId: map['salesOpportunityId'],
        widthUomId: map['widthUomId'],
        longDescription: map['longDescription'],
        autoCreateKeywords: map['autoCreateKeywords'],
        dontCancelSetUserLogin: map['dontCancelSetUserLogin'],
        amountUomTypeId: map['amountUomTypeId'],
        contentId: map['contentId'],
        description: map['description'],
        childLeafCount: map['childLeafCount'],
        isModifiedPrice: map['isModifiedPrice'],
        internalName: map['internalName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        shoppingListId: map['shoppingListId'],
        unitListPrice: map['unitListPrice'],
        unitAverageCost: map['unitAverageCost'],
        useRoleTypeId: map['useRoleTypeId'],
        useTime: map['useTime'],
        reservMaxPersons: map['reservMaxPersons'],
        fixedAmount: map['fixedAmount'],
        orderItemTypeId: map['orderItemTypeId'],
        productDepth: map['productDepth'],
        quantity: map['quantity'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        lastModifiedDate: map['lastModifiedDate'],
        releaseDate: map['releaseDate'],
        orderItemGroupSeqId: map['orderItemGroupSeqId'],
        quoteItemSeqId: map['quoteItemSeqId'],
        externalId: map['externalId'],
        inventoryMessage: map['inventoryMessage'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        productTypeId: map['productTypeId'],
        shipAfterDate: map['shipAfterDate'],
        largeImageUrl: map['largeImageUrl'],
        decoratorContentId: map['decoratorContentId'],
        purchaseThruDate: map['purchaseThruDate'],
        requirementMethodEnumId: map['requirementMethodEnumId'],
        changeByUserLoginId: map['changeByUserLoginId'],
        prodCatalogId: map['prodCatalogId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemAndShipGroupAssoc extractOrderItemAndShipGroupAssoc(dynamic json) {
    return OrderItemAndShipGroupAssoc(
        entityId: create_id_from('OrderItemAndShipGroupAssoc', ['orderId', 'orderItemSeqId', 'shipGroupSeqId'], json),
        orderId: json['orderId'] as String,
        deploymentId: json['deploymentId'] as String,
        cancelBackOrderDate: check_dt(json['cancelBackOrderDate']),
        itemDescription: json['itemDescription'] as String,
        selectedAmount: json['selectedAmount'] as double,
        orderItemSeqId: json['orderItemSeqId'] as String,
        unitPrice: json['unitPrice'] as double,
        orderItemCancelQuantity: json['orderItemCancelQuantity'] as double,
        productId: json['productId'] as String,
        unitRecurringPrice: json['unitRecurringPrice'] as double,
        isItemGroupPrimary: json['isItemGroupPrimary'] as String,
        autoCancelDate: check_dt(json['autoCancelDate']),
        productFeatureId: json['productFeatureId'] as String,
        overrideGlAccountId: json['overrideGlAccountId'] as String,
        budgetId: json['budgetId'] as String,
        supplierProductId: json['supplierProductId'] as String,
        estimatedDeliveryDate: check_dt(json['estimatedDeliveryDate']),
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        quoteId: json['quoteId'] as String,
        statusId: json['statusId'] as String,
        syncStatusId: json['syncStatusId'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        shoppingListItemSeqId: json['shoppingListItemSeqId'] as String,
        subscriptionId: json['subscriptionId'] as String,
        salesOpportunityId: json['salesOpportunityId'] as String,
        dontCancelSetUserLogin: json['dontCancelSetUserLogin'] as String,
        isPromo: json['isPromo'] as String,
        isModifiedPrice: json['isModifiedPrice'] as String,
        shipBeforeDate: check_dt(json['shipBeforeDate']),
        productCategoryId: json['productCategoryId'] as String,
        shoppingListId: json['shoppingListId'] as String,
        unitListPrice: json['unitListPrice'] as double,
        unitAverageCost: json['unitAverageCost'] as double,
        orderItemTypeId: json['orderItemTypeId'] as String,
        dontCancelSetDate: check_dt(json['dontCancelSetDate']),
        comments: json['comments'] as String,
        quantity: json['quantity'] as double,
        recurringFreqUomId: json['recurringFreqUomId'] as String,
        orderItemGroupSeqId: json['orderItemGroupSeqId'] as String,
        quoteItemSeqId: json['quoteItemSeqId'] as String,
        externalId: json['externalId'] as String,
        fromInventoryItemId: json['fromInventoryItemId'] as String,
        budgetItemSeqId: json['budgetItemSeqId'] as String,
        correspondingPoId: json['correspondingPoId'] as String,
        cancelQuantity: json['cancelQuantity'] as double,
        shipAfterDate: check_dt(json['shipAfterDate']),
        changeByUserLoginId: json['changeByUserLoginId'] as String,
        orderItemQuantity: json['orderItemQuantity'] as double,
        prodCatalogId: json['prodCatalogId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemAndShipGroupAssoc overridesOrderItemAndShipGroupAssoc(Map<String, dynamic> map) {
    return OrderItemAndShipGroupAssoc(
        entityId: create_id_from('OrderItemAndShipGroupAssoc', ['orderId', 'orderItemSeqId', 'shipGroupSeqId'], map),
        orderId: map['orderId'],
        deploymentId: map['deploymentId'],
        cancelBackOrderDate: map['cancelBackOrderDate'],
        itemDescription: map['itemDescription'],
        selectedAmount: map['selectedAmount'],
        orderItemSeqId: map['orderItemSeqId'],
        unitPrice: map['unitPrice'],
        orderItemCancelQuantity: map['orderItemCancelQuantity'],
        productId: map['productId'],
        unitRecurringPrice: map['unitRecurringPrice'],
        isItemGroupPrimary: map['isItemGroupPrimary'],
        autoCancelDate: map['autoCancelDate'],
        productFeatureId: map['productFeatureId'],
        overrideGlAccountId: map['overrideGlAccountId'],
        budgetId: map['budgetId'],
        supplierProductId: map['supplierProductId'],
        estimatedDeliveryDate: map['estimatedDeliveryDate'],
        shipGroupSeqId: map['shipGroupSeqId'],
        quoteId: map['quoteId'],
        statusId: map['statusId'],
        syncStatusId: map['syncStatusId'],
        estimatedShipDate: map['estimatedShipDate'],
        shoppingListItemSeqId: map['shoppingListItemSeqId'],
        subscriptionId: map['subscriptionId'],
        salesOpportunityId: map['salesOpportunityId'],
        dontCancelSetUserLogin: map['dontCancelSetUserLogin'],
        isPromo: map['isPromo'],
        isModifiedPrice: map['isModifiedPrice'],
        shipBeforeDate: map['shipBeforeDate'],
        productCategoryId: map['productCategoryId'],
        shoppingListId: map['shoppingListId'],
        unitListPrice: map['unitListPrice'],
        unitAverageCost: map['unitAverageCost'],
        orderItemTypeId: map['orderItemTypeId'],
        dontCancelSetDate: map['dontCancelSetDate'],
        comments: map['comments'],
        quantity: map['quantity'],
        recurringFreqUomId: map['recurringFreqUomId'],
        orderItemGroupSeqId: map['orderItemGroupSeqId'],
        quoteItemSeqId: map['quoteItemSeqId'],
        externalId: map['externalId'],
        fromInventoryItemId: map['fromInventoryItemId'],
        budgetItemSeqId: map['budgetItemSeqId'],
        correspondingPoId: map['correspondingPoId'],
        cancelQuantity: map['cancelQuantity'],
        shipAfterDate: map['shipAfterDate'],
        changeByUserLoginId: map['changeByUserLoginId'],
        orderItemQuantity: map['orderItemQuantity'],
        prodCatalogId: map['prodCatalogId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemAndShipGrpInvResAndItem extractOrderItemAndShipGrpInvResAndItem(dynamic json) {
    return OrderItemAndShipGrpInvResAndItem(
        entityId: create_id_from('OrderItemAndShipGrpInvResAndItem', ['orderId', 'orderItemSeqId', 'shipGroupSeqId', 'inventoryItemId'], json),
        orderId: json['orderId'] as String,
        binNumber: json['binNumber'] as String,
        sequenceId: json['sequenceId'] as int,
        oldAvailableToPromise: json['oldAvailableToPromise'] as double,
        deploymentId: json['deploymentId'] as String,
        cancelBackOrderDate: check_dt(json['cancelBackOrderDate']),
        itemDescription: json['itemDescription'] as String,
        reservedDatetime: check_dt(json['reservedDatetime']),
        partyId: json['partyId'] as String,
        containerId: json['containerId'] as String,
        selectedAmount: json['selectedAmount'] as double,
        locationSeqId: json['locationSeqId'] as String,
        orderItemSeqId: json['orderItemSeqId'] as String,
        unitPrice: json['unitPrice'] as double,
        serialNumber: json['serialNumber'] as String,
        productId: json['productId'] as String,
        unitRecurringPrice: json['unitRecurringPrice'] as double,
        isItemGroupPrimary: json['isItemGroupPrimary'] as String,
        autoCancelDate: check_dt(json['autoCancelDate']),
        productFeatureId: json['productFeatureId'] as String,
        overrideGlAccountId: json['overrideGlAccountId'] as String,
        uomId: json['uomId'] as String,
        budgetId: json['budgetId'] as String,
        supplierProductId: json['supplierProductId'] as String,
        priority: json['priority'] as String,
        estimatedDeliveryDate: check_dt(json['estimatedDeliveryDate']),
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        quoteId: json['quoteId'] as String,
        inventoryItemId: json['inventoryItemId'] as String,
        statusId: json['statusId'] as String,
        syncStatusId: json['syncStatusId'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        quantityNotAvailable: json['quantityNotAvailable'] as double,
        createdDatetime: check_dt(json['createdDatetime']),
        shoppingListItemSeqId: json['shoppingListItemSeqId'] as String,
        reserveOrderEnumId: json['reserveOrderEnumId'] as String,
        subscriptionId: json['subscriptionId'] as String,
        salesOpportunityId: json['salesOpportunityId'] as String,
        dontCancelSetUserLogin: json['dontCancelSetUserLogin'] as String,
        softIdentifier: json['softIdentifier'] as String,
        promisedDatetime: check_dt(json['promisedDatetime']),
        isPromo: json['isPromo'] as String,
        isModifiedPrice: json['isModifiedPrice'] as String,
        oldPickStartDate: check_dt(json['oldPickStartDate']),
        shipBeforeDate: check_dt(json['shipBeforeDate']),
        productCategoryId: json['productCategoryId'] as String,
        shoppingListId: json['shoppingListId'] as String,
        unitListPrice: json['unitListPrice'] as double,
        quantityOnHandTotal: json['quantityOnHandTotal'] as double,
        unitAverageCost: json['unitAverageCost'] as double,
        datetimeManufactured: check_dt(json['datetimeManufactured']),
        expireDate: check_dt(json['expireDate']),
        oldQuantityOnHand: json['oldQuantityOnHand'] as double,
        availableToPromiseTotal: json['availableToPromiseTotal'] as double,
        orderItemTypeId: json['orderItemTypeId'] as String,
        inventoryItemTypeId: json['inventoryItemTypeId'] as String,
        dontCancelSetDate: check_dt(json['dontCancelSetDate']),
        quantity: json['quantity'] as double,
        comments: json['comments'] as String,
        facilityId: json['facilityId'] as String,
        recurringFreqUomId: json['recurringFreqUomId'] as String,
        orderItemGroupSeqId: json['orderItemGroupSeqId'] as String,
        quoteItemSeqId: json['quoteItemSeqId'] as String,
        externalId: json['externalId'] as String,
        fromInventoryItemId: json['fromInventoryItemId'] as String,
        budgetItemSeqId: json['budgetItemSeqId'] as String,
        lotId: json['lotId'] as String,
        accountingQuantityTotal: json['accountingQuantityTotal'] as double,
        correspondingPoId: json['correspondingPoId'] as String,
        cancelQuantity: json['cancelQuantity'] as double,
        shipAfterDate: check_dt(json['shipAfterDate']),
        currentPromisedDate: check_dt(json['currentPromisedDate']),
        ownerPartyId: json['ownerPartyId'] as String,
        activationValidThru: check_dt(json['activationValidThru']),
        activationNumber: json['activationNumber'] as String,
        currencyUomId: json['currencyUomId'] as String,
        unitCost: json['unitCost'] as double,
        datetimeReceived: check_dt(json['datetimeReceived']),
        changeByUserLoginId: json['changeByUserLoginId'] as String,
        prodCatalogId: json['prodCatalogId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemAndShipGrpInvResAndItem overridesOrderItemAndShipGrpInvResAndItem(Map<String, dynamic> map) {
    return OrderItemAndShipGrpInvResAndItem(
        entityId: create_id_from('OrderItemAndShipGrpInvResAndItem', ['orderId', 'orderItemSeqId', 'shipGroupSeqId', 'inventoryItemId'], map),
        orderId: map['orderId'],
        binNumber: map['binNumber'],
        sequenceId: map['sequenceId'],
        oldAvailableToPromise: map['oldAvailableToPromise'],
        deploymentId: map['deploymentId'],
        cancelBackOrderDate: map['cancelBackOrderDate'],
        itemDescription: map['itemDescription'],
        reservedDatetime: map['reservedDatetime'],
        partyId: map['partyId'],
        containerId: map['containerId'],
        selectedAmount: map['selectedAmount'],
        locationSeqId: map['locationSeqId'],
        orderItemSeqId: map['orderItemSeqId'],
        unitPrice: map['unitPrice'],
        serialNumber: map['serialNumber'],
        productId: map['productId'],
        unitRecurringPrice: map['unitRecurringPrice'],
        isItemGroupPrimary: map['isItemGroupPrimary'],
        autoCancelDate: map['autoCancelDate'],
        productFeatureId: map['productFeatureId'],
        overrideGlAccountId: map['overrideGlAccountId'],
        uomId: map['uomId'],
        budgetId: map['budgetId'],
        supplierProductId: map['supplierProductId'],
        priority: map['priority'],
        estimatedDeliveryDate: map['estimatedDeliveryDate'],
        shipGroupSeqId: map['shipGroupSeqId'],
        quoteId: map['quoteId'],
        inventoryItemId: map['inventoryItemId'],
        statusId: map['statusId'],
        syncStatusId: map['syncStatusId'],
        estimatedShipDate: map['estimatedShipDate'],
        fixedAssetId: map['fixedAssetId'],
        quantityNotAvailable: map['quantityNotAvailable'],
        createdDatetime: map['createdDatetime'],
        shoppingListItemSeqId: map['shoppingListItemSeqId'],
        reserveOrderEnumId: map['reserveOrderEnumId'],
        subscriptionId: map['subscriptionId'],
        salesOpportunityId: map['salesOpportunityId'],
        dontCancelSetUserLogin: map['dontCancelSetUserLogin'],
        softIdentifier: map['softIdentifier'],
        promisedDatetime: map['promisedDatetime'],
        isPromo: map['isPromo'],
        isModifiedPrice: map['isModifiedPrice'],
        oldPickStartDate: map['oldPickStartDate'],
        shipBeforeDate: map['shipBeforeDate'],
        productCategoryId: map['productCategoryId'],
        shoppingListId: map['shoppingListId'],
        unitListPrice: map['unitListPrice'],
        quantityOnHandTotal: map['quantityOnHandTotal'],
        unitAverageCost: map['unitAverageCost'],
        datetimeManufactured: map['datetimeManufactured'],
        expireDate: map['expireDate'],
        oldQuantityOnHand: map['oldQuantityOnHand'],
        availableToPromiseTotal: map['availableToPromiseTotal'],
        orderItemTypeId: map['orderItemTypeId'],
        inventoryItemTypeId: map['inventoryItemTypeId'],
        dontCancelSetDate: map['dontCancelSetDate'],
        quantity: map['quantity'],
        comments: map['comments'],
        facilityId: map['facilityId'],
        recurringFreqUomId: map['recurringFreqUomId'],
        orderItemGroupSeqId: map['orderItemGroupSeqId'],
        quoteItemSeqId: map['quoteItemSeqId'],
        externalId: map['externalId'],
        fromInventoryItemId: map['fromInventoryItemId'],
        budgetItemSeqId: map['budgetItemSeqId'],
        lotId: map['lotId'],
        accountingQuantityTotal: map['accountingQuantityTotal'],
        correspondingPoId: map['correspondingPoId'],
        cancelQuantity: map['cancelQuantity'],
        shipAfterDate: map['shipAfterDate'],
        currentPromisedDate: map['currentPromisedDate'],
        ownerPartyId: map['ownerPartyId'],
        activationValidThru: map['activationValidThru'],
        activationNumber: map['activationNumber'],
        currencyUomId: map['currencyUomId'],
        unitCost: map['unitCost'],
        datetimeReceived: map['datetimeReceived'],
        changeByUserLoginId: map['changeByUserLoginId'],
        prodCatalogId: map['prodCatalogId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemAndShipGrpInvResAndItemSum extractOrderItemAndShipGrpInvResAndItemSum(dynamic json) {
    return OrderItemAndShipGrpInvResAndItemSum(
        entityId: create_id_from('OrderItemAndShipGrpInvResAndItemSum', ['orderId', 'orderItemSeqId', 'shipGroupSeqId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        productId: json['productId'] as String,
        orderId: json['orderId'] as String,
        totQuantityAvailable: json['totQuantityAvailable'] as double,
        quantityOrdered: json['quantityOrdered'] as double,
        totQuantityReserved: json['totQuantityReserved'] as double,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        inventoryProductId: json['inventoryProductId'] as String,
        totQuantityNotAvailable: json['totQuantityNotAvailable'] as double,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemAndShipGrpInvResAndItemSum overridesOrderItemAndShipGrpInvResAndItemSum(Map<String, dynamic> map) {
    return OrderItemAndShipGrpInvResAndItemSum(
        entityId: create_id_from('OrderItemAndShipGrpInvResAndItemSum', ['orderId', 'orderItemSeqId', 'shipGroupSeqId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        productId: map['productId'],
        orderId: map['orderId'],
        totQuantityAvailable: map['totQuantityAvailable'],
        quantityOrdered: map['quantityOrdered'],
        totQuantityReserved: map['totQuantityReserved'],
        shipGroupSeqId: map['shipGroupSeqId'],
        inventoryProductId: map['inventoryProductId'],
        totQuantityNotAvailable: map['totQuantityNotAvailable'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemAssoc extractOrderItemAssoc(dynamic json) {
    return OrderItemAssoc(
        entityId: create_id_from('OrderItemAssoc', ['orderId', 'orderItemSeqId', 'shipGroupSeqId', 'toOrderId', 'toOrderItemSeqId', 'toShipGroupSeqId', 'orderItemAssocTypeId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        quantity: json['quantity'] as double,
        toOrderId: json['toOrderId'] as String,
        orderId: json['orderId'] as String,
        toOrderItemSeqId: json['toOrderItemSeqId'] as String,
        orderItemAssocTypeId: json['orderItemAssocTypeId'] as String,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        toShipGroupSeqId: json['toShipGroupSeqId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemAssoc overridesOrderItemAssoc(Map<String, dynamic> map) {
    return OrderItemAssoc(
        entityId: create_id_from('OrderItemAssoc', ['orderId', 'orderItemSeqId', 'shipGroupSeqId', 'toOrderId', 'toOrderItemSeqId', 'toShipGroupSeqId', 'orderItemAssocTypeId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        quantity: map['quantity'],
        toOrderId: map['toOrderId'],
        orderId: map['orderId'],
        toOrderItemSeqId: map['toOrderItemSeqId'],
        orderItemAssocTypeId: map['orderItemAssocTypeId'],
        shipGroupSeqId: map['shipGroupSeqId'],
        toShipGroupSeqId: map['toShipGroupSeqId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemAssocType extractOrderItemAssocType(dynamic json) {
    return OrderItemAssocType(
        entityId: create_id_from('OrderItemAssocType', ['orderItemAssocTypeId'], json),
        parentTypeId: json['parentTypeId'] as String,
        hasTable: json['hasTable'] as String,
        description: json['description'] as String,
        orderItemAssocTypeId: json['orderItemAssocTypeId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemAssocType overridesOrderItemAssocType(Map<String, dynamic> map) {
    return OrderItemAssocType(
        entityId: create_id_from('OrderItemAssocType', ['orderItemAssocTypeId'], map),
        parentTypeId: map['parentTypeId'],
        hasTable: map['hasTable'],
        description: map['description'],
        orderItemAssocTypeId: map['orderItemAssocTypeId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemAttribute extractOrderItemAttribute(dynamic json) {
    return OrderItemAttribute(
        entityId: create_id_from('OrderItemAttribute', ['orderId', 'orderItemSeqId', 'attrName'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        orderId: json['orderId'] as String,
        attrDescription: json['attrDescription'] as String,
        attrValue: json['attrValue'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemAttribute overridesOrderItemAttribute(Map<String, dynamic> map) {
    return OrderItemAttribute(
        entityId: create_id_from('OrderItemAttribute', ['orderId', 'orderItemSeqId', 'attrName'], map),
        orderItemSeqId: map['orderItemSeqId'],
        orderId: map['orderId'],
        attrDescription: map['attrDescription'],
        attrValue: map['attrValue'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemBilling extractOrderItemBilling(dynamic json) {
    return OrderItemBilling(
        entityId: create_id_from('OrderItemBilling', ['orderId', 'orderItemSeqId', 'invoiceId', 'invoiceItemSeqId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        amount: json['amount'] as double,
        quantity: json['quantity'] as double,
        orderId: json['orderId'] as String,
        itemIssuanceId: json['itemIssuanceId'] as String,
        invoiceId: json['invoiceId'] as String,
        invoiceItemSeqId: json['invoiceItemSeqId'] as String,
        shipmentReceiptId: json['shipmentReceiptId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemBilling overridesOrderItemBilling(Map<String, dynamic> map) {
    return OrderItemBilling(
        entityId: create_id_from('OrderItemBilling', ['orderId', 'orderItemSeqId', 'invoiceId', 'invoiceItemSeqId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        amount: map['amount'],
        quantity: map['quantity'],
        orderId: map['orderId'],
        itemIssuanceId: map['itemIssuanceId'],
        invoiceId: map['invoiceId'],
        invoiceItemSeqId: map['invoiceItemSeqId'],
        shipmentReceiptId: map['shipmentReceiptId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemBillingAndInvoiceAndItem extractOrderItemBillingAndInvoiceAndItem(dynamic json) {
    return OrderItemBillingAndInvoiceAndItem(
        entityId: create_id_from('OrderItemBillingAndInvoiceAndItem', ['orderItemSeqId', 'orderId', 'invoiceId', 'invoiceItemSeqId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        amount: json['amount'] as double,
        quantity: json['quantity'] as double,
        statusId: json['statusId'] as String,
        orderId: json['orderId'] as String,
        itemIssuanceId: json['itemIssuanceId'] as String,
        invoiceId: json['invoiceId'] as String,
        invoiceItemSeqId: json['invoiceItemSeqId'] as String,
        shipmentReceiptId: json['shipmentReceiptId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemBillingAndInvoiceAndItem overridesOrderItemBillingAndInvoiceAndItem(Map<String, dynamic> map) {
    return OrderItemBillingAndInvoiceAndItem(
        entityId: create_id_from('OrderItemBillingAndInvoiceAndItem', ['orderItemSeqId', 'orderId', 'invoiceId', 'invoiceItemSeqId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        amount: map['amount'],
        quantity: map['quantity'],
        statusId: map['statusId'],
        orderId: map['orderId'],
        itemIssuanceId: map['itemIssuanceId'],
        invoiceId: map['invoiceId'],
        invoiceItemSeqId: map['invoiceItemSeqId'],
        shipmentReceiptId: map['shipmentReceiptId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemChange extractOrderItemChange(dynamic json) {
    return OrderItemChange(
        entityId: create_id_from('OrderItemChange', ['orderItemChangeId'], json),
        orderItemChangeId: json['orderItemChangeId'] as String,
        orderItemSeqId: json['orderItemSeqId'] as String,
        unitPrice: json['unitPrice'] as double,
        changeTypeEnumId: json['changeTypeEnumId'] as String,
        changeUserLogin: json['changeUserLogin'] as String,
        quantity: json['quantity'] as double,
        orderId: json['orderId'] as String,
        cancelQuantity: json['cancelQuantity'] as double,
        changeDatetime: check_dt(json['changeDatetime']),
        changeComments: json['changeComments'] as String,
        itemDescription: json['itemDescription'] as String,
        reasonEnumId: json['reasonEnumId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemChange overridesOrderItemChange(Map<String, dynamic> map) {
    return OrderItemChange(
        entityId: create_id_from('OrderItemChange', ['orderItemChangeId'], map),
        orderItemChangeId: map['orderItemChangeId'],
        orderItemSeqId: map['orderItemSeqId'],
        unitPrice: map['unitPrice'],
        changeTypeEnumId: map['changeTypeEnumId'],
        changeUserLogin: map['changeUserLogin'],
        quantity: map['quantity'],
        orderId: map['orderId'],
        cancelQuantity: map['cancelQuantity'],
        changeDatetime: map['changeDatetime'],
        changeComments: map['changeComments'],
        itemDescription: map['itemDescription'],
        reasonEnumId: map['reasonEnumId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemContactMech extractOrderItemContactMech(dynamic json) {
    return OrderItemContactMech(
        entityId: create_id_from('OrderItemContactMech', ['orderId', 'orderItemSeqId', 'contactMechPurposeTypeId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        contactMechPurposeTypeId: json['contactMechPurposeTypeId'] as String,
        orderId: json['orderId'] as String,
        contactMechId: json['contactMechId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemContactMech overridesOrderItemContactMech(Map<String, dynamic> map) {
    return OrderItemContactMech(
        entityId: create_id_from('OrderItemContactMech', ['orderId', 'orderItemSeqId', 'contactMechPurposeTypeId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        contactMechPurposeTypeId: map['contactMechPurposeTypeId'],
        orderId: map['orderId'],
        contactMechId: map['contactMechId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemGroup extractOrderItemGroup(dynamic json) {
    return OrderItemGroup(
        entityId: create_id_from('OrderItemGroup', ['orderId', 'orderItemGroupSeqId'], json),
        groupName: json['groupName'] as String,
        orderId: json['orderId'] as String,
        orderItemGroupSeqId: json['orderItemGroupSeqId'] as String,
        parentGroupSeqId: json['parentGroupSeqId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemGroup overridesOrderItemGroup(Map<String, dynamic> map) {
    return OrderItemGroup(
        entityId: create_id_from('OrderItemGroup', ['orderId', 'orderItemGroupSeqId'], map),
        groupName: map['groupName'],
        orderId: map['orderId'],
        orderItemGroupSeqId: map['orderItemGroupSeqId'],
        parentGroupSeqId: map['parentGroupSeqId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemGroupOrder extractOrderItemGroupOrder(dynamic json) {
    return OrderItemGroupOrder(
        entityId: create_id_from('OrderItemGroupOrder', ['orderId', 'orderItemSeqId', 'groupOrderId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        groupOrderId: json['groupOrderId'] as String,
        orderId: json['orderId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemGroupOrder overridesOrderItemGroupOrder(Map<String, dynamic> map) {
    return OrderItemGroupOrder(
        entityId: create_id_from('OrderItemGroupOrder', ['orderId', 'orderItemSeqId', 'groupOrderId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        groupOrderId: map['groupOrderId'],
        orderId: map['orderId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemPriceInfo extractOrderItemPriceInfo(dynamic json) {
    return OrderItemPriceInfo(
        entityId: create_id_from('OrderItemPriceInfo', ['orderItemPriceInfoId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        orderId: json['orderId'] as String,
        productPriceActionSeqId: json['productPriceActionSeqId'] as String,
        modifyAmount: json['modifyAmount'] as double,
        description: json['description'] as String,
        productPriceRuleId: json['productPriceRuleId'] as String,
        rateCode: json['rateCode'] as String,
        orderItemPriceInfoId: json['orderItemPriceInfoId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemPriceInfo overridesOrderItemPriceInfo(Map<String, dynamic> map) {
    return OrderItemPriceInfo(
        entityId: create_id_from('OrderItemPriceInfo', ['orderItemPriceInfoId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        orderId: map['orderId'],
        productPriceActionSeqId: map['productPriceActionSeqId'],
        modifyAmount: map['modifyAmount'],
        description: map['description'],
        productPriceRuleId: map['productPriceRuleId'],
        rateCode: map['rateCode'],
        orderItemPriceInfoId: map['orderItemPriceInfoId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemQuantityReportGroupByItem extractOrderItemQuantityReportGroupByItem(dynamic json) {
    return OrderItemQuantityReportGroupByItem(
        entityId: create_id_from('OrderItemQuantityReportGroupByItem', ['orderId', 'orderItemSeqId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        productId: json['productId'] as String,
        orderId: json['orderId'] as String,
        orderTypeId: json['orderTypeId'] as String,
        quantityOrdered: json['quantityOrdered'] as double,
        orderItemStatusId: json['orderItemStatusId'] as String,
        shipAfterDate: check_dt(json['shipAfterDate']),
        shipBeforeDate: check_dt(json['shipBeforeDate']),
        orderStatusId: json['orderStatusId'] as String,
        quantityOpen: json['quantityOpen'] as double,
        productStoreId: json['productStoreId'] as String,
        itemDescription: json['itemDescription'] as String,
        orderDate: check_dt(json['orderDate']),
        quantityIssued: json['quantityIssued'] as double,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemQuantityReportGroupByItem overridesOrderItemQuantityReportGroupByItem(Map<String, dynamic> map) {
    return OrderItemQuantityReportGroupByItem(
        entityId: create_id_from('OrderItemQuantityReportGroupByItem', ['orderId', 'orderItemSeqId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        productId: map['productId'],
        orderId: map['orderId'],
        orderTypeId: map['orderTypeId'],
        quantityOrdered: map['quantityOrdered'],
        orderItemStatusId: map['orderItemStatusId'],
        shipAfterDate: map['shipAfterDate'],
        shipBeforeDate: map['shipBeforeDate'],
        orderStatusId: map['orderStatusId'],
        quantityOpen: map['quantityOpen'],
        productStoreId: map['productStoreId'],
        itemDescription: map['itemDescription'],
        orderDate: map['orderDate'],
        quantityIssued: map['quantityIssued'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemQuantityReportGroupByProduct extractOrderItemQuantityReportGroupByProduct(dynamic json) {
    return OrderItemQuantityReportGroupByProduct(
        entityId: create_id_from('OrderItemQuantityReportGroupByProduct', [], json),
        orderStatusId: json['orderStatusId'] as String,
        productId: json['productId'] as String,
        quantityOpen: json['quantityOpen'] as double,
        orderTypeId: json['orderTypeId'] as String,
        quantityOrdered: json['quantityOrdered'] as double,
        orderItemStatusId: json['orderItemStatusId'] as String,
        orderDate: check_dt(json['orderDate']),
        quantityIssued: json['quantityIssued'] as double,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemQuantityReportGroupByProduct overridesOrderItemQuantityReportGroupByProduct(Map<String, dynamic> map) {
    return OrderItemQuantityReportGroupByProduct(
        entityId: create_id_from('OrderItemQuantityReportGroupByProduct', [], map),
        orderStatusId: map['orderStatusId'],
        productId: map['productId'],
        quantityOpen: map['quantityOpen'],
        orderTypeId: map['orderTypeId'],
        quantityOrdered: map['quantityOrdered'],
        orderItemStatusId: map['orderItemStatusId'],
        orderDate: map['orderDate'],
        quantityIssued: map['quantityIssued'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemRole extractOrderItemRole(dynamic json) {
    return OrderItemRole(
        entityId: create_id_from('OrderItemRole', ['orderId', 'orderItemSeqId', 'partyId', 'roleTypeId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        roleTypeId: json['roleTypeId'] as String,
        orderId: json['orderId'] as String,
        partyId: json['partyId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemRole overridesOrderItemRole(Map<String, dynamic> map) {
    return OrderItemRole(
        entityId: create_id_from('OrderItemRole', ['orderId', 'orderItemSeqId', 'partyId', 'roleTypeId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        roleTypeId: map['roleTypeId'],
        orderId: map['orderId'],
        partyId: map['partyId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemShipGroup extractOrderItemShipGroup(dynamic json) {
    return OrderItemShipGroup(
        entityId: create_id_from('OrderItemShipGroup', ['orderId', 'shipGroupSeqId'], json),
        facilityId: json['facilityId'] as String,
        giftMessage: json['giftMessage'] as String,
        orderId: json['orderId'] as String,
        shippingInstructions: json['shippingInstructions'] as String,
        maySplit: json['maySplit'] as String,
        shipByDate: check_dt(json['shipByDate']),
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        supplierAgreementId: json['supplierAgreementId'] as String,
        estimatedDeliveryDate: check_dt(json['estimatedDeliveryDate']),
        vendorPartyId: json['vendorPartyId'] as String,
        contactMechId: json['contactMechId'] as String,
        telecomContactMechId: json['telecomContactMechId'] as String,
        shipAfterDate: check_dt(json['shipAfterDate']),
        carrierPartyId: json['carrierPartyId'] as String,
        carrierRoleTypeId: json['carrierRoleTypeId'] as String,
        isGift: json['isGift'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        supplierPartyId: json['supplierPartyId'] as String,
        shipmentMethodTypeId: json['shipmentMethodTypeId'] as String,
        trackingNumber: json['trackingNumber'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemShipGroup overridesOrderItemShipGroup(Map<String, dynamic> map) {
    return OrderItemShipGroup(
        entityId: create_id_from('OrderItemShipGroup', ['orderId', 'shipGroupSeqId'], map),
        facilityId: map['facilityId'],
        giftMessage: map['giftMessage'],
        orderId: map['orderId'],
        shippingInstructions: map['shippingInstructions'],
        maySplit: map['maySplit'],
        shipByDate: map['shipByDate'],
        shipGroupSeqId: map['shipGroupSeqId'],
        supplierAgreementId: map['supplierAgreementId'],
        estimatedDeliveryDate: map['estimatedDeliveryDate'],
        vendorPartyId: map['vendorPartyId'],
        contactMechId: map['contactMechId'],
        telecomContactMechId: map['telecomContactMechId'],
        shipAfterDate: map['shipAfterDate'],
        carrierPartyId: map['carrierPartyId'],
        carrierRoleTypeId: map['carrierRoleTypeId'],
        isGift: map['isGift'],
        estimatedShipDate: map['estimatedShipDate'],
        supplierPartyId: map['supplierPartyId'],
        shipmentMethodTypeId: map['shipmentMethodTypeId'],
        trackingNumber: map['trackingNumber'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemShipGroupAssoc extractOrderItemShipGroupAssoc(dynamic json) {
    return OrderItemShipGroupAssoc(
        entityId: create_id_from('OrderItemShipGroupAssoc', ['orderId', 'orderItemSeqId', 'shipGroupSeqId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        quantity: json['quantity'] as double,
        orderId: json['orderId'] as String,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        cancelQuantity: json['cancelQuantity'] as double,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemShipGroupAssoc overridesOrderItemShipGroupAssoc(Map<String, dynamic> map) {
    return OrderItemShipGroupAssoc(
        entityId: create_id_from('OrderItemShipGroupAssoc', ['orderId', 'orderItemSeqId', 'shipGroupSeqId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        quantity: map['quantity'],
        orderId: map['orderId'],
        shipGroupSeqId: map['shipGroupSeqId'],
        cancelQuantity: map['cancelQuantity'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemShipGrpInvRes extractOrderItemShipGrpInvRes(dynamic json) {
    return OrderItemShipGrpInvRes(
        entityId: create_id_from('OrderItemShipGrpInvRes', ['orderId', 'shipGroupSeqId', 'orderItemSeqId', 'inventoryItemId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        quantity: json['quantity'] as double,
        orderId: json['orderId'] as String,
        promisedDatetime: check_dt(json['promisedDatetime']),
        priority: json['priority'] as String,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        sequenceId: json['sequenceId'] as int,
        oldPickStartDate: check_dt(json['oldPickStartDate']),
        currentPromisedDate: check_dt(json['currentPromisedDate']),
        inventoryItemId: json['inventoryItemId'] as String,
        quantityNotAvailable: json['quantityNotAvailable'] as double,
        createdDatetime: check_dt(json['createdDatetime']),
        reserveOrderEnumId: json['reserveOrderEnumId'] as String,
        reservedDatetime: check_dt(json['reservedDatetime']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemShipGrpInvRes overridesOrderItemShipGrpInvRes(Map<String, dynamic> map) {
    return OrderItemShipGrpInvRes(
        entityId: create_id_from('OrderItemShipGrpInvRes', ['orderId', 'shipGroupSeqId', 'orderItemSeqId', 'inventoryItemId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        quantity: map['quantity'],
        orderId: map['orderId'],
        promisedDatetime: map['promisedDatetime'],
        priority: map['priority'],
        shipGroupSeqId: map['shipGroupSeqId'],
        sequenceId: map['sequenceId'],
        oldPickStartDate: map['oldPickStartDate'],
        currentPromisedDate: map['currentPromisedDate'],
        inventoryItemId: map['inventoryItemId'],
        quantityNotAvailable: map['quantityNotAvailable'],
        createdDatetime: map['createdDatetime'],
        reserveOrderEnumId: map['reserveOrderEnumId'],
        reservedDatetime: map['reservedDatetime'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemShipGrpInvResAndItem extractOrderItemShipGrpInvResAndItem(dynamic json) {
    return OrderItemShipGrpInvResAndItem(
        entityId: create_id_from('OrderItemShipGrpInvResAndItem', ['orderItemSeqId', 'orderId', 'shipGroupSeqId', 'inventoryItemId'], json),
        orderId: json['orderId'] as String,
        softIdentifier: json['softIdentifier'] as String,
        promisedDatetime: check_dt(json['promisedDatetime']),
        binNumber: json['binNumber'] as String,
        sequenceId: json['sequenceId'] as int,
        oldPickStartDate: check_dt(json['oldPickStartDate']),
        oldAvailableToPromise: json['oldAvailableToPromise'] as double,
        quantityOnHandTotal: json['quantityOnHandTotal'] as double,
        datetimeManufactured: check_dt(json['datetimeManufactured']),
        expireDate: check_dt(json['expireDate']),
        reservedDatetime: check_dt(json['reservedDatetime']),
        oldQuantityOnHand: json['oldQuantityOnHand'] as double,
        partyId: json['partyId'] as String,
        containerId: json['containerId'] as String,
        availableToPromiseTotal: json['availableToPromiseTotal'] as double,
        inventoryItemTypeId: json['inventoryItemTypeId'] as String,
        locationSeqId: json['locationSeqId'] as String,
        orderItemSeqId: json['orderItemSeqId'] as String,
        quantity: json['quantity'] as double,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        serialNumber: json['serialNumber'] as String,
        productId: json['productId'] as String,
        lotId: json['lotId'] as String,
        uomId: json['uomId'] as String,
        accountingQuantityTotal: json['accountingQuantityTotal'] as double,
        priority: json['priority'] as String,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        currentPromisedDate: check_dt(json['currentPromisedDate']),
        inventoryItemId: json['inventoryItemId'] as String,
        ownerPartyId: json['ownerPartyId'] as String,
        activationValidThru: check_dt(json['activationValidThru']),
        activationNumber: json['activationNumber'] as String,
        currencyUomId: json['currencyUomId'] as String,
        statusId: json['statusId'] as String,
        unitCost: json['unitCost'] as double,
        fixedAssetId: json['fixedAssetId'] as String,
        quantityNotAvailable: json['quantityNotAvailable'] as double,
        createdDatetime: check_dt(json['createdDatetime']),
        datetimeReceived: check_dt(json['datetimeReceived']),
        reserveOrderEnumId: json['reserveOrderEnumId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemShipGrpInvResAndItem overridesOrderItemShipGrpInvResAndItem(Map<String, dynamic> map) {
    return OrderItemShipGrpInvResAndItem(
        entityId: create_id_from('OrderItemShipGrpInvResAndItem', ['orderItemSeqId', 'orderId', 'shipGroupSeqId', 'inventoryItemId'], map),
        orderId: map['orderId'],
        softIdentifier: map['softIdentifier'],
        promisedDatetime: map['promisedDatetime'],
        binNumber: map['binNumber'],
        sequenceId: map['sequenceId'],
        oldPickStartDate: map['oldPickStartDate'],
        oldAvailableToPromise: map['oldAvailableToPromise'],
        quantityOnHandTotal: map['quantityOnHandTotal'],
        datetimeManufactured: map['datetimeManufactured'],
        expireDate: map['expireDate'],
        reservedDatetime: map['reservedDatetime'],
        oldQuantityOnHand: map['oldQuantityOnHand'],
        partyId: map['partyId'],
        containerId: map['containerId'],
        availableToPromiseTotal: map['availableToPromiseTotal'],
        inventoryItemTypeId: map['inventoryItemTypeId'],
        locationSeqId: map['locationSeqId'],
        orderItemSeqId: map['orderItemSeqId'],
        quantity: map['quantity'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        serialNumber: map['serialNumber'],
        productId: map['productId'],
        lotId: map['lotId'],
        uomId: map['uomId'],
        accountingQuantityTotal: map['accountingQuantityTotal'],
        priority: map['priority'],
        shipGroupSeqId: map['shipGroupSeqId'],
        currentPromisedDate: map['currentPromisedDate'],
        inventoryItemId: map['inventoryItemId'],
        ownerPartyId: map['ownerPartyId'],
        activationValidThru: map['activationValidThru'],
        activationNumber: map['activationNumber'],
        currencyUomId: map['currencyUomId'],
        statusId: map['statusId'],
        unitCost: map['unitCost'],
        fixedAssetId: map['fixedAssetId'],
        quantityNotAvailable: map['quantityNotAvailable'],
        createdDatetime: map['createdDatetime'],
        datetimeReceived: map['datetimeReceived'],
        reserveOrderEnumId: map['reserveOrderEnumId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemShipGrpInvResAndItemLocation extractOrderItemShipGrpInvResAndItemLocation(dynamic json) {
    return OrderItemShipGrpInvResAndItemLocation(
        entityId: create_id_from('OrderItemShipGrpInvResAndItemLocation', ['orderItemSeqId', 'orderId', 'shipGroupSeqId', 'inventoryItemId'], json),
        orderId: json['orderId'] as String,
        binNumber: json['binNumber'] as String,
        sequenceId: json['sequenceId'] as int,
        oldAvailableToPromise: json['oldAvailableToPromise'] as double,
        levelId: json['levelId'] as String,
        reservedDatetime: check_dt(json['reservedDatetime']),
        partyId: json['partyId'] as String,
        containerId: json['containerId'] as String,
        locationSeqId: json['locationSeqId'] as String,
        orderItemSeqId: json['orderItemSeqId'] as String,
        serialNumber: json['serialNumber'] as String,
        productId: json['productId'] as String,
        uomId: json['uomId'] as String,
        priority: json['priority'] as String,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        inventoryItemId: json['inventoryItemId'] as String,
        statusId: json['statusId'] as String,
        fixedAssetId: json['fixedAssetId'] as String,
        quantityNotAvailable: json['quantityNotAvailable'] as double,
        createdDatetime: check_dt(json['createdDatetime']),
        reserveOrderEnumId: json['reserveOrderEnumId'] as String,
        geoPointId: json['geoPointId'] as String,
        softIdentifier: json['softIdentifier'] as String,
        promisedDatetime: check_dt(json['promisedDatetime']),
        orderItemStatusId: json['orderItemStatusId'] as String,
        oldPickStartDate: check_dt(json['oldPickStartDate']),
        aisleId: json['aisleId'] as String,
        quantityOnHandTotal: json['quantityOnHandTotal'] as double,
        datetimeManufactured: check_dt(json['datetimeManufactured']),
        expireDate: check_dt(json['expireDate']),
        oldQuantityOnHand: json['oldQuantityOnHand'] as double,
        availableToPromiseTotal: json['availableToPromiseTotal'] as double,
        inventoryItemTypeId: json['inventoryItemTypeId'] as String,
        quantity: json['quantity'] as double,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        lotId: json['lotId'] as String,
        accountingQuantityTotal: json['accountingQuantityTotal'] as double,
        sectionId: json['sectionId'] as String,
        currentPromisedDate: check_dt(json['currentPromisedDate']),
        ownerPartyId: json['ownerPartyId'] as String,
        activationValidThru: check_dt(json['activationValidThru']),
        activationNumber: json['activationNumber'] as String,
        currencyUomId: json['currencyUomId'] as String,
        areaId: json['areaId'] as String,
        positionId: json['positionId'] as String,
        unitCost: json['unitCost'] as double,
        datetimeReceived: check_dt(json['datetimeReceived']),
        locationTypeEnumId: json['locationTypeEnumId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemShipGrpInvResAndItemLocation overridesOrderItemShipGrpInvResAndItemLocation(Map<String, dynamic> map) {
    return OrderItemShipGrpInvResAndItemLocation(
        entityId: create_id_from('OrderItemShipGrpInvResAndItemLocation', ['orderItemSeqId', 'orderId', 'shipGroupSeqId', 'inventoryItemId'], map),
        orderId: map['orderId'],
        binNumber: map['binNumber'],
        sequenceId: map['sequenceId'],
        oldAvailableToPromise: map['oldAvailableToPromise'],
        levelId: map['levelId'],
        reservedDatetime: map['reservedDatetime'],
        partyId: map['partyId'],
        containerId: map['containerId'],
        locationSeqId: map['locationSeqId'],
        orderItemSeqId: map['orderItemSeqId'],
        serialNumber: map['serialNumber'],
        productId: map['productId'],
        uomId: map['uomId'],
        priority: map['priority'],
        shipGroupSeqId: map['shipGroupSeqId'],
        inventoryItemId: map['inventoryItemId'],
        statusId: map['statusId'],
        fixedAssetId: map['fixedAssetId'],
        quantityNotAvailable: map['quantityNotAvailable'],
        createdDatetime: map['createdDatetime'],
        reserveOrderEnumId: map['reserveOrderEnumId'],
        geoPointId: map['geoPointId'],
        softIdentifier: map['softIdentifier'],
        promisedDatetime: map['promisedDatetime'],
        orderItemStatusId: map['orderItemStatusId'],
        oldPickStartDate: map['oldPickStartDate'],
        aisleId: map['aisleId'],
        quantityOnHandTotal: map['quantityOnHandTotal'],
        datetimeManufactured: map['datetimeManufactured'],
        expireDate: map['expireDate'],
        oldQuantityOnHand: map['oldQuantityOnHand'],
        availableToPromiseTotal: map['availableToPromiseTotal'],
        inventoryItemTypeId: map['inventoryItemTypeId'],
        quantity: map['quantity'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        lotId: map['lotId'],
        accountingQuantityTotal: map['accountingQuantityTotal'],
        sectionId: map['sectionId'],
        currentPromisedDate: map['currentPromisedDate'],
        ownerPartyId: map['ownerPartyId'],
        activationValidThru: map['activationValidThru'],
        activationNumber: map['activationNumber'],
        currencyUomId: map['currencyUomId'],
        areaId: map['areaId'],
        positionId: map['positionId'],
        unitCost: map['unitCost'],
        datetimeReceived: map['datetimeReceived'],
        locationTypeEnumId: map['locationTypeEnumId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemType extractOrderItemType(dynamic json) {
    return OrderItemType(
        entityId: create_id_from('OrderItemType', ['orderItemTypeId'], json),
        parentTypeId: json['parentTypeId'] as String,
        hasTable: json['hasTable'] as String,
        description: json['description'] as String,
        orderItemTypeId: json['orderItemTypeId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemType overridesOrderItemType(Map<String, dynamic> map) {
    return OrderItemType(
        entityId: create_id_from('OrderItemType', ['orderItemTypeId'], map),
        parentTypeId: map['parentTypeId'],
        hasTable: map['hasTable'],
        description: map['description'],
        orderItemTypeId: map['orderItemTypeId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderItemTypeAttr extractOrderItemTypeAttr(dynamic json) {
    return OrderItemTypeAttr(
        entityId: create_id_from('OrderItemTypeAttr', ['orderItemTypeId', 'attrName'], json),
        description: json['description'] as String,
        attrName: json['attrName'] as String,
        orderItemTypeId: json['orderItemTypeId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderItemTypeAttr overridesOrderItemTypeAttr(Map<String, dynamic> map) {
    return OrderItemTypeAttr(
        entityId: create_id_from('OrderItemTypeAttr', ['orderItemTypeId', 'attrName'], map),
        description: map['description'],
        attrName: map['attrName'],
        orderItemTypeId: map['orderItemTypeId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderNotification extractOrderNotification(dynamic json) {
    return OrderNotification(
        entityId: create_id_from('OrderNotification', ['orderNotificationId'], json),
        orderNotificationId: json['orderNotificationId'] as String,
        comments: json['comments'] as String,
        orderId: json['orderId'] as String,
        emailType: json['emailType'] as String,
        notificationDate: check_dt(json['notificationDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderNotification overridesOrderNotification(Map<String, dynamic> map) {
    return OrderNotification(
        entityId: create_id_from('OrderNotification', ['orderNotificationId'], map),
        orderNotificationId: map['orderNotificationId'],
        comments: map['comments'],
        orderId: map['orderId'],
        emailType: map['emailType'],
        notificationDate: map['notificationDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderPaymentPrefAndPayment extractOrderPaymentPrefAndPayment(dynamic json) {
    return OrderPaymentPrefAndPayment(
        entityId: create_id_from('OrderPaymentPrefAndPayment', ['orderPaymentPreferenceId', 'paymentId'], json),
        amount: json['amount'] as double,
        orderPaymentPreferenceId: json['orderPaymentPreferenceId'] as String,
        paymentTypeId: json['paymentTypeId'] as String,
        statusId: json['statusId'] as String,
        orderId: json['orderId'] as String,
        paymentId: json['paymentId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderPaymentPrefAndPayment overridesOrderPaymentPrefAndPayment(Map<String, dynamic> map) {
    return OrderPaymentPrefAndPayment(
        entityId: create_id_from('OrderPaymentPrefAndPayment', ['orderPaymentPreferenceId', 'paymentId'], map),
        amount: map['amount'],
        orderPaymentPreferenceId: map['orderPaymentPreferenceId'],
        paymentTypeId: map['paymentTypeId'],
        statusId: map['statusId'],
        orderId: map['orderId'],
        paymentId: map['paymentId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderPaymentPreference extractOrderPaymentPreference(dynamic json) {
    return OrderPaymentPreference(
        entityId: create_id_from('OrderPaymentPreference', ['orderPaymentPreferenceId'], json),
        orderId: json['orderId'] as String,
        manualAuthCode: json['manualAuthCode'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        orderPaymentPreferenceId: json['orderPaymentPreferenceId'] as String,
        paymentMethodId: json['paymentMethodId'] as String,
        overflowFlag: json['overflowFlag'] as String,
        productPricePurposeId: json['productPricePurposeId'] as String,
        maxAmount: json['maxAmount'] as double,
        createdByUserLogin: json['createdByUserLogin'] as String,
        orderItemSeqId: json['orderItemSeqId'] as String,
        track2: json['track2'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        manualRefNum: json['manualRefNum'] as String,
        swipedFlag: json['swipedFlag'] as String,
        securityCode: json['securityCode'] as String,
        paymentMethodTypeId: json['paymentMethodTypeId'] as String,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        processAttempt: json['processAttempt'] as int,
        needsNsfRetry: json['needsNsfRetry'] as String,
        finAccountId: json['finAccountId'] as String,
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        billingPostalCode: json['billingPostalCode'] as String,
        presentFlag: json['presentFlag'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderPaymentPreference overridesOrderPaymentPreference(Map<String, dynamic> map) {
    return OrderPaymentPreference(
        entityId: create_id_from('OrderPaymentPreference', ['orderPaymentPreferenceId'], map),
        orderId: map['orderId'],
        manualAuthCode: map['manualAuthCode'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        orderPaymentPreferenceId: map['orderPaymentPreferenceId'],
        paymentMethodId: map['paymentMethodId'],
        overflowFlag: map['overflowFlag'],
        productPricePurposeId: map['productPricePurposeId'],
        maxAmount: map['maxAmount'],
        createdByUserLogin: map['createdByUserLogin'],
        orderItemSeqId: map['orderItemSeqId'],
        track2: map['track2'],
        lastModifiedDate: map['lastModifiedDate'],
        manualRefNum: map['manualRefNum'],
        swipedFlag: map['swipedFlag'],
        securityCode: map['securityCode'],
        paymentMethodTypeId: map['paymentMethodTypeId'],
        shipGroupSeqId: map['shipGroupSeqId'],
        processAttempt: map['processAttempt'],
        needsNsfRetry: map['needsNsfRetry'],
        finAccountId: map['finAccountId'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        billingPostalCode: map['billingPostalCode'],
        presentFlag: map['presentFlag'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderProductPromoCode extractOrderProductPromoCode(dynamic json) {
    return OrderProductPromoCode(
        entityId: create_id_from('OrderProductPromoCode', ['orderId', 'productPromoCodeId'], json),
        orderId: json['orderId'] as String,
        productPromoCodeId: json['productPromoCodeId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderProductPromoCode overridesOrderProductPromoCode(Map<String, dynamic> map) {
    return OrderProductPromoCode(
        entityId: create_id_from('OrderProductPromoCode', ['orderId', 'productPromoCodeId'], map),
        orderId: map['orderId'],
        productPromoCodeId: map['productPromoCodeId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderPurchasePaymentSummary extractOrderPurchasePaymentSummary(dynamic json) {
    return OrderPurchasePaymentSummary(
        entityId: create_id_from('OrderPurchasePaymentSummary', ['orderId'], json),
        orderId: json['orderId'] as String,
        description: json['description'] as String,
        orderTypeId: json['orderTypeId'] as String,
        billingAccountId: json['billingAccountId'] as String,
        terminalId: json['terminalId'] as String,
        paymentMethodTypeId: json['paymentMethodTypeId'] as String,
        originFacilityId: json['originFacilityId'] as String,
        statusId: json['statusId'] as String,
        preferenceStatusId: json['preferenceStatusId'] as String,
        productStoreId: json['productStoreId'] as String,
        maxAmount: json['maxAmount'] as double,
        orderDate: check_dt(json['orderDate']),
        webSiteId: json['webSiteId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderPurchasePaymentSummary overridesOrderPurchasePaymentSummary(Map<String, dynamic> map) {
    return OrderPurchasePaymentSummary(
        entityId: create_id_from('OrderPurchasePaymentSummary', ['orderId'], map),
        orderId: map['orderId'],
        description: map['description'],
        orderTypeId: map['orderTypeId'],
        billingAccountId: map['billingAccountId'],
        terminalId: map['terminalId'],
        paymentMethodTypeId: map['paymentMethodTypeId'],
        originFacilityId: map['originFacilityId'],
        statusId: map['statusId'],
        preferenceStatusId: map['preferenceStatusId'],
        productStoreId: map['productStoreId'],
        maxAmount: map['maxAmount'],
        orderDate: map['orderDate'],
        webSiteId: map['webSiteId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderPurchaseProductSummary extractOrderPurchaseProductSummary(dynamic json) {
    return OrderPurchaseProductSummary(
        entityId: create_id_from('OrderPurchaseProductSummary', ['productId', 'orderId'], json),
        unitPrice: json['unitPrice'] as double,
        quantity: json['quantity'] as double,
        productId: json['productId'] as String,
        orderId: json['orderId'] as String,
        orderTypeId: json['orderTypeId'] as String,
        terminalId: json['terminalId'] as String,
        cancelQuantity: json['cancelQuantity'] as double,
        itemStatusId: json['itemStatusId'] as String,
        originFacilityId: json['originFacilityId'] as String,
        internalName: json['internalName'] as String,
        statusId: json['statusId'] as String,
        unitListPrice: json['unitListPrice'] as double,
        productStoreId: json['productStoreId'] as String,
        orderDate: check_dt(json['orderDate']),
        webSiteId: json['webSiteId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderPurchaseProductSummary overridesOrderPurchaseProductSummary(Map<String, dynamic> map) {
    return OrderPurchaseProductSummary(
        entityId: create_id_from('OrderPurchaseProductSummary', ['productId', 'orderId'], map),
        unitPrice: map['unitPrice'],
        quantity: map['quantity'],
        productId: map['productId'],
        orderId: map['orderId'],
        orderTypeId: map['orderTypeId'],
        terminalId: map['terminalId'],
        cancelQuantity: map['cancelQuantity'],
        itemStatusId: map['itemStatusId'],
        originFacilityId: map['originFacilityId'],
        internalName: map['internalName'],
        statusId: map['statusId'],
        unitListPrice: map['unitListPrice'],
        productStoreId: map['productStoreId'],
        orderDate: map['orderDate'],
        webSiteId: map['webSiteId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderReportGroupByProduct extractOrderReportGroupByProduct(dynamic json) {
    return OrderReportGroupByProduct(
        entityId: create_id_from('OrderReportGroupByProduct', [], json),
        unitPrice: json['unitPrice'] as double,
        orderStatusId: json['orderStatusId'] as String,
        quantity: json['quantity'] as double,
        productId: json['productId'] as String,
        orderTypeId: json['orderTypeId'] as String,
        orderItemStatusId: json['orderItemStatusId'] as String,
        orderDate: check_dt(json['orderDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderReportGroupByProduct overridesOrderReportGroupByProduct(Map<String, dynamic> map) {
    return OrderReportGroupByProduct(
        entityId: create_id_from('OrderReportGroupByProduct', [], map),
        unitPrice: map['unitPrice'],
        orderStatusId: map['orderStatusId'],
        quantity: map['quantity'],
        productId: map['productId'],
        orderTypeId: map['orderTypeId'],
        orderItemStatusId: map['orderItemStatusId'],
        orderDate: map['orderDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderReportPurchasesGroupByProduct extractOrderReportPurchasesGroupByProduct(dynamic json) {
    return OrderReportPurchasesGroupByProduct(
        entityId: create_id_from('OrderReportPurchasesGroupByProduct', ['toPartyId', 'toRoleTypeId', 'fromPartyId', 'fromRoleTypeId'], json),
        unitPrice: json['unitPrice'] as double,
        internalName: json['internalName'] as String,
        fromPartyId: json['fromPartyId'] as String,
        orderStatusId: json['orderStatusId'] as String,
        quantity: json['quantity'] as double,
        productId: json['productId'] as String,
        toRoleTypeId: json['toRoleTypeId'] as String,
        orderTypeId: json['orderTypeId'] as String,
        orderItemStatusId: json['orderItemStatusId'] as String,
        toPartyId: json['toPartyId'] as String,
        fromRoleTypeId: json['fromRoleTypeId'] as String,
        orderDate: check_dt(json['orderDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderReportPurchasesGroupByProduct overridesOrderReportPurchasesGroupByProduct(Map<String, dynamic> map) {
    return OrderReportPurchasesGroupByProduct(
        entityId: create_id_from('OrderReportPurchasesGroupByProduct', ['toPartyId', 'toRoleTypeId', 'fromPartyId', 'fromRoleTypeId'], map),
        unitPrice: map['unitPrice'],
        internalName: map['internalName'],
        fromPartyId: map['fromPartyId'],
        orderStatusId: map['orderStatusId'],
        quantity: map['quantity'],
        productId: map['productId'],
        toRoleTypeId: map['toRoleTypeId'],
        orderTypeId: map['orderTypeId'],
        orderItemStatusId: map['orderItemStatusId'],
        toPartyId: map['toPartyId'],
        fromRoleTypeId: map['fromRoleTypeId'],
        orderDate: map['orderDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderReportSalesGroupByProduct extractOrderReportSalesGroupByProduct(dynamic json) {
    return OrderReportSalesGroupByProduct(
        entityId: create_id_from('OrderReportSalesGroupByProduct', ['partyId', 'roleTypeId'], json),
        internalName: json['internalName'] as String,
        roleTypeId: json['roleTypeId'] as String,
        amount: json['amount'] as double,
        orderStatusId: json['orderStatusId'] as String,
        productId: json['productId'] as String,
        orderTypeId: json['orderTypeId'] as String,
        storeName: json['storeName'] as String,
        quantityOrdered: json['quantityOrdered'] as double,
        productStoreId: json['productStoreId'] as String,
        orderItemStatusId: json['orderItemStatusId'] as String,
        partyId: json['partyId'] as String,
        orderDate: check_dt(json['orderDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderReportSalesGroupByProduct overridesOrderReportSalesGroupByProduct(Map<String, dynamic> map) {
    return OrderReportSalesGroupByProduct(
        entityId: create_id_from('OrderReportSalesGroupByProduct', ['partyId', 'roleTypeId'], map),
        internalName: map['internalName'],
        roleTypeId: map['roleTypeId'],
        amount: map['amount'],
        orderStatusId: map['orderStatusId'],
        productId: map['productId'],
        orderTypeId: map['orderTypeId'],
        storeName: map['storeName'],
        quantityOrdered: map['quantityOrdered'],
        productStoreId: map['productStoreId'],
        orderItemStatusId: map['orderItemStatusId'],
        partyId: map['partyId'],
        orderDate: map['orderDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderReportView extractOrderReportView(dynamic json) {
    return OrderReportView(
        entityId: create_id_from('OrderReportView', ['orderId'], json),
        unitPrice: json['unitPrice'] as double,
        quantity: json['quantity'] as double,
        productId: json['productId'] as String,
        orderId: json['orderId'] as String,
        grandTotal: json['grandTotal'] as double,
        orderTypeId: json['orderTypeId'] as String,
        orderStatus: json['orderStatus'] as String,
        originFacilityId: json['originFacilityId'] as String,
        groupName: json['groupName'] as String,
        visitId: json['visitId'] as String,
        currencyUom: json['currencyUom'] as String,
        itemStatus: json['itemStatus'] as String,
        paymentMethod: json['paymentMethod'] as String,
        itemDescription: json['itemDescription'] as String,
        orderDate: check_dt(json['orderDate']),
        webSiteId: json['webSiteId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderReportView overridesOrderReportView(Map<String, dynamic> map) {
    return OrderReportView(
        entityId: create_id_from('OrderReportView', ['orderId'], map),
        unitPrice: map['unitPrice'],
        quantity: map['quantity'],
        productId: map['productId'],
        orderId: map['orderId'],
        grandTotal: map['grandTotal'],
        orderTypeId: map['orderTypeId'],
        orderStatus: map['orderStatus'],
        originFacilityId: map['originFacilityId'],
        groupName: map['groupName'],
        visitId: map['visitId'],
        currencyUom: map['currencyUom'],
        itemStatus: map['itemStatus'],
        paymentMethod: map['paymentMethod'],
        itemDescription: map['itemDescription'],
        orderDate: map['orderDate'],
        webSiteId: map['webSiteId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderRole extractOrderRole(dynamic json) {
    return OrderRole(
        entityId: create_id_from('OrderRole', ['orderId', 'partyId', 'roleTypeId'], json),
        roleTypeId: json['roleTypeId'] as String,
        orderId: json['orderId'] as String,
        partyId: json['partyId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderRole overridesOrderRole(Map<String, dynamic> map) {
    return OrderRole(
        entityId: create_id_from('OrderRole', ['orderId', 'partyId', 'roleTypeId'], map),
        roleTypeId: map['roleTypeId'],
        orderId: map['orderId'],
        partyId: map['partyId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderRoleAndProductContentInfo extractOrderRoleAndProductContentInfo(dynamic json) {
    return OrderRoleAndProductContentInfo(
        entityId: create_id_from('OrderRoleAndProductContentInfo', ['roleTypeId', 'orderId', 'partyId', 'orderItemSeqId', 'contentId', 'productContentTypeId', 'fromDate'], json),
        useTimeUomId: json['useTimeUomId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        orderId: json['orderId'] as String,
        ownerContentId: json['ownerContentId'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        productName: json['productName'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        deploymentId: json['deploymentId'] as String,
        dataResourceId: json['dataResourceId'] as String,
        cancelBackOrderDate: check_dt(json['cancelBackOrderDate']),
        itemDescription: json['itemDescription'] as String,
        partyId: json['partyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        selectedAmount: json['selectedAmount'] as double,
        orderItemSeqId: json['orderItemSeqId'] as String,
        unitPrice: json['unitPrice'] as double,
        productId: json['productId'] as String,
        unitRecurringPrice: json['unitRecurringPrice'] as double,
        instanceOfContentId: json['instanceOfContentId'] as String,
        isItemGroupPrimary: json['isItemGroupPrimary'] as String,
        autoCancelDate: check_dt(json['autoCancelDate']),
        productFeatureId: json['productFeatureId'] as String,
        overrideGlAccountId: json['overrideGlAccountId'] as String,
        budgetId: json['budgetId'] as String,
        useCountLimit: json['useCountLimit'] as int,
        supplierProductId: json['supplierProductId'] as String,
        estimatedDeliveryDate: check_dt(json['estimatedDeliveryDate']),
        quoteId: json['quoteId'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        statusId: json['statusId'] as String,
        syncStatusId: json['syncStatusId'] as String,
        estimatedShipDate: check_dt(json['estimatedShipDate']),
        shoppingListItemSeqId: json['shoppingListItemSeqId'] as String,
        subscriptionId: json['subscriptionId'] as String,
        salesOpportunityId: json['salesOpportunityId'] as String,
        childBranchCount: json['childBranchCount'] as int,
        dontCancelSetUserLogin: json['dontCancelSetUserLogin'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        contentStatusId: json['contentStatusId'] as String,
        description: json['description'] as String,
        childLeafCount: json['childLeafCount'] as int,
        isPromo: json['isPromo'] as String,
        isModifiedPrice: json['isModifiedPrice'] as String,
        shipBeforeDate: check_dt(json['shipBeforeDate']),
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        productCategoryId: json['productCategoryId'] as String,
        shoppingListId: json['shoppingListId'] as String,
        unitListPrice: json['unitListPrice'] as double,
        unitAverageCost: json['unitAverageCost'] as double,
        useRoleTypeId: json['useRoleTypeId'] as String,
        useTime: json['useTime'] as int,
        orderItemTypeId: json['orderItemTypeId'] as String,
        roleTypeId: json['roleTypeId'] as String,
        dontCancelSetDate: check_dt(json['dontCancelSetDate']),
        purchaseFromDate: check_dt(json['purchaseFromDate']),
        quantity: json['quantity'] as double,
        comments: json['comments'] as String,
        recurringFreqUomId: json['recurringFreqUomId'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        orderItemGroupSeqId: json['orderItemGroupSeqId'] as String,
        quoteItemSeqId: json['quoteItemSeqId'] as String,
        externalId: json['externalId'] as String,
        fromInventoryItemId: json['fromInventoryItemId'] as String,
        budgetItemSeqId: json['budgetItemSeqId'] as String,
        serviceName: json['serviceName'] as String,
        correspondingPoId: json['correspondingPoId'] as String,
        productContentTypeId: json['productContentTypeId'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        cancelQuantity: json['cancelQuantity'] as double,
        shipAfterDate: check_dt(json['shipAfterDate']),
        contentName: json['contentName'] as String,
        createdDate: check_dt(json['createdDate']),
        localeString: json['localeString'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        purchaseThruDate: check_dt(json['purchaseThruDate']),
        changeByUserLoginId: json['changeByUserLoginId'] as String,
        prodCatalogId: json['prodCatalogId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderRoleAndProductContentInfo overridesOrderRoleAndProductContentInfo(Map<String, dynamic> map) {
    return OrderRoleAndProductContentInfo(
        entityId: create_id_from('OrderRoleAndProductContentInfo', ['roleTypeId', 'orderId', 'partyId', 'orderItemSeqId', 'contentId', 'productContentTypeId', 'fromDate'], map),
        useTimeUomId: map['useTimeUomId'],
        sequenceNum: map['sequenceNum'],
        orderId: map['orderId'],
        ownerContentId: map['ownerContentId'],
        mimeTypeId: map['mimeTypeId'],
        productName: map['productName'],
        privilegeEnumId: map['privilegeEnumId'],
        deploymentId: map['deploymentId'],
        dataResourceId: map['dataResourceId'],
        cancelBackOrderDate: map['cancelBackOrderDate'],
        itemDescription: map['itemDescription'],
        partyId: map['partyId'],
        createdByUserLogin: map['createdByUserLogin'],
        selectedAmount: map['selectedAmount'],
        orderItemSeqId: map['orderItemSeqId'],
        unitPrice: map['unitPrice'],
        productId: map['productId'],
        unitRecurringPrice: map['unitRecurringPrice'],
        instanceOfContentId: map['instanceOfContentId'],
        isItemGroupPrimary: map['isItemGroupPrimary'],
        autoCancelDate: map['autoCancelDate'],
        productFeatureId: map['productFeatureId'],
        overrideGlAccountId: map['overrideGlAccountId'],
        budgetId: map['budgetId'],
        useCountLimit: map['useCountLimit'],
        supplierProductId: map['supplierProductId'],
        estimatedDeliveryDate: map['estimatedDeliveryDate'],
        quoteId: map['quoteId'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        statusId: map['statusId'],
        syncStatusId: map['syncStatusId'],
        estimatedShipDate: map['estimatedShipDate'],
        shoppingListItemSeqId: map['shoppingListItemSeqId'],
        subscriptionId: map['subscriptionId'],
        salesOpportunityId: map['salesOpportunityId'],
        childBranchCount: map['childBranchCount'],
        dontCancelSetUserLogin: map['dontCancelSetUserLogin'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        contentStatusId: map['contentStatusId'],
        description: map['description'],
        childLeafCount: map['childLeafCount'],
        isPromo: map['isPromo'],
        isModifiedPrice: map['isModifiedPrice'],
        shipBeforeDate: map['shipBeforeDate'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        productCategoryId: map['productCategoryId'],
        shoppingListId: map['shoppingListId'],
        unitListPrice: map['unitListPrice'],
        unitAverageCost: map['unitAverageCost'],
        useRoleTypeId: map['useRoleTypeId'],
        useTime: map['useTime'],
        orderItemTypeId: map['orderItemTypeId'],
        roleTypeId: map['roleTypeId'],
        dontCancelSetDate: map['dontCancelSetDate'],
        purchaseFromDate: map['purchaseFromDate'],
        quantity: map['quantity'],
        comments: map['comments'],
        recurringFreqUomId: map['recurringFreqUomId'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        orderItemGroupSeqId: map['orderItemGroupSeqId'],
        quoteItemSeqId: map['quoteItemSeqId'],
        externalId: map['externalId'],
        fromInventoryItemId: map['fromInventoryItemId'],
        budgetItemSeqId: map['budgetItemSeqId'],
        serviceName: map['serviceName'],
        correspondingPoId: map['correspondingPoId'],
        productContentTypeId: map['productContentTypeId'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        cancelQuantity: map['cancelQuantity'],
        shipAfterDate: map['shipAfterDate'],
        contentName: map['contentName'],
        createdDate: map['createdDate'],
        localeString: map['localeString'],
        decoratorContentId: map['decoratorContentId'],
        purchaseThruDate: map['purchaseThruDate'],
        changeByUserLoginId: map['changeByUserLoginId'],
        prodCatalogId: map['prodCatalogId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderShipment extractOrderShipment(dynamic json) {
    return OrderShipment(
        entityId: create_id_from('OrderShipment', ['orderId', 'orderItemSeqId', 'shipGroupSeqId', 'shipmentId', 'shipmentItemSeqId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        quantity: json['quantity'] as double,
        orderId: json['orderId'] as String,
        shipmentId: json['shipmentId'] as String,
        shipmentItemSeqId: json['shipmentItemSeqId'] as String,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderShipment overridesOrderShipment(Map<String, dynamic> map) {
    return OrderShipment(
        entityId: create_id_from('OrderShipment', ['orderId', 'orderItemSeqId', 'shipGroupSeqId', 'shipmentId', 'shipmentItemSeqId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        quantity: map['quantity'],
        orderId: map['orderId'],
        shipmentId: map['shipmentId'],
        shipmentItemSeqId: map['shipmentItemSeqId'],
        shipGroupSeqId: map['shipGroupSeqId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderStatus extractOrderStatus(dynamic json) {
    return OrderStatus(
        entityId: create_id_from('OrderStatus', ['orderStatusId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        orderStatusId: json['orderStatusId'] as String,
        orderPaymentPreferenceId: json['orderPaymentPreferenceId'] as String,
        statusId: json['statusId'] as String,
        statusUserLogin: json['statusUserLogin'] as String,
        changeReason: json['changeReason'] as String,
        orderId: json['orderId'] as String,
        statusDatetime: check_dt(json['statusDatetime']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderStatus overridesOrderStatus(Map<String, dynamic> map) {
    return OrderStatus(
        entityId: create_id_from('OrderStatus', ['orderStatusId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        orderStatusId: map['orderStatusId'],
        orderPaymentPreferenceId: map['orderPaymentPreferenceId'],
        statusId: map['statusId'],
        statusUserLogin: map['statusUserLogin'],
        changeReason: map['changeReason'],
        orderId: map['orderId'],
        statusDatetime: map['statusDatetime'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderSummaryEntry extractOrderSummaryEntry(dynamic json) {
    return OrderSummaryEntry(
        entityId: create_id_from('OrderSummaryEntry', ['entryDate', 'productId', 'facilityId'], json),
        facilityId: json['facilityId'] as String,
        totalQuantity: json['totalQuantity'] as double,
        productCost: json['productCost'] as double,
        productId: json['productId'] as String,
        entryDate: check_dt(json['entryDate']),
        grossSales: json['grossSales'] as double,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderSummaryEntry overridesOrderSummaryEntry(Map<String, dynamic> map) {
    return OrderSummaryEntry(
        entityId: create_id_from('OrderSummaryEntry', ['entryDate', 'productId', 'facilityId'], map),
        facilityId: map['facilityId'],
        totalQuantity: map['totalQuantity'],
        productCost: map['productCost'],
        productId: map['productId'],
        entryDate: map['entryDate'],
        grossSales: map['grossSales'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderTaskList extractOrderTaskList(dynamic json) {
    return OrderTaskList(
        entityId: create_id_from('OrderTaskList', ['orderId', 'orderRoleTypeId', 'customerPartyId', 'workEffortId', 'wepaPartyId', 'roleTypeId', 'fromDate'], json),
        workEffortId: json['workEffortId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        orderId: json['orderId'] as String,
        orderRoleTypeId: json['orderRoleTypeId'] as String,
        orderTypeId: json['orderTypeId'] as String,
        description: json['description'] as String,
        workEffortName: json['workEffortName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        infoUrl: json['infoUrl'] as String,
        statusDateTime: check_dt(json['statusDateTime']),
        actualStartDate: check_dt(json['actualStartDate']),
        customerLastName: json['customerLastName'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        customerPartyId: json['customerPartyId'] as String,
        wepaPartyId: json['wepaPartyId'] as String,
        roleTypeId: json['roleTypeId'] as String,
        entryDate: check_dt(json['entryDate']),
        grandTotal: json['grandTotal'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        customerFirstName: json['customerFirstName'] as String,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        orderDate: check_dt(json['orderDate']),
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderTaskList overridesOrderTaskList(Map<String, dynamic> map) {
    return OrderTaskList(
        entityId: create_id_from('OrderTaskList', ['orderId', 'orderRoleTypeId', 'customerPartyId', 'workEffortId', 'wepaPartyId', 'roleTypeId', 'fromDate'], map),
        workEffortId: map['workEffortId'],
        workEffortTypeId: map['workEffortTypeId'],
        orderId: map['orderId'],
        orderRoleTypeId: map['orderRoleTypeId'],
        orderTypeId: map['orderTypeId'],
        description: map['description'],
        workEffortName: map['workEffortName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        infoUrl: map['infoUrl'],
        statusDateTime: map['statusDateTime'],
        actualStartDate: map['actualStartDate'],
        customerLastName: map['customerLastName'],
        createdByUserLogin: map['createdByUserLogin'],
        customerPartyId: map['customerPartyId'],
        wepaPartyId: map['wepaPartyId'],
        roleTypeId: map['roleTypeId'],
        entryDate: map['entryDate'],
        grandTotal: map['grandTotal'],
        lastModifiedDate: map['lastModifiedDate'],
        estimatedStartDate: map['estimatedStartDate'],
        lastStatusUpdate: map['lastStatusUpdate'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        customerFirstName: map['customerFirstName'],
        actualCompletionDate: map['actualCompletionDate'],
        orderDate: map['orderDate'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderTerm extractOrderTerm(dynamic json) {
    return OrderTerm(
        entityId: create_id_from('OrderTerm', ['termTypeId', 'orderId', 'orderItemSeqId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        textValue: json['textValue'] as String,
        orderId: json['orderId'] as String,
        termDays: json['termDays'] as int,
        termTypeId: json['termTypeId'] as String,
        description: json['description'] as String,
        uomId: json['uomId'] as String,
        termValue: json['termValue'] as double,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderTerm overridesOrderTerm(Map<String, dynamic> map) {
    return OrderTerm(
        entityId: create_id_from('OrderTerm', ['termTypeId', 'orderId', 'orderItemSeqId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        textValue: map['textValue'],
        orderId: map['orderId'],
        termDays: map['termDays'],
        termTypeId: map['termTypeId'],
        description: map['description'],
        uomId: map['uomId'],
        termValue: map['termValue'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderTermAttribute extractOrderTermAttribute(dynamic json) {
    return OrderTermAttribute(
        entityId: create_id_from('OrderTermAttribute', ['termTypeId', 'orderId', 'orderItemSeqId', 'attrName'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        orderId: json['orderId'] as String,
        attrDescription: json['attrDescription'] as String,
        termTypeId: json['termTypeId'] as String,
        attrValue: json['attrValue'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderTermAttribute overridesOrderTermAttribute(Map<String, dynamic> map) {
    return OrderTermAttribute(
        entityId: create_id_from('OrderTermAttribute', ['termTypeId', 'orderId', 'orderItemSeqId', 'attrName'], map),
        orderItemSeqId: map['orderItemSeqId'],
        orderId: map['orderId'],
        attrDescription: map['attrDescription'],
        termTypeId: map['termTypeId'],
        attrValue: map['attrValue'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderType extractOrderType(dynamic json) {
    return OrderType(
        entityId: create_id_from('OrderType', ['orderTypeId'], json),
        parentTypeId: json['parentTypeId'] as String,
        hasTable: json['hasTable'] as String,
        orderTypeId: json['orderTypeId'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderType overridesOrderType(Map<String, dynamic> map) {
    return OrderType(
        entityId: create_id_from('OrderType', ['orderTypeId'], map),
        parentTypeId: map['parentTypeId'],
        hasTable: map['hasTable'],
        orderTypeId: map['orderTypeId'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static OrderTypeAttr extractOrderTypeAttr(dynamic json) {
    return OrderTypeAttr(
        entityId: create_id_from('OrderTypeAttr', ['orderTypeId', 'attrName'], json),
        orderTypeId: json['orderTypeId'] as String,
        description: json['description'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static OrderTypeAttr overridesOrderTypeAttr(Map<String, dynamic> map) {
    return OrderTypeAttr(
        entityId: create_id_from('OrderTypeAttr', ['orderTypeId', 'attrName'], map),
        orderTypeId: map['orderTypeId'],
        description: map['description'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductOrderItem extractProductOrderItem(dynamic json) {
    return ProductOrderItem(
        entityId: create_id_from('ProductOrderItem', ['orderId', 'orderItemSeqId', 'engagementId', 'engagementItemSeqId'], json),
        orderItemSeqId: json['orderItemSeqId'] as String,
        engagementItemSeqId: json['engagementItemSeqId'] as String,
        productId: json['productId'] as String,
        orderId: json['orderId'] as String,
        engagementId: json['engagementId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductOrderItem overridesProductOrderItem(Map<String, dynamic> map) {
    return ProductOrderItem(
        entityId: create_id_from('ProductOrderItem', ['orderId', 'orderItemSeqId', 'engagementId', 'engagementItemSeqId'], map),
        orderItemSeqId: map['orderItemSeqId'],
        engagementItemSeqId: map['engagementItemSeqId'],
        productId: map['productId'],
        orderId: map['orderId'],
        engagementId: map['engagementId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkAndOrderItemFulfillment extractWorkAndOrderItemFulfillment(dynamic json) {
    return WorkAndOrderItemFulfillment(
        entityId: create_id_from('WorkAndOrderItemFulfillment', ['workEffortId', 'orderItemSeqId', 'orderId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        orderId: json['orderId'] as String,
        revisionNumber: json['revisionNumber'] as int,
        tempExprId: json['tempExprId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        orderItemSeqId: json['orderItemSeqId'] as String,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        specialTerms: json['specialTerms'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        moneyUomId: json['moneyUomId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        facilityId: json['facilityId'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkAndOrderItemFulfillment overridesWorkAndOrderItemFulfillment(Map<String, dynamic> map) {
    return WorkAndOrderItemFulfillment(
        entityId: create_id_from('WorkAndOrderItemFulfillment', ['workEffortId', 'orderItemSeqId', 'orderId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        orderId: map['orderId'],
        revisionNumber: map['revisionNumber'],
        tempExprId: map['tempExprId'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        orderItemSeqId: map['orderItemSeqId'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        shipGroupSeqId: map['shipGroupSeqId'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        specialTerms: map['specialTerms'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        moneyUomId: map['moneyUomId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        actualStartDate: map['actualStartDate'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        facilityId: map['facilityId'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkOrderItemFulfillment extractWorkOrderItemFulfillment(dynamic json) {
    return WorkOrderItemFulfillment(
        entityId: create_id_from('WorkOrderItemFulfillment', ['workEffortId', 'orderId', 'orderItemSeqId'], json),
        workEffortId: json['workEffortId'] as String,
        orderItemSeqId: json['orderItemSeqId'] as String,
        orderId: json['orderId'] as String,
        shipGroupSeqId: json['shipGroupSeqId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkOrderItemFulfillment overridesWorkOrderItemFulfillment(Map<String, dynamic> map) {
    return WorkOrderItemFulfillment(
        entityId: create_id_from('WorkOrderItemFulfillment', ['workEffortId', 'orderId', 'orderItemSeqId'], map),
        workEffortId: map['workEffortId'],
        orderItemSeqId: map['orderItemSeqId'],
        orderId: map['orderId'],
        shipGroupSeqId: map['shipGroupSeqId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

}