import 'package:sagas_meta/src/models/content_content.dart';
import 'package:sagas_meta/src/entity_base.dart';
import 'dart:convert';
import 'dart:typed_data';
import 'package:intl/intl.dart';

class ContentContentJsonifier{
  static Content extractContent(dynamic json) {
    return Content(
        entityId: create_id_from('Content', ['contentId'], json),
        ownerContentId: json['ownerContentId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        description: json['description'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        childLeafCount: json['childLeafCount'] as int,
        privilegeEnumId: json['privilegeEnumId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        dataResourceId: json['dataResourceId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        instanceOfContentId: json['instanceOfContentId'] as String,
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        contentName: json['contentName'] as String,
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        localeString: json['localeString'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        childBranchCount: json['childBranchCount'] as int,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static Content overridesContent(Map<String, dynamic> map) {
    return Content(
        entityId: create_id_from('Content', ['contentId'], map),
        ownerContentId: map['ownerContentId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        description: map['description'],
        mimeTypeId: map['mimeTypeId'],
        childLeafCount: map['childLeafCount'],
        privilegeEnumId: map['privilegeEnumId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        dataResourceId: map['dataResourceId'],
        createdByUserLogin: map['createdByUserLogin'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        instanceOfContentId: map['instanceOfContentId'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        contentName: map['contentName'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        localeString: map['localeString'],
        decoratorContentId: map['decoratorContentId'],
        childBranchCount: map['childBranchCount'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentAndRole extractContentAndRole(dynamic json) {
    return ContentAndRole(
        entityId: create_id_from('ContentAndRole', ['contentId', 'fromDate', 'roleTypeId', 'partyId'], json),
        ownerContentId: json['ownerContentId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        description: json['description'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        childLeafCount: json['childLeafCount'] as int,
        privilegeEnumId: json['privilegeEnumId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        dataResourceId: json['dataResourceId'] as String,
        partyId: json['partyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        roleTypeId: json['roleTypeId'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        instanceOfContentId: json['instanceOfContentId'] as String,
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        contentName: json['contentName'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        localeString: json['localeString'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        childBranchCount: json['childBranchCount'] as int,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentAndRole overridesContentAndRole(Map<String, dynamic> map) {
    return ContentAndRole(
        entityId: create_id_from('ContentAndRole', ['contentId', 'fromDate', 'roleTypeId', 'partyId'], map),
        ownerContentId: map['ownerContentId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        description: map['description'],
        mimeTypeId: map['mimeTypeId'],
        childLeafCount: map['childLeafCount'],
        privilegeEnumId: map['privilegeEnumId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        dataResourceId: map['dataResourceId'],
        partyId: map['partyId'],
        createdByUserLogin: map['createdByUserLogin'],
        roleTypeId: map['roleTypeId'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        instanceOfContentId: map['instanceOfContentId'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        contentName: map['contentName'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        localeString: map['localeString'],
        decoratorContentId: map['decoratorContentId'],
        childBranchCount: map['childBranchCount'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentApproval extractContentApproval(dynamic json) {
    return ContentApproval(
        entityId: create_id_from('ContentApproval', ['contentApprovalId'], json),
        contentApprovalId: json['contentApprovalId'] as String,
        roleTypeId: json['roleTypeId'] as String,
        approvalDate: check_dt(json['approvalDate']),
        comments: json['comments'] as String,
        sequenceNum: json['sequenceNum'] as int,
        contentId: json['contentId'] as String,
        contentRevisionSeqId: json['contentRevisionSeqId'] as String,
        approvalStatusId: json['approvalStatusId'] as String,
        partyId: json['partyId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentApproval overridesContentApproval(Map<String, dynamic> map) {
    return ContentApproval(
        entityId: create_id_from('ContentApproval', ['contentApprovalId'], map),
        contentApprovalId: map['contentApprovalId'],
        roleTypeId: map['roleTypeId'],
        approvalDate: map['approvalDate'],
        comments: map['comments'],
        sequenceNum: map['sequenceNum'],
        contentId: map['contentId'],
        contentRevisionSeqId: map['contentRevisionSeqId'],
        approvalStatusId: map['approvalStatusId'],
        partyId: map['partyId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentApprovalProductContentAndInfo extractContentApprovalProductContentAndInfo(dynamic json) {
    return ContentApprovalProductContentAndInfo(
        entityId: create_id_from('ContentApprovalProductContentAndInfo', ['contentApprovalId', 'productId', 'productContentTypeId', 'fromDate', 'drDataResourceId'], json),
        contentApprovalId: json['contentApprovalId'] as String,
        useTimeUomId: json['useTimeUomId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        ownerContentId: json['ownerContentId'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        drRelatedDetailId: json['drRelatedDetailId'] as String,
        drIsPublic: json['drIsPublic'] as String,
        drCreatedByUserLogin: json['drCreatedByUserLogin'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        drDataTemplateTypeId: json['drDataTemplateTypeId'] as String,
        dataResourceId: json['dataResourceId'] as String,
        partyId: json['partyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        productId: json['productId'] as String,
        drObjectInfo: json['drObjectInfo'] as String,
        instanceOfContentId: json['instanceOfContentId'] as String,
        contentRevisionSeqId: json['contentRevisionSeqId'] as String,
        useCountLimit: json['useCountLimit'] as int,
        approvalStatusId: json['approvalStatusId'] as String,
        drCharacterSetId: json['drCharacterSetId'] as String,
        drLastModifiedByUserLogin: json['drLastModifiedByUserLogin'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        drCreatedDate: check_dt(json['drCreatedDate']),
        statusId: json['statusId'] as String,
        drDataResourceName: json['drDataResourceName'] as String,
        drMimeTypeId: json['drMimeTypeId'] as String,
        childBranchCount: json['childBranchCount'] as int,
        approvalDate: check_dt(json['approvalDate']),
        drDataResourceId: json['drDataResourceId'] as String,
        drSurveyResponseId: json['drSurveyResponseId'] as String,
        drStatusId: json['drStatusId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        description: json['description'] as String,
        childLeafCount: json['childLeafCount'] as int,
        drDataCategoryId: json['drDataCategoryId'] as String,
        drDataResourceTypeId: json['drDataResourceTypeId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        useRoleTypeId: json['useRoleTypeId'] as String,
        drSurveyId: json['drSurveyId'] as String,
        useTime: json['useTime'] as int,
        roleTypeId: json['roleTypeId'] as String,
        purchaseFromDate: check_dt(json['purchaseFromDate']),
        comments: json['comments'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        serviceName: json['serviceName'] as String,
        productContentTypeId: json['productContentTypeId'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        contentName: json['contentName'] as String,
        createdDate: check_dt(json['createdDate']),
        localeString: json['localeString'] as String,
        drLastModifiedDate: check_dt(json['drLastModifiedDate']),
        drDataSourceId: json['drDataSourceId'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        purchaseThruDate: check_dt(json['purchaseThruDate']),
        drLocaleString: json['drLocaleString'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentApprovalProductContentAndInfo overridesContentApprovalProductContentAndInfo(Map<String, dynamic> map) {
    return ContentApprovalProductContentAndInfo(
        entityId: create_id_from('ContentApprovalProductContentAndInfo', ['contentApprovalId', 'productId', 'productContentTypeId', 'fromDate', 'drDataResourceId'], map),
        contentApprovalId: map['contentApprovalId'],
        useTimeUomId: map['useTimeUomId'],
        sequenceNum: map['sequenceNum'],
        ownerContentId: map['ownerContentId'],
        mimeTypeId: map['mimeTypeId'],
        drRelatedDetailId: map['drRelatedDetailId'],
        drIsPublic: map['drIsPublic'],
        drCreatedByUserLogin: map['drCreatedByUserLogin'],
        privilegeEnumId: map['privilegeEnumId'],
        drDataTemplateTypeId: map['drDataTemplateTypeId'],
        dataResourceId: map['dataResourceId'],
        partyId: map['partyId'],
        createdByUserLogin: map['createdByUserLogin'],
        productId: map['productId'],
        drObjectInfo: map['drObjectInfo'],
        instanceOfContentId: map['instanceOfContentId'],
        contentRevisionSeqId: map['contentRevisionSeqId'],
        useCountLimit: map['useCountLimit'],
        approvalStatusId: map['approvalStatusId'],
        drCharacterSetId: map['drCharacterSetId'],
        drLastModifiedByUserLogin: map['drLastModifiedByUserLogin'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        drCreatedDate: map['drCreatedDate'],
        statusId: map['statusId'],
        drDataResourceName: map['drDataResourceName'],
        drMimeTypeId: map['drMimeTypeId'],
        childBranchCount: map['childBranchCount'],
        approvalDate: map['approvalDate'],
        drDataResourceId: map['drDataResourceId'],
        drSurveyResponseId: map['drSurveyResponseId'],
        drStatusId: map['drStatusId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        description: map['description'],
        childLeafCount: map['childLeafCount'],
        drDataCategoryId: map['drDataCategoryId'],
        drDataResourceTypeId: map['drDataResourceTypeId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        useRoleTypeId: map['useRoleTypeId'],
        drSurveyId: map['drSurveyId'],
        useTime: map['useTime'],
        roleTypeId: map['roleTypeId'],
        purchaseFromDate: map['purchaseFromDate'],
        comments: map['comments'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        serviceName: map['serviceName'],
        productContentTypeId: map['productContentTypeId'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        contentName: map['contentName'],
        createdDate: map['createdDate'],
        localeString: map['localeString'],
        drLastModifiedDate: map['drLastModifiedDate'],
        drDataSourceId: map['drDataSourceId'],
        decoratorContentId: map['decoratorContentId'],
        purchaseThruDate: map['purchaseThruDate'],
        drLocaleString: map['drLocaleString'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentAssoc extractContentAssoc(dynamic json) {
    return ContentAssoc(
        entityId: create_id_from('ContentAssoc', ['contentId', 'contentIdTo', 'contentAssocTypeId', 'fromDate'], json),
        sequenceNum: json['sequenceNum'] as int,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        contentIdTo: json['contentIdTo'] as String,
        upperCoordinate: json['upperCoordinate'] as int,
        leftCoordinate: json['leftCoordinate'] as int,
        contentId: json['contentId'] as String,
        mapKey: json['mapKey'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        contentAssocPredicateId: json['contentAssocPredicateId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        createdDate: check_dt(json['createdDate']),
        contentAssocTypeId: json['contentAssocTypeId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentAssoc overridesContentAssoc(Map<String, dynamic> map) {
    return ContentAssoc(
        entityId: create_id_from('ContentAssoc', ['contentId', 'contentIdTo', 'contentAssocTypeId', 'fromDate'], map),
        sequenceNum: map['sequenceNum'],
        lastModifiedDate: map['lastModifiedDate'],
        contentIdTo: map['contentIdTo'],
        upperCoordinate: map['upperCoordinate'],
        leftCoordinate: map['leftCoordinate'],
        contentId: map['contentId'],
        mapKey: map['mapKey'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        contentAssocPredicateId: map['contentAssocPredicateId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        createdDate: map['createdDate'],
        contentAssocTypeId: map['contentAssocTypeId'],
        createdByUserLogin: map['createdByUserLogin'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentAssocDataResourceViewFrom extractContentAssocDataResourceViewFrom(dynamic json) {
    return ContentAssocDataResourceViewFrom(
        entityId: create_id_from('ContentAssocDataResourceViewFrom', ['contentIdStart', 'contentId', 'caContentIdTo', 'caContentId', 'caFromDate', 'caContentAssocTypeId', 'drDataResourceId'], json),
        caFromDate: check_dt(json['caFromDate']),
        ownerContentId: json['ownerContentId'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        drRelatedDetailId: json['drRelatedDetailId'] as String,
        drIsPublic: json['drIsPublic'] as String,
        drCreatedByUserLogin: json['drCreatedByUserLogin'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        drDataTemplateTypeId: json['drDataTemplateTypeId'] as String,
        dataResourceId: json['dataResourceId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        caMapKey: json['caMapKey'] as String,
        caSequenceNum: json['caSequenceNum'] as int,
        caContentAssocTypeId: json['caContentAssocTypeId'] as String,
        drObjectInfo: json['drObjectInfo'] as String,
        instanceOfContentId: json['instanceOfContentId'] as String,
        caLastModifiedByUserLogin: json['caLastModifiedByUserLogin'] as String,
        drCharacterSetId: json['drCharacterSetId'] as String,
        drLastModifiedByUserLogin: json['drLastModifiedByUserLogin'] as String,
        drCreatedDate: check_dt(json['drCreatedDate']),
        statusId: json['statusId'] as String,
        caDataSourceId: json['caDataSourceId'] as String,
        drDataResourceName: json['drDataResourceName'] as String,
        caCreatedByUserLogin: json['caCreatedByUserLogin'] as String,
        drMimeTypeId: json['drMimeTypeId'] as String,
        caUpperCoordinate: json['caUpperCoordinate'] as int,
        childBranchCount: json['childBranchCount'] as int,
        drDataResourceId: json['drDataResourceId'] as String,
        drSurveyResponseId: json['drSurveyResponseId'] as String,
        caContentId: json['caContentId'] as String,
        drStatusId: json['drStatusId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        contentIdStart: json['contentIdStart'] as String,
        description: json['description'] as String,
        childLeafCount: json['childLeafCount'] as int,
        caContentAssocPredicateId: json['caContentAssocPredicateId'] as String,
        drDataCategoryId: json['drDataCategoryId'] as String,
        drDataResourceTypeId: json['drDataResourceTypeId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        caCreatedDate: check_dt(json['caCreatedDate']),
        drSurveyId: json['drSurveyId'] as String,
        caThruDate: check_dt(json['caThruDate']),
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        contentName: json['contentName'] as String,
        createdDate: check_dt(json['createdDate']),
        localeString: json['localeString'] as String,
        drLastModifiedDate: check_dt(json['drLastModifiedDate']),
        caLeftCoordinate: json['caLeftCoordinate'] as int,
        drDataSourceId: json['drDataSourceId'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        caContentIdTo: json['caContentIdTo'] as String,
        drLocaleString: json['drLocaleString'] as String,
        caLastModifiedDate: check_dt(json['caLastModifiedDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentAssocDataResourceViewFrom overridesContentAssocDataResourceViewFrom(Map<String, dynamic> map) {
    return ContentAssocDataResourceViewFrom(
        entityId: create_id_from('ContentAssocDataResourceViewFrom', ['contentIdStart', 'contentId', 'caContentIdTo', 'caContentId', 'caFromDate', 'caContentAssocTypeId', 'drDataResourceId'], map),
        caFromDate: map['caFromDate'],
        ownerContentId: map['ownerContentId'],
        mimeTypeId: map['mimeTypeId'],
        drRelatedDetailId: map['drRelatedDetailId'],
        drIsPublic: map['drIsPublic'],
        drCreatedByUserLogin: map['drCreatedByUserLogin'],
        privilegeEnumId: map['privilegeEnumId'],
        drDataTemplateTypeId: map['drDataTemplateTypeId'],
        dataResourceId: map['dataResourceId'],
        createdByUserLogin: map['createdByUserLogin'],
        caMapKey: map['caMapKey'],
        caSequenceNum: map['caSequenceNum'],
        caContentAssocTypeId: map['caContentAssocTypeId'],
        drObjectInfo: map['drObjectInfo'],
        instanceOfContentId: map['instanceOfContentId'],
        caLastModifiedByUserLogin: map['caLastModifiedByUserLogin'],
        drCharacterSetId: map['drCharacterSetId'],
        drLastModifiedByUserLogin: map['drLastModifiedByUserLogin'],
        drCreatedDate: map['drCreatedDate'],
        statusId: map['statusId'],
        caDataSourceId: map['caDataSourceId'],
        drDataResourceName: map['drDataResourceName'],
        caCreatedByUserLogin: map['caCreatedByUserLogin'],
        drMimeTypeId: map['drMimeTypeId'],
        caUpperCoordinate: map['caUpperCoordinate'],
        childBranchCount: map['childBranchCount'],
        drDataResourceId: map['drDataResourceId'],
        drSurveyResponseId: map['drSurveyResponseId'],
        caContentId: map['caContentId'],
        drStatusId: map['drStatusId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        contentIdStart: map['contentIdStart'],
        description: map['description'],
        childLeafCount: map['childLeafCount'],
        caContentAssocPredicateId: map['caContentAssocPredicateId'],
        drDataCategoryId: map['drDataCategoryId'],
        drDataResourceTypeId: map['drDataResourceTypeId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        caCreatedDate: map['caCreatedDate'],
        drSurveyId: map['drSurveyId'],
        caThruDate: map['caThruDate'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        contentName: map['contentName'],
        createdDate: map['createdDate'],
        localeString: map['localeString'],
        drLastModifiedDate: map['drLastModifiedDate'],
        caLeftCoordinate: map['caLeftCoordinate'],
        drDataSourceId: map['drDataSourceId'],
        decoratorContentId: map['decoratorContentId'],
        caContentIdTo: map['caContentIdTo'],
        drLocaleString: map['drLocaleString'],
        caLastModifiedDate: map['caLastModifiedDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentAssocDataResourceViewTo extractContentAssocDataResourceViewTo(dynamic json) {
    return ContentAssocDataResourceViewTo(
        entityId: create_id_from('ContentAssocDataResourceViewTo', ['contentIdStart', 'caContentIdTo', 'caContentId', 'caFromDate', 'caContentAssocTypeId', 'contentId', 'drDataResourceId'], json),
        caFromDate: check_dt(json['caFromDate']),
        ownerContentId: json['ownerContentId'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        drRelatedDetailId: json['drRelatedDetailId'] as String,
        drIsPublic: json['drIsPublic'] as String,
        drCreatedByUserLogin: json['drCreatedByUserLogin'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        drDataTemplateTypeId: json['drDataTemplateTypeId'] as String,
        dataResourceId: json['dataResourceId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        caMapKey: json['caMapKey'] as String,
        caSequenceNum: json['caSequenceNum'] as int,
        caContentAssocTypeId: json['caContentAssocTypeId'] as String,
        drObjectInfo: json['drObjectInfo'] as String,
        caLastModifiedByUserLogin: json['caLastModifiedByUserLogin'] as String,
        instanceOfContentId: json['instanceOfContentId'] as String,
        drCharacterSetId: json['drCharacterSetId'] as String,
        drLastModifiedByUserLogin: json['drLastModifiedByUserLogin'] as String,
        drCreatedDate: check_dt(json['drCreatedDate']),
        statusId: json['statusId'] as String,
        caDataSourceId: json['caDataSourceId'] as String,
        drDataResourceName: json['drDataResourceName'] as String,
        caCreatedByUserLogin: json['caCreatedByUserLogin'] as String,
        drMimeTypeId: json['drMimeTypeId'] as String,
        caUpperCoordinate: json['caUpperCoordinate'] as int,
        childBranchCount: json['childBranchCount'] as int,
        drDataResourceId: json['drDataResourceId'] as String,
        drSurveyResponseId: json['drSurveyResponseId'] as String,
        caContentId: json['caContentId'] as String,
        drStatusId: json['drStatusId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        contentIdStart: json['contentIdStart'] as String,
        description: json['description'] as String,
        childLeafCount: json['childLeafCount'] as int,
        caContentAssocPredicateId: json['caContentAssocPredicateId'] as String,
        drDataCategoryId: json['drDataCategoryId'] as String,
        drDataResourceTypeId: json['drDataResourceTypeId'] as String,
        caCreatedDate: check_dt(json['caCreatedDate']),
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        drSurveyId: json['drSurveyId'] as String,
        caThruDate: check_dt(json['caThruDate']),
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        contentName: json['contentName'] as String,
        createdDate: check_dt(json['createdDate']),
        localeString: json['localeString'] as String,
        drLastModifiedDate: check_dt(json['drLastModifiedDate']),
        caLeftCoordinate: json['caLeftCoordinate'] as int,
        drDataSourceId: json['drDataSourceId'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        caContentIdTo: json['caContentIdTo'] as String,
        drLocaleString: json['drLocaleString'] as String,
        caLastModifiedDate: check_dt(json['caLastModifiedDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentAssocDataResourceViewTo overridesContentAssocDataResourceViewTo(Map<String, dynamic> map) {
    return ContentAssocDataResourceViewTo(
        entityId: create_id_from('ContentAssocDataResourceViewTo', ['contentIdStart', 'caContentIdTo', 'caContentId', 'caFromDate', 'caContentAssocTypeId', 'contentId', 'drDataResourceId'], map),
        caFromDate: map['caFromDate'],
        ownerContentId: map['ownerContentId'],
        mimeTypeId: map['mimeTypeId'],
        drRelatedDetailId: map['drRelatedDetailId'],
        drIsPublic: map['drIsPublic'],
        drCreatedByUserLogin: map['drCreatedByUserLogin'],
        privilegeEnumId: map['privilegeEnumId'],
        drDataTemplateTypeId: map['drDataTemplateTypeId'],
        dataResourceId: map['dataResourceId'],
        createdByUserLogin: map['createdByUserLogin'],
        caMapKey: map['caMapKey'],
        caSequenceNum: map['caSequenceNum'],
        caContentAssocTypeId: map['caContentAssocTypeId'],
        drObjectInfo: map['drObjectInfo'],
        caLastModifiedByUserLogin: map['caLastModifiedByUserLogin'],
        instanceOfContentId: map['instanceOfContentId'],
        drCharacterSetId: map['drCharacterSetId'],
        drLastModifiedByUserLogin: map['drLastModifiedByUserLogin'],
        drCreatedDate: map['drCreatedDate'],
        statusId: map['statusId'],
        caDataSourceId: map['caDataSourceId'],
        drDataResourceName: map['drDataResourceName'],
        caCreatedByUserLogin: map['caCreatedByUserLogin'],
        drMimeTypeId: map['drMimeTypeId'],
        caUpperCoordinate: map['caUpperCoordinate'],
        childBranchCount: map['childBranchCount'],
        drDataResourceId: map['drDataResourceId'],
        drSurveyResponseId: map['drSurveyResponseId'],
        caContentId: map['caContentId'],
        drStatusId: map['drStatusId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        contentIdStart: map['contentIdStart'],
        description: map['description'],
        childLeafCount: map['childLeafCount'],
        caContentAssocPredicateId: map['caContentAssocPredicateId'],
        drDataCategoryId: map['drDataCategoryId'],
        drDataResourceTypeId: map['drDataResourceTypeId'],
        caCreatedDate: map['caCreatedDate'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        drSurveyId: map['drSurveyId'],
        caThruDate: map['caThruDate'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        contentName: map['contentName'],
        createdDate: map['createdDate'],
        localeString: map['localeString'],
        drLastModifiedDate: map['drLastModifiedDate'],
        caLeftCoordinate: map['caLeftCoordinate'],
        drDataSourceId: map['drDataSourceId'],
        decoratorContentId: map['decoratorContentId'],
        caContentIdTo: map['caContentIdTo'],
        drLocaleString: map['drLocaleString'],
        caLastModifiedDate: map['caLastModifiedDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentAssocOptViewFrom extractContentAssocOptViewFrom(dynamic json) {
    return ContentAssocOptViewFrom(
        entityId: create_id_from('ContentAssocOptViewFrom', ['contentIdStart', 'contentId', 'caContentIdTo', 'caContentId', 'caFromDate', 'caContentAssocTypeId'], json),
        caFromDate: check_dt(json['caFromDate']),
        ownerContentId: json['ownerContentId'] as String,
        caContentId: json['caContentId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        contentIdStart: json['contentIdStart'] as String,
        description: json['description'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        childLeafCount: json['childLeafCount'] as int,
        caContentAssocPredicateId: json['caContentAssocPredicateId'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        caCreatedDate: check_dt(json['caCreatedDate']),
        dataResourceId: json['dataResourceId'] as String,
        caThruDate: check_dt(json['caThruDate']),
        createdByUserLogin: json['createdByUserLogin'] as String,
        caMapKey: json['caMapKey'] as String,
        caSequenceNum: json['caSequenceNum'] as int,
        caContentAssocTypeId: json['caContentAssocTypeId'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        instanceOfContentId: json['instanceOfContentId'] as String,
        caLastModifiedByUserLogin: json['caLastModifiedByUserLogin'] as String,
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        contentName: json['contentName'] as String,
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        localeString: json['localeString'] as String,
        caLeftCoordinate: json['caLeftCoordinate'] as int,
        caDataSourceId: json['caDataSourceId'] as String,
        caCreatedByUserLogin: json['caCreatedByUserLogin'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        caUpperCoordinate: json['caUpperCoordinate'] as int,
        caContentIdTo: json['caContentIdTo'] as String,
        childBranchCount: json['childBranchCount'] as int,
        caLastModifiedDate: check_dt(json['caLastModifiedDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentAssocOptViewFrom overridesContentAssocOptViewFrom(Map<String, dynamic> map) {
    return ContentAssocOptViewFrom(
        entityId: create_id_from('ContentAssocOptViewFrom', ['contentIdStart', 'contentId', 'caContentIdTo', 'caContentId', 'caFromDate', 'caContentAssocTypeId'], map),
        caFromDate: map['caFromDate'],
        ownerContentId: map['ownerContentId'],
        caContentId: map['caContentId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        contentIdStart: map['contentIdStart'],
        description: map['description'],
        mimeTypeId: map['mimeTypeId'],
        childLeafCount: map['childLeafCount'],
        caContentAssocPredicateId: map['caContentAssocPredicateId'],
        privilegeEnumId: map['privilegeEnumId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        caCreatedDate: map['caCreatedDate'],
        dataResourceId: map['dataResourceId'],
        caThruDate: map['caThruDate'],
        createdByUserLogin: map['createdByUserLogin'],
        caMapKey: map['caMapKey'],
        caSequenceNum: map['caSequenceNum'],
        caContentAssocTypeId: map['caContentAssocTypeId'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        instanceOfContentId: map['instanceOfContentId'],
        caLastModifiedByUserLogin: map['caLastModifiedByUserLogin'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        contentName: map['contentName'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        localeString: map['localeString'],
        caLeftCoordinate: map['caLeftCoordinate'],
        caDataSourceId: map['caDataSourceId'],
        caCreatedByUserLogin: map['caCreatedByUserLogin'],
        decoratorContentId: map['decoratorContentId'],
        caUpperCoordinate: map['caUpperCoordinate'],
        caContentIdTo: map['caContentIdTo'],
        childBranchCount: map['childBranchCount'],
        caLastModifiedDate: map['caLastModifiedDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentAssocPredicate extractContentAssocPredicate(dynamic json) {
    return ContentAssocPredicate(
        entityId: create_id_from('ContentAssocPredicate', ['contentAssocPredicateId'], json),
        contentAssocPredicateId: json['contentAssocPredicateId'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentAssocPredicate overridesContentAssocPredicate(Map<String, dynamic> map) {
    return ContentAssocPredicate(
        entityId: create_id_from('ContentAssocPredicate', ['contentAssocPredicateId'], map),
        contentAssocPredicateId: map['contentAssocPredicateId'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentAssocType extractContentAssocType(dynamic json) {
    return ContentAssocType(
        entityId: create_id_from('ContentAssocType', ['contentAssocTypeId'], json),
        contentAssocTypeId: json['contentAssocTypeId'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentAssocType overridesContentAssocType(Map<String, dynamic> map) {
    return ContentAssocType(
        entityId: create_id_from('ContentAssocType', ['contentAssocTypeId'], map),
        contentAssocTypeId: map['contentAssocTypeId'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentAssocViewFrom extractContentAssocViewFrom(dynamic json) {
    return ContentAssocViewFrom(
        entityId: create_id_from('ContentAssocViewFrom', ['contentIdStart', 'fromDate', 'contentId', 'caContentIdTo', 'caContentId', 'caFromDate', 'caContentAssocTypeId'], json),
        caFromDate: check_dt(json['caFromDate']),
        ownerContentId: json['ownerContentId'] as String,
        caContentId: json['caContentId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        contentIdStart: json['contentIdStart'] as String,
        description: json['description'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        childLeafCount: json['childLeafCount'] as int,
        caContentAssocPredicateId: json['caContentAssocPredicateId'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        caCreatedDate: check_dt(json['caCreatedDate']),
        dataResourceId: json['dataResourceId'] as String,
        caThruDate: check_dt(json['caThruDate']),
        createdByUserLogin: json['createdByUserLogin'] as String,
        caMapKey: json['caMapKey'] as String,
        caSequenceNum: json['caSequenceNum'] as int,
        caContentAssocTypeId: json['caContentAssocTypeId'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        instanceOfContentId: json['instanceOfContentId'] as String,
        caLastModifiedByUserLogin: json['caLastModifiedByUserLogin'] as String,
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        thruDate: check_dt(json['thruDate']),
        contentName: json['contentName'] as String,
        fromDate: check_dt(json['fromDate']),
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        localeString: json['localeString'] as String,
        caLeftCoordinate: json['caLeftCoordinate'] as int,
        caDataSourceId: json['caDataSourceId'] as String,
        caCreatedByUserLogin: json['caCreatedByUserLogin'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        caUpperCoordinate: json['caUpperCoordinate'] as int,
        caContentIdTo: json['caContentIdTo'] as String,
        childBranchCount: json['childBranchCount'] as int,
        caLastModifiedDate: check_dt(json['caLastModifiedDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentAssocViewFrom overridesContentAssocViewFrom(Map<String, dynamic> map) {
    return ContentAssocViewFrom(
        entityId: create_id_from('ContentAssocViewFrom', ['contentIdStart', 'fromDate', 'contentId', 'caContentIdTo', 'caContentId', 'caFromDate', 'caContentAssocTypeId'], map),
        caFromDate: map['caFromDate'],
        ownerContentId: map['ownerContentId'],
        caContentId: map['caContentId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        contentIdStart: map['contentIdStart'],
        description: map['description'],
        mimeTypeId: map['mimeTypeId'],
        childLeafCount: map['childLeafCount'],
        caContentAssocPredicateId: map['caContentAssocPredicateId'],
        privilegeEnumId: map['privilegeEnumId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        caCreatedDate: map['caCreatedDate'],
        dataResourceId: map['dataResourceId'],
        caThruDate: map['caThruDate'],
        createdByUserLogin: map['createdByUserLogin'],
        caMapKey: map['caMapKey'],
        caSequenceNum: map['caSequenceNum'],
        caContentAssocTypeId: map['caContentAssocTypeId'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        instanceOfContentId: map['instanceOfContentId'],
        caLastModifiedByUserLogin: map['caLastModifiedByUserLogin'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        thruDate: map['thruDate'],
        contentName: map['contentName'],
        fromDate: map['fromDate'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        localeString: map['localeString'],
        caLeftCoordinate: map['caLeftCoordinate'],
        caDataSourceId: map['caDataSourceId'],
        caCreatedByUserLogin: map['caCreatedByUserLogin'],
        decoratorContentId: map['decoratorContentId'],
        caUpperCoordinate: map['caUpperCoordinate'],
        caContentIdTo: map['caContentIdTo'],
        childBranchCount: map['childBranchCount'],
        caLastModifiedDate: map['caLastModifiedDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentAssocViewTo extractContentAssocViewTo(dynamic json) {
    return ContentAssocViewTo(
        entityId: create_id_from('ContentAssocViewTo', ['contentIdStart', 'fromDate', 'contentId', 'caContentIdTo', 'caContentId', 'caFromDate', 'caContentAssocTypeId'], json),
        caFromDate: check_dt(json['caFromDate']),
        ownerContentId: json['ownerContentId'] as String,
        caContentId: json['caContentId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        contentIdStart: json['contentIdStart'] as String,
        description: json['description'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        childLeafCount: json['childLeafCount'] as int,
        caContentAssocPredicateId: json['caContentAssocPredicateId'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        caCreatedDate: check_dt(json['caCreatedDate']),
        dataResourceId: json['dataResourceId'] as String,
        caThruDate: check_dt(json['caThruDate']),
        createdByUserLogin: json['createdByUserLogin'] as String,
        caMapKey: json['caMapKey'] as String,
        caSequenceNum: json['caSequenceNum'] as int,
        caContentAssocTypeId: json['caContentAssocTypeId'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        instanceOfContentId: json['instanceOfContentId'] as String,
        caLastModifiedByUserLogin: json['caLastModifiedByUserLogin'] as String,
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        thruDate: check_dt(json['thruDate']),
        contentName: json['contentName'] as String,
        fromDate: check_dt(json['fromDate']),
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        localeString: json['localeString'] as String,
        caLeftCoordinate: json['caLeftCoordinate'] as int,
        caDataSourceId: json['caDataSourceId'] as String,
        caCreatedByUserLogin: json['caCreatedByUserLogin'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        caUpperCoordinate: json['caUpperCoordinate'] as int,
        caContentIdTo: json['caContentIdTo'] as String,
        childBranchCount: json['childBranchCount'] as int,
        caLastModifiedDate: check_dt(json['caLastModifiedDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentAssocViewTo overridesContentAssocViewTo(Map<String, dynamic> map) {
    return ContentAssocViewTo(
        entityId: create_id_from('ContentAssocViewTo', ['contentIdStart', 'fromDate', 'contentId', 'caContentIdTo', 'caContentId', 'caFromDate', 'caContentAssocTypeId'], map),
        caFromDate: map['caFromDate'],
        ownerContentId: map['ownerContentId'],
        caContentId: map['caContentId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        contentIdStart: map['contentIdStart'],
        description: map['description'],
        mimeTypeId: map['mimeTypeId'],
        childLeafCount: map['childLeafCount'],
        caContentAssocPredicateId: map['caContentAssocPredicateId'],
        privilegeEnumId: map['privilegeEnumId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        caCreatedDate: map['caCreatedDate'],
        dataResourceId: map['dataResourceId'],
        caThruDate: map['caThruDate'],
        createdByUserLogin: map['createdByUserLogin'],
        caMapKey: map['caMapKey'],
        caSequenceNum: map['caSequenceNum'],
        caContentAssocTypeId: map['caContentAssocTypeId'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        instanceOfContentId: map['instanceOfContentId'],
        caLastModifiedByUserLogin: map['caLastModifiedByUserLogin'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        thruDate: map['thruDate'],
        contentName: map['contentName'],
        fromDate: map['fromDate'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        localeString: map['localeString'],
        caLeftCoordinate: map['caLeftCoordinate'],
        caDataSourceId: map['caDataSourceId'],
        caCreatedByUserLogin: map['caCreatedByUserLogin'],
        decoratorContentId: map['decoratorContentId'],
        caUpperCoordinate: map['caUpperCoordinate'],
        caContentIdTo: map['caContentIdTo'],
        childBranchCount: map['childBranchCount'],
        caLastModifiedDate: map['caLastModifiedDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentAttribute extractContentAttribute(dynamic json) {
    return ContentAttribute(
        entityId: create_id_from('ContentAttribute', ['contentId', 'attrName'], json),
        attrDescription: json['attrDescription'] as String,
        contentId: json['contentId'] as String,
        attrValue: json['attrValue'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentAttribute overridesContentAttribute(Map<String, dynamic> map) {
    return ContentAttribute(
        entityId: create_id_from('ContentAttribute', ['contentId', 'attrName'], map),
        attrDescription: map['attrDescription'],
        contentId: map['contentId'],
        attrValue: map['attrValue'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentDataResourceView extractContentDataResourceView(dynamic json) {
    return ContentDataResourceView(
        entityId: create_id_from('ContentDataResourceView', ['contentId', 'drDataResourceId'], json),
        drDataResourceId: json['drDataResourceId'] as String,
        drSurveyResponseId: json['drSurveyResponseId'] as String,
        ownerContentId: json['ownerContentId'] as String,
        drStatusId: json['drStatusId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        description: json['description'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        childLeafCount: json['childLeafCount'] as int,
        drRelatedDetailId: json['drRelatedDetailId'] as String,
        drDataCategoryId: json['drDataCategoryId'] as String,
        drIsPublic: json['drIsPublic'] as String,
        drDataResourceTypeId: json['drDataResourceTypeId'] as String,
        drCreatedByUserLogin: json['drCreatedByUserLogin'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        drDataTemplateTypeId: json['drDataTemplateTypeId'] as String,
        dataResourceId: json['dataResourceId'] as String,
        drSurveyId: json['drSurveyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        drObjectInfo: json['drObjectInfo'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        instanceOfContentId: json['instanceOfContentId'] as String,
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        drCharacterSetId: json['drCharacterSetId'] as String,
        drLastModifiedByUserLogin: json['drLastModifiedByUserLogin'] as String,
        contentName: json['contentName'] as String,
        drCreatedDate: check_dt(json['drCreatedDate']),
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        localeString: json['localeString'] as String,
        drLastModifiedDate: check_dt(json['drLastModifiedDate']),
        drDataResourceName: json['drDataResourceName'] as String,
        drDataSourceId: json['drDataSourceId'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        drMimeTypeId: json['drMimeTypeId'] as String,
        drLocaleString: json['drLocaleString'] as String,
        childBranchCount: json['childBranchCount'] as int,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentDataResourceView overridesContentDataResourceView(Map<String, dynamic> map) {
    return ContentDataResourceView(
        entityId: create_id_from('ContentDataResourceView', ['contentId', 'drDataResourceId'], map),
        drDataResourceId: map['drDataResourceId'],
        drSurveyResponseId: map['drSurveyResponseId'],
        ownerContentId: map['ownerContentId'],
        drStatusId: map['drStatusId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        description: map['description'],
        mimeTypeId: map['mimeTypeId'],
        childLeafCount: map['childLeafCount'],
        drRelatedDetailId: map['drRelatedDetailId'],
        drDataCategoryId: map['drDataCategoryId'],
        drIsPublic: map['drIsPublic'],
        drDataResourceTypeId: map['drDataResourceTypeId'],
        drCreatedByUserLogin: map['drCreatedByUserLogin'],
        privilegeEnumId: map['privilegeEnumId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        drDataTemplateTypeId: map['drDataTemplateTypeId'],
        dataResourceId: map['dataResourceId'],
        drSurveyId: map['drSurveyId'],
        createdByUserLogin: map['createdByUserLogin'],
        drObjectInfo: map['drObjectInfo'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        instanceOfContentId: map['instanceOfContentId'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        drCharacterSetId: map['drCharacterSetId'],
        drLastModifiedByUserLogin: map['drLastModifiedByUserLogin'],
        contentName: map['contentName'],
        drCreatedDate: map['drCreatedDate'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        localeString: map['localeString'],
        drLastModifiedDate: map['drLastModifiedDate'],
        drDataResourceName: map['drDataResourceName'],
        drDataSourceId: map['drDataSourceId'],
        decoratorContentId: map['decoratorContentId'],
        drMimeTypeId: map['drMimeTypeId'],
        drLocaleString: map['drLocaleString'],
        childBranchCount: map['childBranchCount'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentKeyword extractContentKeyword(dynamic json) {
    return ContentKeyword(
        entityId: create_id_from('ContentKeyword', ['contentId', 'keyword'], json),
        relevancyWeight: json['relevancyWeight'] as int,
        contentId: json['contentId'] as String,
        keyword: json['keyword'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentKeyword overridesContentKeyword(Map<String, dynamic> map) {
    return ContentKeyword(
        entityId: create_id_from('ContentKeyword', ['contentId', 'keyword'], map),
        relevancyWeight: map['relevancyWeight'],
        contentId: map['contentId'],
        keyword: map['keyword'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentMetaData extractContentMetaData(dynamic json) {
    return ContentMetaData(
        entityId: create_id_from('ContentMetaData', ['contentId', 'metaDataPredicateId'], json),
        dataSourceId: json['dataSourceId'] as String,
        metaDataValue: json['metaDataValue'] as String,
        metaDataPredicateId: json['metaDataPredicateId'] as String,
        contentId: json['contentId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentMetaData overridesContentMetaData(Map<String, dynamic> map) {
    return ContentMetaData(
        entityId: create_id_from('ContentMetaData', ['contentId', 'metaDataPredicateId'], map),
        dataSourceId: map['dataSourceId'],
        metaDataValue: map['metaDataValue'],
        metaDataPredicateId: map['metaDataPredicateId'],
        contentId: map['contentId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentOperation extractContentOperation(dynamic json) {
    return ContentOperation(
        entityId: create_id_from('ContentOperation', ['contentOperationId'], json),
        contentOperationId: json['contentOperationId'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentOperation overridesContentOperation(Map<String, dynamic> map) {
    return ContentOperation(
        entityId: create_id_from('ContentOperation', ['contentOperationId'], map),
        contentOperationId: map['contentOperationId'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentPurpose extractContentPurpose(dynamic json) {
    return ContentPurpose(
        entityId: create_id_from('ContentPurpose', ['contentId', 'contentPurposeTypeId'], json),
        contentPurposeTypeId: json['contentPurposeTypeId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        contentId: json['contentId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentPurpose overridesContentPurpose(Map<String, dynamic> map) {
    return ContentPurpose(
        entityId: create_id_from('ContentPurpose', ['contentId', 'contentPurposeTypeId'], map),
        contentPurposeTypeId: map['contentPurposeTypeId'],
        sequenceNum: map['sequenceNum'],
        contentId: map['contentId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentPurposeOperation extractContentPurposeOperation(dynamic json) {
    return ContentPurposeOperation(
        entityId: create_id_from('ContentPurposeOperation', ['contentPurposeTypeId', 'contentOperationId', 'roleTypeId', 'statusId', 'privilegeEnumId'], json),
        contentPurposeTypeId: json['contentPurposeTypeId'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        roleTypeId: json['roleTypeId'] as String,
        statusId: json['statusId'] as String,
        contentOperationId: json['contentOperationId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentPurposeOperation overridesContentPurposeOperation(Map<String, dynamic> map) {
    return ContentPurposeOperation(
        entityId: create_id_from('ContentPurposeOperation', ['contentPurposeTypeId', 'contentOperationId', 'roleTypeId', 'statusId', 'privilegeEnumId'], map),
        contentPurposeTypeId: map['contentPurposeTypeId'],
        privilegeEnumId: map['privilegeEnumId'],
        roleTypeId: map['roleTypeId'],
        statusId: map['statusId'],
        contentOperationId: map['contentOperationId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentPurposeType extractContentPurposeType(dynamic json) {
    return ContentPurposeType(
        entityId: create_id_from('ContentPurposeType', ['contentPurposeTypeId'], json),
        contentPurposeTypeId: json['contentPurposeTypeId'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentPurposeType overridesContentPurposeType(Map<String, dynamic> map) {
    return ContentPurposeType(
        entityId: create_id_from('ContentPurposeType', ['contentPurposeTypeId'], map),
        contentPurposeTypeId: map['contentPurposeTypeId'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentRevision extractContentRevision(dynamic json) {
    return ContentRevision(
        entityId: create_id_from('ContentRevision', ['contentId', 'contentRevisionSeqId'], json),
        comments: json['comments'] as String,
        contentId: json['contentId'] as String,
        contentRevisionSeqId: json['contentRevisionSeqId'] as String,
        committedByPartyId: json['committedByPartyId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentRevision overridesContentRevision(Map<String, dynamic> map) {
    return ContentRevision(
        entityId: create_id_from('ContentRevision', ['contentId', 'contentRevisionSeqId'], map),
        comments: map['comments'],
        contentId: map['contentId'],
        contentRevisionSeqId: map['contentRevisionSeqId'],
        committedByPartyId: map['committedByPartyId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentRevisionItem extractContentRevisionItem(dynamic json) {
    return ContentRevisionItem(
        entityId: create_id_from('ContentRevisionItem', ['contentId', 'contentRevisionSeqId', 'itemContentId'], json),
        oldDataResourceId: json['oldDataResourceId'] as String,
        contentId: json['contentId'] as String,
        newDataResourceId: json['newDataResourceId'] as String,
        contentRevisionSeqId: json['contentRevisionSeqId'] as String,
        itemContentId: json['itemContentId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentRevisionItem overridesContentRevisionItem(Map<String, dynamic> map) {
    return ContentRevisionItem(
        entityId: create_id_from('ContentRevisionItem', ['contentId', 'contentRevisionSeqId', 'itemContentId'], map),
        oldDataResourceId: map['oldDataResourceId'],
        contentId: map['contentId'],
        newDataResourceId: map['newDataResourceId'],
        contentRevisionSeqId: map['contentRevisionSeqId'],
        itemContentId: map['itemContentId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentRole extractContentRole(dynamic json) {
    return ContentRole(
        entityId: create_id_from('ContentRole', ['contentId', 'partyId', 'roleTypeId', 'fromDate'], json),
        fromDate: check_dt(json['fromDate']),
        roleTypeId: json['roleTypeId'] as String,
        contentId: json['contentId'] as String,
        partyId: json['partyId'] as String,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentRole overridesContentRole(Map<String, dynamic> map) {
    return ContentRole(
        entityId: create_id_from('ContentRole', ['contentId', 'partyId', 'roleTypeId', 'fromDate'], map),
        fromDate: map['fromDate'],
        roleTypeId: map['roleTypeId'],
        contentId: map['contentId'],
        partyId: map['partyId'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentSearchConstraint extractContentSearchConstraint(dynamic json) {
    return ContentSearchConstraint(
        entityId: create_id_from('ContentSearchConstraint', ['contentSearchResultId', 'constraintSeqId'], json),
        constraintSeqId: json['constraintSeqId'] as String,
        anyPrefix: json['anyPrefix'] as String,
        highValue: json['highValue'] as String,
        includeSubCategories: json['includeSubCategories'] as String,
        constraintName: json['constraintName'] as String,
        isAnd: json['isAnd'] as String,
        removeStems: json['removeStems'] as String,
        lowValue: json['lowValue'] as String,
        infoString: json['infoString'] as String,
        contentSearchResultId: json['contentSearchResultId'] as String,
        anySuffix: json['anySuffix'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentSearchConstraint overridesContentSearchConstraint(Map<String, dynamic> map) {
    return ContentSearchConstraint(
        entityId: create_id_from('ContentSearchConstraint', ['contentSearchResultId', 'constraintSeqId'], map),
        constraintSeqId: map['constraintSeqId'],
        anyPrefix: map['anyPrefix'],
        highValue: map['highValue'],
        includeSubCategories: map['includeSubCategories'],
        constraintName: map['constraintName'],
        isAnd: map['isAnd'],
        removeStems: map['removeStems'],
        lowValue: map['lowValue'],
        infoString: map['infoString'],
        contentSearchResultId: map['contentSearchResultId'],
        anySuffix: map['anySuffix'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentSearchResult extractContentSearchResult(dynamic json) {
    return ContentSearchResult(
        entityId: create_id_from('ContentSearchResult', ['contentSearchResultId'], json),
        contentSearchResultId: json['contentSearchResultId'] as String,
        visitId: json['visitId'] as String,
        orderByName: json['orderByName'] as String,
        numResults: json['numResults'] as int,
        secondsTotal: json['secondsTotal'] as double,
        searchDate: check_dt(json['searchDate']),
        isAscending: json['isAscending'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentSearchResult overridesContentSearchResult(Map<String, dynamic> map) {
    return ContentSearchResult(
        entityId: create_id_from('ContentSearchResult', ['contentSearchResultId'], map),
        contentSearchResultId: map['contentSearchResultId'],
        visitId: map['visitId'],
        orderByName: map['orderByName'],
        numResults: map['numResults'],
        secondsTotal: map['secondsTotal'],
        searchDate: map['searchDate'],
        isAscending: map['isAscending'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentType extractContentType(dynamic json) {
    return ContentType(
        entityId: create_id_from('ContentType', ['contentTypeId'], json),
        parentTypeId: json['parentTypeId'] as String,
        hasTable: json['hasTable'] as String,
        contentTypeId: json['contentTypeId'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentType overridesContentType(Map<String, dynamic> map) {
    return ContentType(
        entityId: create_id_from('ContentType', ['contentTypeId'], map),
        parentTypeId: map['parentTypeId'],
        hasTable: map['hasTable'],
        contentTypeId: map['contentTypeId'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ContentTypeAttr extractContentTypeAttr(dynamic json) {
    return ContentTypeAttr(
        entityId: create_id_from('ContentTypeAttr', ['contentTypeId', 'attrName'], json),
        contentTypeId: json['contentTypeId'] as String,
        description: json['description'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ContentTypeAttr overridesContentTypeAttr(Map<String, dynamic> map) {
    return ContentTypeAttr(
        entityId: create_id_from('ContentTypeAttr', ['contentTypeId', 'attrName'], map),
        contentTypeId: map['contentTypeId'],
        description: map['description'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static DataResourceContentView extractDataResourceContentView(dynamic json) {
    return DataResourceContentView(
        entityId: create_id_from('DataResourceContentView', ['dataResourceId', 'coContentId'], json),
        coDataResourceId: json['coDataResourceId'] as String,
        surveyId: json['surveyId'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        coInstanceOfContentId: json['coInstanceOfContentId'] as String,
        coLocaleString: json['coLocaleString'] as String,
        dataCategoryId: json['dataCategoryId'] as String,
        coCreatedDate: check_dt(json['coCreatedDate']),
        surveyResponseId: json['surveyResponseId'] as String,
        coChildLeafCount: json['coChildLeafCount'] as int,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        coTemplateDataResourceId: json['coTemplateDataResourceId'] as String,
        relatedDetailId: json['relatedDetailId'] as String,
        coCreatedByUserLogin: json['coCreatedByUserLogin'] as String,
        dataResourceId: json['dataResourceId'] as String,
        isPublic: json['isPublic'] as String,
        coChildBranchCount: json['coChildBranchCount'] as int,
        coOwnerContentId: json['coOwnerContentId'] as String,
        objectInfo: json['objectInfo'] as String,
        dataResourceTypeId: json['dataResourceTypeId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        coPrivilegeEnumId: json['coPrivilegeEnumId'] as String,
        coContentId: json['coContentId'] as String,
        dataResourceName: json['dataResourceName'] as String,
        coDescription: json['coDescription'] as String,
        dataTemplateTypeId: json['dataTemplateTypeId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        coLastModifiedDate: check_dt(json['coLastModifiedDate']),
        coContentTypeId: json['coContentTypeId'] as String,
        coCustomMethodId: json['coCustomMethodId'] as String,
        coCharacterSetId: json['coCharacterSetId'] as String,
        characterSetId: json['characterSetId'] as String,
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        localeString: json['localeString'] as String,
        coMimeTypeId: json['coMimeTypeId'] as String,
        coServiceName: json['coServiceName'] as String,
        coDataSourceId: json['coDataSourceId'] as String,
        coLastModifiedByUserLogin: json['coLastModifiedByUserLogin'] as String,
        coDecoratorContentId: json['coDecoratorContentId'] as String,
        coContentName: json['coContentName'] as String,
        coStatusId: json['coStatusId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static DataResourceContentView overridesDataResourceContentView(Map<String, dynamic> map) {
    return DataResourceContentView(
        entityId: create_id_from('DataResourceContentView', ['dataResourceId', 'coContentId'], map),
        coDataResourceId: map['coDataResourceId'],
        surveyId: map['surveyId'],
        mimeTypeId: map['mimeTypeId'],
        coInstanceOfContentId: map['coInstanceOfContentId'],
        coLocaleString: map['coLocaleString'],
        dataCategoryId: map['dataCategoryId'],
        coCreatedDate: map['coCreatedDate'],
        surveyResponseId: map['surveyResponseId'],
        coChildLeafCount: map['coChildLeafCount'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        coTemplateDataResourceId: map['coTemplateDataResourceId'],
        relatedDetailId: map['relatedDetailId'],
        coCreatedByUserLogin: map['coCreatedByUserLogin'],
        dataResourceId: map['dataResourceId'],
        isPublic: map['isPublic'],
        coChildBranchCount: map['coChildBranchCount'],
        coOwnerContentId: map['coOwnerContentId'],
        objectInfo: map['objectInfo'],
        dataResourceTypeId: map['dataResourceTypeId'],
        createdByUserLogin: map['createdByUserLogin'],
        coPrivilegeEnumId: map['coPrivilegeEnumId'],
        coContentId: map['coContentId'],
        dataResourceName: map['dataResourceName'],
        coDescription: map['coDescription'],
        dataTemplateTypeId: map['dataTemplateTypeId'],
        lastModifiedDate: map['lastModifiedDate'],
        coLastModifiedDate: map['coLastModifiedDate'],
        coContentTypeId: map['coContentTypeId'],
        coCustomMethodId: map['coCustomMethodId'],
        coCharacterSetId: map['coCharacterSetId'],
        characterSetId: map['characterSetId'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        localeString: map['localeString'],
        coMimeTypeId: map['coMimeTypeId'],
        coServiceName: map['coServiceName'],
        coDataSourceId: map['coDataSourceId'],
        coLastModifiedByUserLogin: map['coLastModifiedByUserLogin'],
        coDecoratorContentId: map['coDecoratorContentId'],
        coContentName: map['coContentName'],
        coStatusId: map['coStatusId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static PartyContentDetail extractPartyContentDetail(dynamic json) {
    return PartyContentDetail(
        entityId: create_id_from('PartyContentDetail', ['fromDate', 'partyContentTypeId', 'contentId', 'partyId'], json),
        partyContentTypeId: json['partyContentTypeId'] as String,
        ownerContentId: json['ownerContentId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        description: json['description'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        childLeafCount: json['childLeafCount'] as int,
        privilegeEnumId: json['privilegeEnumId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        dataResourceId: json['dataResourceId'] as String,
        partyId: json['partyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        instanceOfContentId: json['instanceOfContentId'] as String,
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        thruDate: check_dt(json['thruDate']),
        contentName: json['contentName'] as String,
        fromDate: check_dt(json['fromDate']),
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        localeString: json['localeString'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        childBranchCount: json['childBranchCount'] as int,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static PartyContentDetail overridesPartyContentDetail(Map<String, dynamic> map) {
    return PartyContentDetail(
        entityId: create_id_from('PartyContentDetail', ['fromDate', 'partyContentTypeId', 'contentId', 'partyId'], map),
        partyContentTypeId: map['partyContentTypeId'],
        ownerContentId: map['ownerContentId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        description: map['description'],
        mimeTypeId: map['mimeTypeId'],
        childLeafCount: map['childLeafCount'],
        privilegeEnumId: map['privilegeEnumId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        dataResourceId: map['dataResourceId'],
        partyId: map['partyId'],
        createdByUserLogin: map['createdByUserLogin'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        instanceOfContentId: map['instanceOfContentId'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        thruDate: map['thruDate'],
        contentName: map['contentName'],
        fromDate: map['fromDate'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        localeString: map['localeString'],
        decoratorContentId: map['decoratorContentId'],
        childBranchCount: map['childBranchCount'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static SubContentDataResourceView extractSubContentDataResourceView(dynamic json) {
    return SubContentDataResourceView(
        entityId: create_id_from('SubContentDataResourceView', ['contentId', 'drDataResourceId'], json),
        drDataResourceId: json['drDataResourceId'] as String,
        drSurveyResponseId: json['drSurveyResponseId'] as String,
        ownerContentId: json['ownerContentId'] as String,
        drStatusId: json['drStatusId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        description: json['description'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        childLeafCount: json['childLeafCount'] as int,
        drRelatedDetailId: json['drRelatedDetailId'] as String,
        drDataCategoryId: json['drDataCategoryId'] as String,
        drIsPublic: json['drIsPublic'] as String,
        drDataResourceTypeId: json['drDataResourceTypeId'] as String,
        drCreatedByUserLogin: json['drCreatedByUserLogin'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        drDataTemplateTypeId: json['drDataTemplateTypeId'] as String,
        dataResourceId: json['dataResourceId'] as String,
        drSurveyId: json['drSurveyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        drObjectInfo: json['drObjectInfo'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        instanceOfContentId: json['instanceOfContentId'] as String,
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        drCharacterSetId: json['drCharacterSetId'] as String,
        drLastModifiedByUserLogin: json['drLastModifiedByUserLogin'] as String,
        contentName: json['contentName'] as String,
        drCreatedDate: check_dt(json['drCreatedDate']),
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        localeString: json['localeString'] as String,
        drLastModifiedDate: check_dt(json['drLastModifiedDate']),
        drDataResourceName: json['drDataResourceName'] as String,
        drDataSourceId: json['drDataSourceId'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        drMimeTypeId: json['drMimeTypeId'] as String,
        drLocaleString: json['drLocaleString'] as String,
        childBranchCount: json['childBranchCount'] as int,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static SubContentDataResourceView overridesSubContentDataResourceView(Map<String, dynamic> map) {
    return SubContentDataResourceView(
        entityId: create_id_from('SubContentDataResourceView', ['contentId', 'drDataResourceId'], map),
        drDataResourceId: map['drDataResourceId'],
        drSurveyResponseId: map['drSurveyResponseId'],
        ownerContentId: map['ownerContentId'],
        drStatusId: map['drStatusId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        description: map['description'],
        mimeTypeId: map['mimeTypeId'],
        childLeafCount: map['childLeafCount'],
        drRelatedDetailId: map['drRelatedDetailId'],
        drDataCategoryId: map['drDataCategoryId'],
        drIsPublic: map['drIsPublic'],
        drDataResourceTypeId: map['drDataResourceTypeId'],
        drCreatedByUserLogin: map['drCreatedByUserLogin'],
        privilegeEnumId: map['privilegeEnumId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        drDataTemplateTypeId: map['drDataTemplateTypeId'],
        dataResourceId: map['dataResourceId'],
        drSurveyId: map['drSurveyId'],
        createdByUserLogin: map['createdByUserLogin'],
        drObjectInfo: map['drObjectInfo'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        instanceOfContentId: map['instanceOfContentId'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        drCharacterSetId: map['drCharacterSetId'],
        drLastModifiedByUserLogin: map['drLastModifiedByUserLogin'],
        contentName: map['contentName'],
        drCreatedDate: map['drCreatedDate'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        localeString: map['localeString'],
        drLastModifiedDate: map['drLastModifiedDate'],
        drDataResourceName: map['drDataResourceName'],
        drDataSourceId: map['drDataSourceId'],
        decoratorContentId: map['decoratorContentId'],
        drMimeTypeId: map['drMimeTypeId'],
        drLocaleString: map['drLocaleString'],
        childBranchCount: map['childBranchCount'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

}