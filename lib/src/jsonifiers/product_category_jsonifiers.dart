import 'package:sagas_meta/src/models/product_category.dart';
import 'package:sagas_meta/src/entity_base.dart';
import 'dart:convert';
import 'dart:typed_data';
import 'package:intl/intl.dart';

class ProductCategoryJsonifier{
  static ProductAndCategoryMember extractProductAndCategoryMember(dynamic json) {
    return ProductAndCategoryMember(
        entityId: create_id_from('ProductAndCategoryMember', ['productId', 'fromDate', 'productCategoryId'], json),
        sequenceNum: json['sequenceNum'] as int,
        originGeoId: json['originGeoId'] as String,
        detailScreen: json['detailScreen'] as String,
        requireInventory: json['requireInventory'] as String,
        quantityUomId: json['quantityUomId'] as String,
        mediumImageUrl: json['mediumImageUrl'] as String,
        productName: json['productName'] as String,
        introductionDate: check_dt(json['introductionDate']),
        shippingHeight: json['shippingHeight'] as double,
        originalImageUrl: json['originalImageUrl'] as String,
        inShippingBox: json['inShippingBox'] as String,
        detailImageUrl: json['detailImageUrl'] as String,
        supportDiscontinuationDate: check_dt(json['supportDiscontinuationDate']),
        productWidth: json['productWidth'] as double,
        includeInPromotions: json['includeInPromotions'] as String,
        configId: json['configId'] as String,
        billOfMaterialLevel: json['billOfMaterialLevel'] as int,
        memberComments: json['memberComments'] as String,
        lotIdFilledIn: json['lotIdFilledIn'] as String,
        productRating: json['productRating'] as double,
        createdByUserLogin: json['createdByUserLogin'] as String,
        brandName: json['brandName'] as String,
        requireAmount: json['requireAmount'] as String,
        productId: json['productId'] as String,
        smallImageUrl: json['smallImageUrl'] as String,
        taxable: json['taxable'] as String,
        primaryProductCategoryId: json['primaryProductCategoryId'] as String,
        salesDiscontinuationDate: check_dt(json['salesDiscontinuationDate']),
        thruDate: check_dt(json['thruDate']),
        salesDiscWhenNotAvail: json['salesDiscWhenNotAvail'] as String,
        fromDate: check_dt(json['fromDate']),
        returnable: json['returnable'] as String,
        weightUomId: json['weightUomId'] as String,
        isVirtual: json['isVirtual'] as String,
        priceDetailText: json['priceDetailText'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        widthUomId: json['widthUomId'] as String,
        longDescription: json['longDescription'] as String,
        diameterUomId: json['diameterUomId'] as String,
        autoCreateKeywords: json['autoCreateKeywords'] as String,
        amountUomTypeId: json['amountUomTypeId'] as String,
        productDiameter: json['productDiameter'] as double,
        ratingTypeEnum: json['ratingTypeEnum'] as String,
        description: json['description'] as String,
        chargeShipping: json['chargeShipping'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        quantityIncluded: json['quantityIncluded'] as double,
        heightUomId: json['heightUomId'] as String,
        internalName: json['internalName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        virtualVariantMethodEnum: json['virtualVariantMethodEnum'] as String,
        productCategoryId: json['productCategoryId'] as String,
        shippingWeight: json['shippingWeight'] as double,
        shippingWidth: json['shippingWidth'] as double,
        shippingDepth: json['shippingDepth'] as double,
        reservMaxPersons: json['reservMaxPersons'] as double,
        fixedAmount: json['fixedAmount'] as double,
        inventoryItemTypeId: json['inventoryItemTypeId'] as String,
        piecesIncluded: json['piecesIncluded'] as int,
        productDepth: json['productDepth'] as double,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        quantity: json['quantity'] as double,
        releaseDate: check_dt(json['releaseDate']),
        productHeight: json['productHeight'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        defaultShipmentBoxTypeId: json['defaultShipmentBoxTypeId'] as String,
        orderDecimalQuantity: json['orderDecimalQuantity'] as String,
        inventoryMessage: json['inventoryMessage'] as String,
        productWeight: json['productWeight'] as double,
        depthUomId: json['depthUomId'] as String,
        productTypeId: json['productTypeId'] as String,
        createdDate: check_dt(json['createdDate']),
        isVariant: json['isVariant'] as String,
        largeImageUrl: json['largeImageUrl'] as String,
        requirementMethodEnumId: json['requirementMethodEnumId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductAndCategoryMember overridesProductAndCategoryMember(Map<String, dynamic> map) {
    return ProductAndCategoryMember(
        entityId: create_id_from('ProductAndCategoryMember', ['productId', 'fromDate', 'productCategoryId'], map),
        sequenceNum: map['sequenceNum'],
        originGeoId: map['originGeoId'],
        detailScreen: map['detailScreen'],
        requireInventory: map['requireInventory'],
        quantityUomId: map['quantityUomId'],
        mediumImageUrl: map['mediumImageUrl'],
        productName: map['productName'],
        introductionDate: map['introductionDate'],
        shippingHeight: map['shippingHeight'],
        originalImageUrl: map['originalImageUrl'],
        inShippingBox: map['inShippingBox'],
        detailImageUrl: map['detailImageUrl'],
        supportDiscontinuationDate: map['supportDiscontinuationDate'],
        productWidth: map['productWidth'],
        includeInPromotions: map['includeInPromotions'],
        configId: map['configId'],
        billOfMaterialLevel: map['billOfMaterialLevel'],
        memberComments: map['memberComments'],
        lotIdFilledIn: map['lotIdFilledIn'],
        productRating: map['productRating'],
        createdByUserLogin: map['createdByUserLogin'],
        brandName: map['brandName'],
        requireAmount: map['requireAmount'],
        productId: map['productId'],
        smallImageUrl: map['smallImageUrl'],
        taxable: map['taxable'],
        primaryProductCategoryId: map['primaryProductCategoryId'],
        salesDiscontinuationDate: map['salesDiscontinuationDate'],
        thruDate: map['thruDate'],
        salesDiscWhenNotAvail: map['salesDiscWhenNotAvail'],
        fromDate: map['fromDate'],
        returnable: map['returnable'],
        weightUomId: map['weightUomId'],
        isVirtual: map['isVirtual'],
        priceDetailText: map['priceDetailText'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        widthUomId: map['widthUomId'],
        longDescription: map['longDescription'],
        diameterUomId: map['diameterUomId'],
        autoCreateKeywords: map['autoCreateKeywords'],
        amountUomTypeId: map['amountUomTypeId'],
        productDiameter: map['productDiameter'],
        ratingTypeEnum: map['ratingTypeEnum'],
        description: map['description'],
        chargeShipping: map['chargeShipping'],
        reservNthPPPerc: map['reservNthPPPerc'],
        quantityIncluded: map['quantityIncluded'],
        heightUomId: map['heightUomId'],
        internalName: map['internalName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        virtualVariantMethodEnum: map['virtualVariantMethodEnum'],
        productCategoryId: map['productCategoryId'],
        shippingWeight: map['shippingWeight'],
        shippingWidth: map['shippingWidth'],
        shippingDepth: map['shippingDepth'],
        reservMaxPersons: map['reservMaxPersons'],
        fixedAmount: map['fixedAmount'],
        inventoryItemTypeId: map['inventoryItemTypeId'],
        piecesIncluded: map['piecesIncluded'],
        productDepth: map['productDepth'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        quantity: map['quantity'],
        releaseDate: map['releaseDate'],
        productHeight: map['productHeight'],
        lastModifiedDate: map['lastModifiedDate'],
        defaultShipmentBoxTypeId: map['defaultShipmentBoxTypeId'],
        orderDecimalQuantity: map['orderDecimalQuantity'],
        inventoryMessage: map['inventoryMessage'],
        productWeight: map['productWeight'],
        depthUomId: map['depthUomId'],
        productTypeId: map['productTypeId'],
        createdDate: map['createdDate'],
        isVariant: map['isVariant'],
        largeImageUrl: map['largeImageUrl'],
        requirementMethodEnumId: map['requirementMethodEnumId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategory extractProductCategory(dynamic json) {
    return ProductCategory(
        entityId: create_id_from('ProductCategory', ['productCategoryId'], json),
        longDescription: json['longDescription'] as String,
        productCategoryTypeId: json['productCategoryTypeId'] as String,
        detailScreen: json['detailScreen'] as String,
        description: json['description'] as String,
        linkTwoImageUrl: json['linkTwoImageUrl'] as String,
        categoryName: json['categoryName'] as String,
        productCategoryId: json['productCategoryId'] as String,
        linkOneImageUrl: json['linkOneImageUrl'] as String,
        primaryParentCategoryId: json['primaryParentCategoryId'] as String,
        categoryImageUrl: json['categoryImageUrl'] as String,
        showInSelect: json['showInSelect'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategory overridesProductCategory(Map<String, dynamic> map) {
    return ProductCategory(
        entityId: create_id_from('ProductCategory', ['productCategoryId'], map),
        longDescription: map['longDescription'],
        productCategoryTypeId: map['productCategoryTypeId'],
        detailScreen: map['detailScreen'],
        description: map['description'],
        linkTwoImageUrl: map['linkTwoImageUrl'],
        categoryName: map['categoryName'],
        productCategoryId: map['productCategoryId'],
        linkOneImageUrl: map['linkOneImageUrl'],
        primaryParentCategoryId: map['primaryParentCategoryId'],
        categoryImageUrl: map['categoryImageUrl'],
        showInSelect: map['showInSelect'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryAndMember extractProductCategoryAndMember(dynamic json) {
    return ProductCategoryAndMember(
        entityId: create_id_from('ProductCategoryAndMember', ['productCategoryId', 'fromDate', 'productId'], json),
        longDescription: json['longDescription'] as String,
        productCategoryTypeId: json['productCategoryTypeId'] as String,
        comments: json['comments'] as String,
        quantity: json['quantity'] as double,
        productId: json['productId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        detailScreen: json['detailScreen'] as String,
        description: json['description'] as String,
        linkTwoImageUrl: json['linkTwoImageUrl'] as String,
        categoryName: json['categoryName'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        productCategoryId: json['productCategoryId'] as String,
        linkOneImageUrl: json['linkOneImageUrl'] as String,
        primaryParentCategoryId: json['primaryParentCategoryId'] as String,
        categoryImageUrl: json['categoryImageUrl'] as String,
        showInSelect: json['showInSelect'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryAndMember overridesProductCategoryAndMember(Map<String, dynamic> map) {
    return ProductCategoryAndMember(
        entityId: create_id_from('ProductCategoryAndMember', ['productCategoryId', 'fromDate', 'productId'], map),
        longDescription: map['longDescription'],
        productCategoryTypeId: map['productCategoryTypeId'],
        comments: map['comments'],
        quantity: map['quantity'],
        productId: map['productId'],
        sequenceNum: map['sequenceNum'],
        detailScreen: map['detailScreen'],
        description: map['description'],
        linkTwoImageUrl: map['linkTwoImageUrl'],
        categoryName: map['categoryName'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        productCategoryId: map['productCategoryId'],
        linkOneImageUrl: map['linkOneImageUrl'],
        primaryParentCategoryId: map['primaryParentCategoryId'],
        categoryImageUrl: map['categoryImageUrl'],
        showInSelect: map['showInSelect'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryAttribute extractProductCategoryAttribute(dynamic json) {
    return ProductCategoryAttribute(
        entityId: create_id_from('ProductCategoryAttribute', ['productCategoryId', 'attrName'], json),
        productCategoryId: json['productCategoryId'] as String,
        attrDescription: json['attrDescription'] as String,
        attrValue: json['attrValue'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryAttribute overridesProductCategoryAttribute(Map<String, dynamic> map) {
    return ProductCategoryAttribute(
        entityId: create_id_from('ProductCategoryAttribute', ['productCategoryId', 'attrName'], map),
        productCategoryId: map['productCategoryId'],
        attrDescription: map['attrDescription'],
        attrValue: map['attrValue'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryContent extractProductCategoryContent(dynamic json) {
    return ProductCategoryContent(
        entityId: create_id_from('ProductCategoryContent', ['productCategoryId', 'contentId', 'prodCatContentTypeId', 'fromDate'], json),
        purchaseFromDate: check_dt(json['purchaseFromDate']),
        contentId: json['contentId'] as String,
        useDaysLimit: json['useDaysLimit'] as double,
        useCountLimit: json['useCountLimit'] as int,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        prodCatContentTypeId: json['prodCatContentTypeId'] as String,
        productCategoryId: json['productCategoryId'] as String,
        purchaseThruDate: check_dt(json['purchaseThruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryContent overridesProductCategoryContent(Map<String, dynamic> map) {
    return ProductCategoryContent(
        entityId: create_id_from('ProductCategoryContent', ['productCategoryId', 'contentId', 'prodCatContentTypeId', 'fromDate'], map),
        purchaseFromDate: map['purchaseFromDate'],
        contentId: map['contentId'],
        useDaysLimit: map['useDaysLimit'],
        useCountLimit: map['useCountLimit'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        prodCatContentTypeId: map['prodCatContentTypeId'],
        productCategoryId: map['productCategoryId'],
        purchaseThruDate: map['purchaseThruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryContentAndInfo extractProductCategoryContentAndInfo(dynamic json) {
    return ProductCategoryContentAndInfo(
        entityId: create_id_from('ProductCategoryContentAndInfo', ['contentId', 'fromDate', 'prodCatContentTypeId', 'productCategoryId', 'drDataResourceId'], json),
        ownerContentId: json['ownerContentId'] as String,
        useDaysLimit: json['useDaysLimit'] as double,
        mimeTypeId: json['mimeTypeId'] as String,
        drRelatedDetailId: json['drRelatedDetailId'] as String,
        drIsPublic: json['drIsPublic'] as String,
        drCreatedByUserLogin: json['drCreatedByUserLogin'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        drDataTemplateTypeId: json['drDataTemplateTypeId'] as String,
        dataResourceId: json['dataResourceId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        drObjectInfo: json['drObjectInfo'] as String,
        instanceOfContentId: json['instanceOfContentId'] as String,
        useCountLimit: json['useCountLimit'] as int,
        drCharacterSetId: json['drCharacterSetId'] as String,
        drLastModifiedByUserLogin: json['drLastModifiedByUserLogin'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        prodCatContentTypeId: json['prodCatContentTypeId'] as String,
        drCreatedDate: check_dt(json['drCreatedDate']),
        statusId: json['statusId'] as String,
        drDataResourceName: json['drDataResourceName'] as String,
        drMimeTypeId: json['drMimeTypeId'] as String,
        childBranchCount: json['childBranchCount'] as int,
        drDataResourceId: json['drDataResourceId'] as String,
        drSurveyResponseId: json['drSurveyResponseId'] as String,
        drStatusId: json['drStatusId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        description: json['description'] as String,
        childLeafCount: json['childLeafCount'] as int,
        drDataCategoryId: json['drDataCategoryId'] as String,
        drDataResourceTypeId: json['drDataResourceTypeId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        productCategoryId: json['productCategoryId'] as String,
        drSurveyId: json['drSurveyId'] as String,
        purchaseFromDate: check_dt(json['purchaseFromDate']),
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        contentName: json['contentName'] as String,
        createdDate: check_dt(json['createdDate']),
        localeString: json['localeString'] as String,
        drLastModifiedDate: check_dt(json['drLastModifiedDate']),
        drDataSourceId: json['drDataSourceId'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        purchaseThruDate: check_dt(json['purchaseThruDate']),
        drLocaleString: json['drLocaleString'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryContentAndInfo overridesProductCategoryContentAndInfo(Map<String, dynamic> map) {
    return ProductCategoryContentAndInfo(
        entityId: create_id_from('ProductCategoryContentAndInfo', ['contentId', 'fromDate', 'prodCatContentTypeId', 'productCategoryId', 'drDataResourceId'], map),
        ownerContentId: map['ownerContentId'],
        useDaysLimit: map['useDaysLimit'],
        mimeTypeId: map['mimeTypeId'],
        drRelatedDetailId: map['drRelatedDetailId'],
        drIsPublic: map['drIsPublic'],
        drCreatedByUserLogin: map['drCreatedByUserLogin'],
        privilegeEnumId: map['privilegeEnumId'],
        drDataTemplateTypeId: map['drDataTemplateTypeId'],
        dataResourceId: map['dataResourceId'],
        createdByUserLogin: map['createdByUserLogin'],
        drObjectInfo: map['drObjectInfo'],
        instanceOfContentId: map['instanceOfContentId'],
        useCountLimit: map['useCountLimit'],
        drCharacterSetId: map['drCharacterSetId'],
        drLastModifiedByUserLogin: map['drLastModifiedByUserLogin'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        prodCatContentTypeId: map['prodCatContentTypeId'],
        drCreatedDate: map['drCreatedDate'],
        statusId: map['statusId'],
        drDataResourceName: map['drDataResourceName'],
        drMimeTypeId: map['drMimeTypeId'],
        childBranchCount: map['childBranchCount'],
        drDataResourceId: map['drDataResourceId'],
        drSurveyResponseId: map['drSurveyResponseId'],
        drStatusId: map['drStatusId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        description: map['description'],
        childLeafCount: map['childLeafCount'],
        drDataCategoryId: map['drDataCategoryId'],
        drDataResourceTypeId: map['drDataResourceTypeId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        productCategoryId: map['productCategoryId'],
        drSurveyId: map['drSurveyId'],
        purchaseFromDate: map['purchaseFromDate'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        contentName: map['contentName'],
        createdDate: map['createdDate'],
        localeString: map['localeString'],
        drLastModifiedDate: map['drLastModifiedDate'],
        drDataSourceId: map['drDataSourceId'],
        decoratorContentId: map['decoratorContentId'],
        purchaseThruDate: map['purchaseThruDate'],
        drLocaleString: map['drLocaleString'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryContentType extractProductCategoryContentType(dynamic json) {
    return ProductCategoryContentType(
        entityId: create_id_from('ProductCategoryContentType', ['prodCatContentTypeId'], json),
        prodCatContentTypeId: json['prodCatContentTypeId'] as String,
        parentTypeId: json['parentTypeId'] as String,
        hasTable: json['hasTable'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryContentType overridesProductCategoryContentType(Map<String, dynamic> map) {
    return ProductCategoryContentType(
        entityId: create_id_from('ProductCategoryContentType', ['prodCatContentTypeId'], map),
        prodCatContentTypeId: map['prodCatContentTypeId'],
        parentTypeId: map['parentTypeId'],
        hasTable: map['hasTable'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryGlAccount extractProductCategoryGlAccount(dynamic json) {
    return ProductCategoryGlAccount(
        entityId: create_id_from('ProductCategoryGlAccount', ['productCategoryId', 'organizationPartyId', 'glAccountTypeId'], json),
        productCategoryId: json['productCategoryId'] as String,
        glAccountTypeId: json['glAccountTypeId'] as String,
        glAccountId: json['glAccountId'] as String,
        organizationPartyId: json['organizationPartyId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryGlAccount overridesProductCategoryGlAccount(Map<String, dynamic> map) {
    return ProductCategoryGlAccount(
        entityId: create_id_from('ProductCategoryGlAccount', ['productCategoryId', 'organizationPartyId', 'glAccountTypeId'], map),
        productCategoryId: map['productCategoryId'],
        glAccountTypeId: map['glAccountTypeId'],
        glAccountId: map['glAccountId'],
        organizationPartyId: map['organizationPartyId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryLink extractProductCategoryLink(dynamic json) {
    return ProductCategoryLink(
        entityId: create_id_from('ProductCategoryLink', ['productCategoryId', 'linkSeqId', 'fromDate'], json),
        linkInfo: json['linkInfo'] as String,
        comments: json['comments'] as String,
        sequenceNum: json['sequenceNum'] as int,
        detailText: json['detailText'] as String,
        thruDate: check_dt(json['thruDate']),
        detailSubScreen: json['detailSubScreen'] as String,
        fromDate: check_dt(json['fromDate']),
        productCategoryId: json['productCategoryId'] as String,
        titleText: json['titleText'] as String,
        imageUrl: json['imageUrl'] as String,
        imageTwoUrl: json['imageTwoUrl'] as String,
        linkTypeEnumId: json['linkTypeEnumId'] as String,
        linkSeqId: json['linkSeqId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryLink overridesProductCategoryLink(Map<String, dynamic> map) {
    return ProductCategoryLink(
        entityId: create_id_from('ProductCategoryLink', ['productCategoryId', 'linkSeqId', 'fromDate'], map),
        linkInfo: map['linkInfo'],
        comments: map['comments'],
        sequenceNum: map['sequenceNum'],
        detailText: map['detailText'],
        thruDate: map['thruDate'],
        detailSubScreen: map['detailSubScreen'],
        fromDate: map['fromDate'],
        productCategoryId: map['productCategoryId'],
        titleText: map['titleText'],
        imageUrl: map['imageUrl'],
        imageTwoUrl: map['imageTwoUrl'],
        linkTypeEnumId: map['linkTypeEnumId'],
        linkSeqId: map['linkSeqId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryMember extractProductCategoryMember(dynamic json) {
    return ProductCategoryMember(
        entityId: create_id_from('ProductCategoryMember', ['productCategoryId', 'productId', 'fromDate'], json),
        fromDate: check_dt(json['fromDate']),
        productCategoryId: json['productCategoryId'] as String,
        comments: json['comments'] as String,
        quantity: json['quantity'] as double,
        productId: json['productId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryMember overridesProductCategoryMember(Map<String, dynamic> map) {
    return ProductCategoryMember(
        entityId: create_id_from('ProductCategoryMember', ['productCategoryId', 'productId', 'fromDate'], map),
        fromDate: map['fromDate'],
        productCategoryId: map['productCategoryId'],
        comments: map['comments'],
        quantity: map['quantity'],
        productId: map['productId'],
        sequenceNum: map['sequenceNum'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryMemberAndPrice extractProductCategoryMemberAndPrice(dynamic json) {
    return ProductCategoryMemberAndPrice(
        entityId: create_id_from('ProductCategoryMemberAndPrice', ['fromDate', 'productCategoryId', 'productId', 'priceProductStoreGroupId', 'priceProductPricePurposeId', 'priceFromDate', 'priceCurrencyUomId', 'priceProductPriceTypeId'], json),
        productProductWeight: json['productProductWeight'] as double,
        productProductTypeId: json['productProductTypeId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        productPriceDetailText: json['productPriceDetailText'] as String,
        productIsVariant: json['productIsVariant'] as String,
        productReservNthPPPerc: json['productReservNthPPPerc'] as double,
        priceProductPricePurposeId: json['priceProductPricePurposeId'] as String,
        productSmallImageUrl: json['productSmallImageUrl'] as String,
        priceProductPriceTypeId: json['priceProductPriceTypeId'] as String,
        pricePriceWithoutTax: json['pricePriceWithoutTax'] as double,
        productReserv2ndPPPerc: json['productReserv2ndPPPerc'] as double,
        priceLastModifiedDate: check_dt(json['priceLastModifiedDate']),
        productQuantityIncluded: json['productQuantityIncluded'] as double,
        productRatingTypeEnum: json['productRatingTypeEnum'] as String,
        productLotIdFilledIn: json['productLotIdFilledIn'] as String,
        priceCustomPriceCalcService: json['priceCustomPriceCalcService'] as String,
        productReturnable: json['productReturnable'] as String,
        productAmountUomTypeId: json['productAmountUomTypeId'] as String,
        productProductDiameter: json['productProductDiameter'] as double,
        productInShippingBox: json['productInShippingBox'] as String,
        productDescription: json['productDescription'] as String,
        productQuantityUomId: json['productQuantityUomId'] as String,
        productId: json['productId'] as String,
        productLastModifiedDate: check_dt(json['productLastModifiedDate']),
        priceFromDate: check_dt(json['priceFromDate']),
        productIsVirtual: json['productIsVirtual'] as String,
        priceProductStoreGroupId: json['priceProductStoreGroupId'] as String,
        productConfigId: json['productConfigId'] as String,
        productCreatedByUserLogin: json['productCreatedByUserLogin'] as String,
        productPiecesIncluded: json['productPiecesIncluded'] as int,
        productDefaultShipmentBoxTypeId: json['productDefaultShipmentBoxTypeId'] as String,
        productDepthUomId: json['productDepthUomId'] as String,
        productWeightUomId: json['productWeightUomId'] as String,
        productInventoryMessage: json['productInventoryMessage'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        productTaxable: json['productTaxable'] as String,
        productChargeShipping: json['productChargeShipping'] as String,
        productVirtualVariantMethodEnum: json['productVirtualVariantMethodEnum'] as String,
        productOrderDecimalQuantity: json['productOrderDecimalQuantity'] as String,
        productProductHeight: json['productProductHeight'] as double,
        productAutoCreateKeywords: json['productAutoCreateKeywords'] as String,
        priceTaxAuthPartyId: json['priceTaxAuthPartyId'] as String,
        productShippingWeight: json['productShippingWeight'] as double,
        productIntroductionDate: check_dt(json['productIntroductionDate']),
        productMediumImageUrl: json['productMediumImageUrl'] as String,
        productSalesDiscWhenNotAvail: json['productSalesDiscWhenNotAvail'] as String,
        priceCreatedDate: check_dt(json['priceCreatedDate']),
        productRequireAmount: json['productRequireAmount'] as String,
        productLargeImageUrl: json['productLargeImageUrl'] as String,
        priceTaxAuthGeoId: json['priceTaxAuthGeoId'] as String,
        productBillOfMaterialLevel: json['productBillOfMaterialLevel'] as int,
        productRequireInventory: json['productRequireInventory'] as String,
        priceThruDate: check_dt(json['priceThruDate']),
        productBrandName: json['productBrandName'] as String,
        productShippingDepth: json['productShippingDepth'] as double,
        productShippingWidth: json['productShippingWidth'] as double,
        productLastModifiedByUserLogin: json['productLastModifiedByUserLogin'] as String,
        productCategoryId: json['productCategoryId'] as String,
        productIncludeInPromotions: json['productIncludeInPromotions'] as String,
        productComments: json['productComments'] as String,
        productShippingHeight: json['productShippingHeight'] as double,
        priceTaxInPrice: json['priceTaxInPrice'] as String,
        productDetailScreen: json['productDetailScreen'] as String,
        productProductName: json['productProductName'] as String,
        productInventoryItemTypeId: json['productInventoryItemTypeId'] as String,
        priceCreatedByUserLogin: json['priceCreatedByUserLogin'] as String,
        priceTaxPercentage: json['priceTaxPercentage'] as double,
        productWidthUomId: json['productWidthUomId'] as String,
        priceLastModifiedByUserLogin: json['priceLastModifiedByUserLogin'] as String,
        priceTaxAmount: json['priceTaxAmount'] as double,
        productProductRating: json['productProductRating'] as double,
        comments: json['comments'] as String,
        quantity: json['quantity'] as double,
        productSalesDiscontinuationDate: check_dt(json['productSalesDiscontinuationDate']),
        productInternalName: json['productInternalName'] as String,
        pricePriceWithTax: json['pricePriceWithTax'] as double,
        productCreatedDate: check_dt(json['productCreatedDate']),
        priceTermUomId: json['priceTermUomId'] as String,
        productPrimaryProductCategoryId: json['productPrimaryProductCategoryId'] as String,
        priceCurrencyUomId: json['priceCurrencyUomId'] as String,
        productSupportDiscontinuationDate: check_dt(json['productSupportDiscontinuationDate']),
        productFixedAmount: json['productFixedAmount'] as double,
        productReleaseDate: check_dt(json['productReleaseDate']),
        productProductDepth: json['productProductDepth'] as double,
        productOriginalImageUrl: json['productOriginalImageUrl'] as String,
        productLongDescription: json['productLongDescription'] as String,
        pricePrice: json['pricePrice'] as double,
        productOriginGeoId: json['productOriginGeoId'] as String,
        productDetailImageUrl: json['productDetailImageUrl'] as String,
        productProductWidth: json['productProductWidth'] as double,
        productReservMaxPersons: json['productReservMaxPersons'] as double,
        productRequirementMethodEnumId: json['productRequirementMethodEnumId'] as String,
        productFacilityId: json['productFacilityId'] as String,
        productDiameterUomId: json['productDiameterUomId'] as String,
        productHeightUomId: json['productHeightUomId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryMemberAndPrice overridesProductCategoryMemberAndPrice(Map<String, dynamic> map) {
    return ProductCategoryMemberAndPrice(
        entityId: create_id_from('ProductCategoryMemberAndPrice', ['fromDate', 'productCategoryId', 'productId', 'priceProductStoreGroupId', 'priceProductPricePurposeId', 'priceFromDate', 'priceCurrencyUomId', 'priceProductPriceTypeId'], map),
        productProductWeight: map['productProductWeight'],
        productProductTypeId: map['productProductTypeId'],
        sequenceNum: map['sequenceNum'],
        productPriceDetailText: map['productPriceDetailText'],
        productIsVariant: map['productIsVariant'],
        productReservNthPPPerc: map['productReservNthPPPerc'],
        priceProductPricePurposeId: map['priceProductPricePurposeId'],
        productSmallImageUrl: map['productSmallImageUrl'],
        priceProductPriceTypeId: map['priceProductPriceTypeId'],
        pricePriceWithoutTax: map['pricePriceWithoutTax'],
        productReserv2ndPPPerc: map['productReserv2ndPPPerc'],
        priceLastModifiedDate: map['priceLastModifiedDate'],
        productQuantityIncluded: map['productQuantityIncluded'],
        productRatingTypeEnum: map['productRatingTypeEnum'],
        productLotIdFilledIn: map['productLotIdFilledIn'],
        priceCustomPriceCalcService: map['priceCustomPriceCalcService'],
        productReturnable: map['productReturnable'],
        productAmountUomTypeId: map['productAmountUomTypeId'],
        productProductDiameter: map['productProductDiameter'],
        productInShippingBox: map['productInShippingBox'],
        productDescription: map['productDescription'],
        productQuantityUomId: map['productQuantityUomId'],
        productId: map['productId'],
        productLastModifiedDate: map['productLastModifiedDate'],
        priceFromDate: map['priceFromDate'],
        productIsVirtual: map['productIsVirtual'],
        priceProductStoreGroupId: map['priceProductStoreGroupId'],
        productConfigId: map['productConfigId'],
        productCreatedByUserLogin: map['productCreatedByUserLogin'],
        productPiecesIncluded: map['productPiecesIncluded'],
        productDefaultShipmentBoxTypeId: map['productDefaultShipmentBoxTypeId'],
        productDepthUomId: map['productDepthUomId'],
        productWeightUomId: map['productWeightUomId'],
        productInventoryMessage: map['productInventoryMessage'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        productTaxable: map['productTaxable'],
        productChargeShipping: map['productChargeShipping'],
        productVirtualVariantMethodEnum: map['productVirtualVariantMethodEnum'],
        productOrderDecimalQuantity: map['productOrderDecimalQuantity'],
        productProductHeight: map['productProductHeight'],
        productAutoCreateKeywords: map['productAutoCreateKeywords'],
        priceTaxAuthPartyId: map['priceTaxAuthPartyId'],
        productShippingWeight: map['productShippingWeight'],
        productIntroductionDate: map['productIntroductionDate'],
        productMediumImageUrl: map['productMediumImageUrl'],
        productSalesDiscWhenNotAvail: map['productSalesDiscWhenNotAvail'],
        priceCreatedDate: map['priceCreatedDate'],
        productRequireAmount: map['productRequireAmount'],
        productLargeImageUrl: map['productLargeImageUrl'],
        priceTaxAuthGeoId: map['priceTaxAuthGeoId'],
        productBillOfMaterialLevel: map['productBillOfMaterialLevel'],
        productRequireInventory: map['productRequireInventory'],
        priceThruDate: map['priceThruDate'],
        productBrandName: map['productBrandName'],
        productShippingDepth: map['productShippingDepth'],
        productShippingWidth: map['productShippingWidth'],
        productLastModifiedByUserLogin: map['productLastModifiedByUserLogin'],
        productCategoryId: map['productCategoryId'],
        productIncludeInPromotions: map['productIncludeInPromotions'],
        productComments: map['productComments'],
        productShippingHeight: map['productShippingHeight'],
        priceTaxInPrice: map['priceTaxInPrice'],
        productDetailScreen: map['productDetailScreen'],
        productProductName: map['productProductName'],
        productInventoryItemTypeId: map['productInventoryItemTypeId'],
        priceCreatedByUserLogin: map['priceCreatedByUserLogin'],
        priceTaxPercentage: map['priceTaxPercentage'],
        productWidthUomId: map['productWidthUomId'],
        priceLastModifiedByUserLogin: map['priceLastModifiedByUserLogin'],
        priceTaxAmount: map['priceTaxAmount'],
        productProductRating: map['productProductRating'],
        comments: map['comments'],
        quantity: map['quantity'],
        productSalesDiscontinuationDate: map['productSalesDiscontinuationDate'],
        productInternalName: map['productInternalName'],
        pricePriceWithTax: map['pricePriceWithTax'],
        productCreatedDate: map['productCreatedDate'],
        priceTermUomId: map['priceTermUomId'],
        productPrimaryProductCategoryId: map['productPrimaryProductCategoryId'],
        priceCurrencyUomId: map['priceCurrencyUomId'],
        productSupportDiscontinuationDate: map['productSupportDiscontinuationDate'],
        productFixedAmount: map['productFixedAmount'],
        productReleaseDate: map['productReleaseDate'],
        productProductDepth: map['productProductDepth'],
        productOriginalImageUrl: map['productOriginalImageUrl'],
        productLongDescription: map['productLongDescription'],
        pricePrice: map['pricePrice'],
        productOriginGeoId: map['productOriginGeoId'],
        productDetailImageUrl: map['productDetailImageUrl'],
        productProductWidth: map['productProductWidth'],
        productReservMaxPersons: map['productReservMaxPersons'],
        productRequirementMethodEnumId: map['productRequirementMethodEnumId'],
        productFacilityId: map['productFacilityId'],
        productDiameterUomId: map['productDiameterUomId'],
        productHeightUomId: map['productHeightUomId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryMemberAndRole extractProductCategoryMemberAndRole(dynamic json) {
    return ProductCategoryMemberAndRole(
        entityId: create_id_from('ProductCategoryMemberAndRole', ['productId', 'productCategoryId', 'fromDate', 'partyId', 'roleTypeId', 'roleFromDate'], json),
        fromDate: check_dt(json['fromDate']),
        roleTypeId: json['roleTypeId'] as String,
        productCategoryId: json['productCategoryId'] as String,
        comments: json['comments'] as String,
        quantity: json['quantity'] as double,
        productId: json['productId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        roleComments: json['roleComments'] as String,
        partyId: json['partyId'] as String,
        roleFromDate: check_dt(json['roleFromDate']),
        roleThruDate: check_dt(json['roleThruDate']),
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryMemberAndRole overridesProductCategoryMemberAndRole(Map<String, dynamic> map) {
    return ProductCategoryMemberAndRole(
        entityId: create_id_from('ProductCategoryMemberAndRole', ['productId', 'productCategoryId', 'fromDate', 'partyId', 'roleTypeId', 'roleFromDate'], map),
        fromDate: map['fromDate'],
        roleTypeId: map['roleTypeId'],
        productCategoryId: map['productCategoryId'],
        comments: map['comments'],
        quantity: map['quantity'],
        productId: map['productId'],
        sequenceNum: map['sequenceNum'],
        roleComments: map['roleComments'],
        partyId: map['partyId'],
        roleFromDate: map['roleFromDate'],
        roleThruDate: map['roleThruDate'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryRole extractProductCategoryRole(dynamic json) {
    return ProductCategoryRole(
        entityId: create_id_from('ProductCategoryRole', ['productCategoryId', 'partyId', 'roleTypeId', 'fromDate'], json),
        fromDate: check_dt(json['fromDate']),
        roleTypeId: json['roleTypeId'] as String,
        productCategoryId: json['productCategoryId'] as String,
        comments: json['comments'] as String,
        partyId: json['partyId'] as String,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryRole overridesProductCategoryRole(Map<String, dynamic> map) {
    return ProductCategoryRole(
        entityId: create_id_from('ProductCategoryRole', ['productCategoryId', 'partyId', 'roleTypeId', 'fromDate'], map),
        fromDate: map['fromDate'],
        roleTypeId: map['roleTypeId'],
        productCategoryId: map['productCategoryId'],
        comments: map['comments'],
        partyId: map['partyId'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryRollup extractProductCategoryRollup(dynamic json) {
    return ProductCategoryRollup(
        entityId: create_id_from('ProductCategoryRollup', ['productCategoryId', 'parentProductCategoryId', 'fromDate'], json),
        fromDate: check_dt(json['fromDate']),
        productCategoryId: json['productCategoryId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        parentProductCategoryId: json['parentProductCategoryId'] as String,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryRollup overridesProductCategoryRollup(Map<String, dynamic> map) {
    return ProductCategoryRollup(
        entityId: create_id_from('ProductCategoryRollup', ['productCategoryId', 'parentProductCategoryId', 'fromDate'], map),
        fromDate: map['fromDate'],
        productCategoryId: map['productCategoryId'],
        sequenceNum: map['sequenceNum'],
        parentProductCategoryId: map['parentProductCategoryId'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryRollupAndChild extractProductCategoryRollupAndChild(dynamic json) {
    return ProductCategoryRollupAndChild(
        entityId: create_id_from('ProductCategoryRollupAndChild', ['parentProductCategoryId', 'fromDate', 'productCategoryId'], json),
        longDescription: json['longDescription'] as String,
        productCategoryTypeId: json['productCategoryTypeId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        detailScreen: json['detailScreen'] as String,
        description: json['description'] as String,
        linkTwoImageUrl: json['linkTwoImageUrl'] as String,
        categoryName: json['categoryName'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        productCategoryId: json['productCategoryId'] as String,
        linkOneImageUrl: json['linkOneImageUrl'] as String,
        primaryParentCategoryId: json['primaryParentCategoryId'] as String,
        categoryImageUrl: json['categoryImageUrl'] as String,
        showInSelect: json['showInSelect'] as String,
        parentProductCategoryId: json['parentProductCategoryId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryRollupAndChild overridesProductCategoryRollupAndChild(Map<String, dynamic> map) {
    return ProductCategoryRollupAndChild(
        entityId: create_id_from('ProductCategoryRollupAndChild', ['parentProductCategoryId', 'fromDate', 'productCategoryId'], map),
        longDescription: map['longDescription'],
        productCategoryTypeId: map['productCategoryTypeId'],
        sequenceNum: map['sequenceNum'],
        detailScreen: map['detailScreen'],
        description: map['description'],
        linkTwoImageUrl: map['linkTwoImageUrl'],
        categoryName: map['categoryName'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        productCategoryId: map['productCategoryId'],
        linkOneImageUrl: map['linkOneImageUrl'],
        primaryParentCategoryId: map['primaryParentCategoryId'],
        categoryImageUrl: map['categoryImageUrl'],
        showInSelect: map['showInSelect'],
        parentProductCategoryId: map['parentProductCategoryId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryRollupAndRole extractProductCategoryRollupAndRole(dynamic json) {
    return ProductCategoryRollupAndRole(
        entityId: create_id_from('ProductCategoryRollupAndRole', ['productCategoryId', 'parentProductCategoryId', 'fromDate', 'partyId', 'roleTypeId', 'roleFromDate'], json),
        fromDate: check_dt(json['fromDate']),
        roleTypeId: json['roleTypeId'] as String,
        productCategoryId: json['productCategoryId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        roleComments: json['roleComments'] as String,
        parentProductCategoryId: json['parentProductCategoryId'] as String,
        partyId: json['partyId'] as String,
        roleFromDate: check_dt(json['roleFromDate']),
        roleThruDate: check_dt(json['roleThruDate']),
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryRollupAndRole overridesProductCategoryRollupAndRole(Map<String, dynamic> map) {
    return ProductCategoryRollupAndRole(
        entityId: create_id_from('ProductCategoryRollupAndRole', ['productCategoryId', 'parentProductCategoryId', 'fromDate', 'partyId', 'roleTypeId', 'roleFromDate'], map),
        fromDate: map['fromDate'],
        roleTypeId: map['roleTypeId'],
        productCategoryId: map['productCategoryId'],
        sequenceNum: map['sequenceNum'],
        roleComments: map['roleComments'],
        parentProductCategoryId: map['parentProductCategoryId'],
        partyId: map['partyId'],
        roleFromDate: map['roleFromDate'],
        roleThruDate: map['roleThruDate'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryType extractProductCategoryType(dynamic json) {
    return ProductCategoryType(
        entityId: create_id_from('ProductCategoryType', ['productCategoryTypeId'], json),
        productCategoryTypeId: json['productCategoryTypeId'] as String,
        parentTypeId: json['parentTypeId'] as String,
        hasTable: json['hasTable'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryType overridesProductCategoryType(Map<String, dynamic> map) {
    return ProductCategoryType(
        entityId: create_id_from('ProductCategoryType', ['productCategoryTypeId'], map),
        productCategoryTypeId: map['productCategoryTypeId'],
        parentTypeId: map['parentTypeId'],
        hasTable: map['hasTable'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static ProductCategoryTypeAttr extractProductCategoryTypeAttr(dynamic json) {
    return ProductCategoryTypeAttr(
        entityId: create_id_from('ProductCategoryTypeAttr', ['productCategoryTypeId', 'attrName'], json),
        productCategoryTypeId: json['productCategoryTypeId'] as String,
        description: json['description'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ProductCategoryTypeAttr overridesProductCategoryTypeAttr(Map<String, dynamic> map) {
    return ProductCategoryTypeAttr(
        entityId: create_id_from('ProductCategoryTypeAttr', ['productCategoryTypeId', 'attrName'], map),
        productCategoryTypeId: map['productCategoryTypeId'],
        description: map['description'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

}