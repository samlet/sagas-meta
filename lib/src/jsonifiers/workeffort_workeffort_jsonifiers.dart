import 'package:sagas_meta/src/models/workeffort_workeffort.dart';
import 'package:sagas_meta/src/entity_base.dart';
import 'dart:convert';
import 'dart:typed_data';
import 'package:intl/intl.dart';

class WorkeffortWorkeffortJsonifier{
  static ApplicationSandbox extractApplicationSandbox(dynamic json) {
    return ApplicationSandbox(
        entityId: create_id_from('ApplicationSandbox', ['applicationId'], json),
        workEffortId: json['workEffortId'] as String,
        fromDate: check_dt(json['fromDate']),
        roleTypeId: json['roleTypeId'] as String,
        applicationId: json['applicationId'] as String,
        partyId: json['partyId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static ApplicationSandbox overridesApplicationSandbox(Map<String, dynamic> map) {
    return ApplicationSandbox(
        entityId: create_id_from('ApplicationSandbox', ['applicationId'], map),
        workEffortId: map['workEffortId'],
        fromDate: map['fromDate'],
        roleTypeId: map['roleTypeId'],
        applicationId: map['applicationId'],
        partyId: map['partyId'],
        runtimeDataId: map['runtimeDataId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static CommunicationEventWorkEff extractCommunicationEventWorkEff(dynamic json) {
    return CommunicationEventWorkEff(
        entityId: create_id_from('CommunicationEventWorkEff', ['workEffortId', 'communicationEventId'], json),
        workEffortId: json['workEffortId'] as String,
        communicationEventId: json['communicationEventId'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static CommunicationEventWorkEff overridesCommunicationEventWorkEff(Map<String, dynamic> map) {
    return CommunicationEventWorkEff(
        entityId: create_id_from('CommunicationEventWorkEff', ['workEffortId', 'communicationEventId'], map),
        workEffortId: map['workEffortId'],
        communicationEventId: map['communicationEventId'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static Deliverable extractDeliverable(dynamic json) {
    return Deliverable(
        entityId: create_id_from('Deliverable', ['deliverableId'], json),
        deliverableName: json['deliverableName'] as String,
        deliverableTypeId: json['deliverableTypeId'] as String,
        description: json['description'] as String,
        deliverableId: json['deliverableId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static Deliverable overridesDeliverable(Map<String, dynamic> map) {
    return Deliverable(
        entityId: create_id_from('Deliverable', ['deliverableId'], map),
        deliverableName: map['deliverableName'],
        deliverableTypeId: map['deliverableTypeId'],
        description: map['description'],
        deliverableId: map['deliverableId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static DeliverableType extractDeliverableType(dynamic json) {
    return DeliverableType(
        entityId: create_id_from('DeliverableType', ['deliverableTypeId'], json),
        deliverableTypeId: json['deliverableTypeId'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static DeliverableType overridesDeliverableType(Map<String, dynamic> map) {
    return DeliverableType(
        entityId: create_id_from('DeliverableType', ['deliverableTypeId'], map),
        deliverableTypeId: map['deliverableTypeId'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffort extractWorkEffort(dynamic json) {
    return WorkEffort(
        entityId: create_id_from('WorkEffort', ['workEffortId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        revisionNumber: json['revisionNumber'] as int,
        tempExprId: json['tempExprId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        specialTerms: json['specialTerms'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        moneyUomId: json['moneyUomId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        facilityId: json['facilityId'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffort overridesWorkEffort(Map<String, dynamic> map) {
    return WorkEffort(
        entityId: create_id_from('WorkEffort', ['workEffortId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        revisionNumber: map['revisionNumber'],
        tempExprId: map['tempExprId'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        specialTerms: map['specialTerms'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        moneyUomId: map['moneyUomId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        actualStartDate: map['actualStartDate'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        facilityId: map['facilityId'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAndChild extractWorkEffortAndChild(dynamic json) {
    return WorkEffortAndChild(
        entityId: create_id_from('WorkEffortAndChild', ['workEffortId', 'childWorkEffortId'], json),
        workEffortId: json['workEffortId'] as String,
        childWorkEffortId: json['childWorkEffortId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        childWorkEffortTypeId: json['childWorkEffortTypeId'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        childWorkEffortName: json['childWorkEffortName'] as String,
        currentStatusId: json['currentStatusId'] as String,
        workEffortName: json['workEffortName'] as String,
        childCurrentStatusId: json['childCurrentStatusId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAndChild overridesWorkEffortAndChild(Map<String, dynamic> map) {
    return WorkEffortAndChild(
        entityId: create_id_from('WorkEffortAndChild', ['workEffortId', 'childWorkEffortId'], map),
        workEffortId: map['workEffortId'],
        childWorkEffortId: map['childWorkEffortId'],
        workEffortTypeId: map['workEffortTypeId'],
        childWorkEffortTypeId: map['childWorkEffortTypeId'],
        workEffortParentId: map['workEffortParentId'],
        childWorkEffortName: map['childWorkEffortName'],
        currentStatusId: map['currentStatusId'],
        workEffortName: map['workEffortName'],
        childCurrentStatusId: map['childCurrentStatusId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAndContentDataResource extractWorkEffortAndContentDataResource(dynamic json) {
    return WorkEffortAndContentDataResource(
        entityId: create_id_from('WorkEffortAndContentDataResource', ['workEffortId', 'fromDate', 'workEffortContentTypeId', 'contentId', 'drDataResourceId'], json),
        workEffortId: json['workEffortId'] as String,
        drDataResourceId: json['drDataResourceId'] as String,
        drSurveyResponseId: json['drSurveyResponseId'] as String,
        ownerContentId: json['ownerContentId'] as String,
        drStatusId: json['drStatusId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        description: json['description'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        childLeafCount: json['childLeafCount'] as int,
        drRelatedDetailId: json['drRelatedDetailId'] as String,
        drDataCategoryId: json['drDataCategoryId'] as String,
        drIsPublic: json['drIsPublic'] as String,
        drDataResourceTypeId: json['drDataResourceTypeId'] as String,
        drCreatedByUserLogin: json['drCreatedByUserLogin'] as String,
        workEffortContentTypeId: json['workEffortContentTypeId'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        drDataTemplateTypeId: json['drDataTemplateTypeId'] as String,
        dataResourceId: json['dataResourceId'] as String,
        drSurveyId: json['drSurveyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        drObjectInfo: json['drObjectInfo'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        instanceOfContentId: json['instanceOfContentId'] as String,
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        drCharacterSetId: json['drCharacterSetId'] as String,
        drLastModifiedByUserLogin: json['drLastModifiedByUserLogin'] as String,
        thruDate: check_dt(json['thruDate']),
        contentName: json['contentName'] as String,
        fromDate: check_dt(json['fromDate']),
        drCreatedDate: check_dt(json['drCreatedDate']),
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        localeString: json['localeString'] as String,
        drLastModifiedDate: check_dt(json['drLastModifiedDate']),
        drDataResourceName: json['drDataResourceName'] as String,
        drDataSourceId: json['drDataSourceId'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        drMimeTypeId: json['drMimeTypeId'] as String,
        drLocaleString: json['drLocaleString'] as String,
        childBranchCount: json['childBranchCount'] as int,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAndContentDataResource overridesWorkEffortAndContentDataResource(Map<String, dynamic> map) {
    return WorkEffortAndContentDataResource(
        entityId: create_id_from('WorkEffortAndContentDataResource', ['workEffortId', 'fromDate', 'workEffortContentTypeId', 'contentId', 'drDataResourceId'], map),
        workEffortId: map['workEffortId'],
        drDataResourceId: map['drDataResourceId'],
        drSurveyResponseId: map['drSurveyResponseId'],
        ownerContentId: map['ownerContentId'],
        drStatusId: map['drStatusId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        description: map['description'],
        mimeTypeId: map['mimeTypeId'],
        childLeafCount: map['childLeafCount'],
        drRelatedDetailId: map['drRelatedDetailId'],
        drDataCategoryId: map['drDataCategoryId'],
        drIsPublic: map['drIsPublic'],
        drDataResourceTypeId: map['drDataResourceTypeId'],
        drCreatedByUserLogin: map['drCreatedByUserLogin'],
        workEffortContentTypeId: map['workEffortContentTypeId'],
        privilegeEnumId: map['privilegeEnumId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        drDataTemplateTypeId: map['drDataTemplateTypeId'],
        dataResourceId: map['dataResourceId'],
        drSurveyId: map['drSurveyId'],
        createdByUserLogin: map['createdByUserLogin'],
        drObjectInfo: map['drObjectInfo'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        instanceOfContentId: map['instanceOfContentId'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        drCharacterSetId: map['drCharacterSetId'],
        drLastModifiedByUserLogin: map['drLastModifiedByUserLogin'],
        thruDate: map['thruDate'],
        contentName: map['contentName'],
        fromDate: map['fromDate'],
        drCreatedDate: map['drCreatedDate'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        localeString: map['localeString'],
        drLastModifiedDate: map['drLastModifiedDate'],
        drDataResourceName: map['drDataResourceName'],
        drDataSourceId: map['drDataSourceId'],
        decoratorContentId: map['decoratorContentId'],
        drMimeTypeId: map['drMimeTypeId'],
        drLocaleString: map['drLocaleString'],
        childBranchCount: map['childBranchCount'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAndFixedAssetAssign extractWorkEffortAndFixedAssetAssign(dynamic json) {
    return WorkEffortAndFixedAssetAssign(
        entityId: create_id_from('WorkEffortAndFixedAssetAssign', ['workEffortId', 'fromDate', 'fixedAssetId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        revisionNumber: json['revisionNumber'] as int,
        acquireOrderId: json['acquireOrderId'] as String,
        locatedAtLocationSeqId: json['locatedAtLocationSeqId'] as String,
        tempExprId: json['tempExprId'] as String,
        actualEndOfLife: check_dt(json['actualEndOfLife']),
        dateLastServiced: check_dt(json['dateLastServiced']),
        acquireOrderItemSeqId: json['acquireOrderItemSeqId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        partyId: json['partyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        locatedAtFacilityId: json['locatedAtFacilityId'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        serialNumber: json['serialNumber'] as String,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        fixedAssetTypeId: json['fixedAssetTypeId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        fixedAssetName: json['fixedAssetName'] as String,
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        uomId: json['uomId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        thruDate: check_dt(json['thruDate']),
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        fromDate: check_dt(json['fromDate']),
        specialTerms: json['specialTerms'] as String,
        statusId: json['statusId'] as String,
        allocatedCost: json['allocatedCost'] as double,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        salvageValue: json['salvageValue'] as double,
        fixedAssetId: json['fixedAssetId'] as String,
        parentFixedAssetId: json['parentFixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        instanceOfProductId: json['instanceOfProductId'] as String,
        dateNextService: check_dt(json['dateNextService']),
        purchaseCostUomId: json['purchaseCostUomId'] as String,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        productionCapacity: json['productionCapacity'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        moneyUomId: json['moneyUomId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        availabilityStatusId: json['availabilityStatusId'] as String,
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        depreciation: json['depreciation'] as double,
        roleTypeId: json['roleTypeId'] as String,
        dateAcquired: check_dt(json['dateAcquired']),
        purchaseCost: json['purchaseCost'] as double,
        comments: json['comments'] as String,
        facilityId: json['facilityId'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        classEnumId: json['classEnumId'] as String,
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        calendarId: json['calendarId'] as String,
        expectedEndOfLife: check_dt(json['expectedEndOfLife']),
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAndFixedAssetAssign overridesWorkEffortAndFixedAssetAssign(Map<String, dynamic> map) {
    return WorkEffortAndFixedAssetAssign(
        entityId: create_id_from('WorkEffortAndFixedAssetAssign', ['workEffortId', 'fromDate', 'fixedAssetId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        revisionNumber: map['revisionNumber'],
        acquireOrderId: map['acquireOrderId'],
        locatedAtLocationSeqId: map['locatedAtLocationSeqId'],
        tempExprId: map['tempExprId'],
        actualEndOfLife: map['actualEndOfLife'],
        dateLastServiced: map['dateLastServiced'],
        acquireOrderItemSeqId: map['acquireOrderItemSeqId'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        partyId: map['partyId'],
        createdByUserLogin: map['createdByUserLogin'],
        locatedAtFacilityId: map['locatedAtFacilityId'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        serialNumber: map['serialNumber'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        fixedAssetTypeId: map['fixedAssetTypeId'],
        estimatedStartDate: map['estimatedStartDate'],
        fixedAssetName: map['fixedAssetName'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        uomId: map['uomId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        thruDate: map['thruDate'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        fromDate: map['fromDate'],
        specialTerms: map['specialTerms'],
        statusId: map['statusId'],
        allocatedCost: map['allocatedCost'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        salvageValue: map['salvageValue'],
        fixedAssetId: map['fixedAssetId'],
        parentFixedAssetId: map['parentFixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        instanceOfProductId: map['instanceOfProductId'],
        dateNextService: map['dateNextService'],
        purchaseCostUomId: map['purchaseCostUomId'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        productionCapacity: map['productionCapacity'],
        estimateCalcMethod: map['estimateCalcMethod'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        moneyUomId: map['moneyUomId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        actualStartDate: map['actualStartDate'],
        availabilityStatusId: map['availabilityStatusId'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        depreciation: map['depreciation'],
        roleTypeId: map['roleTypeId'],
        dateAcquired: map['dateAcquired'],
        purchaseCost: map['purchaseCost'],
        comments: map['comments'],
        facilityId: map['facilityId'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        classEnumId: map['classEnumId'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        calendarId: map['calendarId'],
        expectedEndOfLife: map['expectedEndOfLife'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAndFulfillment extractWorkEffortAndFulfillment(dynamic json) {
    return WorkEffortAndFulfillment(
        entityId: create_id_from('WorkEffortAndFulfillment', ['workEffortId', 'requirementId'], json),
        workEffortId: json['workEffortId'] as String,
        reason: json['reason'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        revisionNumber: json['revisionNumber'] as int,
        estimatedBudget: json['estimatedBudget'] as double,
        requiredByDate: check_dt(json['requiredByDate']),
        tempExprId: json['tempExprId'] as String,
        requirementTypeId: json['requirementTypeId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        deliverableId: json['deliverableId'] as String,
        productId: json['productId'] as String,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        requirementDescription: json['requirementDescription'] as String,
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        requirementFacilityId: json['requirementFacilityId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        specialTerms: json['specialTerms'] as String,
        statusId: json['statusId'] as String,
        workEffortFixedAssetId: json['workEffortFixedAssetId'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        requirementCreationDate: check_dt(json['requirementCreationDate']),
        workEffortParentId: json['workEffortParentId'] as String,
        moneyUomId: json['moneyUomId'] as String,
        workEffortDescription: json['workEffortDescription'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        workEffortFacilityId: json['workEffortFacilityId'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        scopeEnumId: json['scopeEnumId'] as String,
        requirementId: json['requirementId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        workReqFulfTypeId: json['workReqFulfTypeId'] as String,
        quantity: json['quantity'] as double,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        requirementStartDate: check_dt(json['requirementStartDate']),
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        useCase: json['useCase'] as String,
        createdDate: check_dt(json['createdDate']),
        requirementFixedAssetId: json['requirementFixedAssetId'] as String,
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAndFulfillment overridesWorkEffortAndFulfillment(Map<String, dynamic> map) {
    return WorkEffortAndFulfillment(
        entityId: create_id_from('WorkEffortAndFulfillment', ['workEffortId', 'requirementId'], map),
        workEffortId: map['workEffortId'],
        reason: map['reason'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        revisionNumber: map['revisionNumber'],
        estimatedBudget: map['estimatedBudget'],
        requiredByDate: map['requiredByDate'],
        tempExprId: map['tempExprId'],
        requirementTypeId: map['requirementTypeId'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        deliverableId: map['deliverableId'],
        productId: map['productId'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        requirementDescription: map['requirementDescription'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        requirementFacilityId: map['requirementFacilityId'],
        runtimeDataId: map['runtimeDataId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        specialTerms: map['specialTerms'],
        statusId: map['statusId'],
        workEffortFixedAssetId: map['workEffortFixedAssetId'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        requirementCreationDate: map['requirementCreationDate'],
        workEffortParentId: map['workEffortParentId'],
        moneyUomId: map['moneyUomId'],
        workEffortDescription: map['workEffortDescription'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        workEffortFacilityId: map['workEffortFacilityId'],
        accommodationMapId: map['accommodationMapId'],
        actualStartDate: map['actualStartDate'],
        scopeEnumId: map['scopeEnumId'],
        requirementId: map['requirementId'],
        quantityProduced: map['quantityProduced'],
        workReqFulfTypeId: map['workReqFulfTypeId'],
        quantity: map['quantity'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        requirementStartDate: map['requirementStartDate'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        useCase: map['useCase'],
        createdDate: map['createdDate'],
        requirementFixedAssetId: map['requirementFixedAssetId'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAndGoods extractWorkEffortAndGoods(dynamic json) {
    return WorkEffortAndGoods(
        entityId: create_id_from('WorkEffortAndGoods', ['productId', 'workEffortGoodStdTypeId', 'workEffortId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        revisionNumber: json['revisionNumber'] as int,
        tempExprId: json['tempExprId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        productId: json['productId'] as String,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        specialTerms: json['specialTerms'] as String,
        statusId: json['statusId'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        estimatedQuantity: json['estimatedQuantity'] as double,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        moneyUomId: json['moneyUomId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        workEffortGoodStdTypeId: json['workEffortGoodStdTypeId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        facilityId: json['facilityId'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAndGoods overridesWorkEffortAndGoods(Map<String, dynamic> map) {
    return WorkEffortAndGoods(
        entityId: create_id_from('WorkEffortAndGoods', ['productId', 'workEffortGoodStdTypeId', 'workEffortId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        revisionNumber: map['revisionNumber'],
        tempExprId: map['tempExprId'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        productId: map['productId'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        specialTerms: map['specialTerms'],
        statusId: map['statusId'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        estimatedQuantity: map['estimatedQuantity'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        moneyUomId: map['moneyUomId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        workEffortGoodStdTypeId: map['workEffortGoodStdTypeId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        actualStartDate: map['actualStartDate'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        facilityId: map['facilityId'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAndInventoryAssign extractWorkEffortAndInventoryAssign(dynamic json) {
    return WorkEffortAndInventoryAssign(
        entityId: create_id_from('WorkEffortAndInventoryAssign', ['workEffortId', 'inventoryItemId'], json),
        workEffortId: json['workEffortId'] as String,
        inventoryItemId: json['inventoryItemId'] as String,
        currencyUomId: json['currencyUomId'] as String,
        quantity: json['quantity'] as double,
        productId: json['productId'] as String,
        statusId: json['statusId'] as String,
        unitCost: json['unitCost'] as double,
        uomId: json['uomId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAndInventoryAssign overridesWorkEffortAndInventoryAssign(Map<String, dynamic> map) {
    return WorkEffortAndInventoryAssign(
        entityId: create_id_from('WorkEffortAndInventoryAssign', ['workEffortId', 'inventoryItemId'], map),
        workEffortId: map['workEffortId'],
        inventoryItemId: map['inventoryItemId'],
        currencyUomId: map['currencyUomId'],
        quantity: map['quantity'],
        productId: map['productId'],
        statusId: map['statusId'],
        unitCost: map['unitCost'],
        uomId: map['uomId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAndInventoryProduced extractWorkEffortAndInventoryProduced(dynamic json) {
    return WorkEffortAndInventoryProduced(
        entityId: create_id_from('WorkEffortAndInventoryProduced', ['workEffortId', 'inventoryItemId'], json),
        workEffortId: json['workEffortId'] as String,
        inventoryItemId: json['inventoryItemId'] as String,
        currencyUomId: json['currencyUomId'] as String,
        productId: json['productId'] as String,
        quantityOnHandTotal: json['quantityOnHandTotal'] as double,
        unitCost: json['unitCost'] as double,
        lotId: json['lotId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAndInventoryProduced overridesWorkEffortAndInventoryProduced(Map<String, dynamic> map) {
    return WorkEffortAndInventoryProduced(
        entityId: create_id_from('WorkEffortAndInventoryProduced', ['workEffortId', 'inventoryItemId'], map),
        workEffortId: map['workEffortId'],
        inventoryItemId: map['inventoryItemId'],
        currencyUomId: map['currencyUomId'],
        productId: map['productId'],
        quantityOnHandTotal: map['quantityOnHandTotal'],
        unitCost: map['unitCost'],
        lotId: map['lotId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAndPartyAssign extractWorkEffortAndPartyAssign(dynamic json) {
    return WorkEffortAndPartyAssign(
        entityId: create_id_from('WorkEffortAndPartyAssign', ['workEffortId', 'roleTypeId', 'fromDate', 'partyId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        mustRsvp: json['mustRsvp'] as String,
        revisionNumber: json['revisionNumber'] as int,
        tempExprId: json['tempExprId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        partyId: json['partyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        thruDate: check_dt(json['thruDate']),
        specialTerms: json['specialTerms'] as String,
        fromDate: check_dt(json['fromDate']),
        statusId: json['statusId'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        assignedByUserLoginId: json['assignedByUserLoginId'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        moneyUomId: json['moneyUomId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        delegateReasonEnumId: json['delegateReasonEnumId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        statusDateTime: check_dt(json['statusDateTime']),
        actualStartDate: check_dt(json['actualStartDate']),
        availabilityStatusId: json['availabilityStatusId'] as String,
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        roleTypeId: json['roleTypeId'] as String,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        expectationEnumId: json['expectationEnumId'] as String,
        partyAssignFacilityId: json['partyAssignFacilityId'] as String,
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAndPartyAssign overridesWorkEffortAndPartyAssign(Map<String, dynamic> map) {
    return WorkEffortAndPartyAssign(
        entityId: create_id_from('WorkEffortAndPartyAssign', ['workEffortId', 'roleTypeId', 'fromDate', 'partyId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        mustRsvp: map['mustRsvp'],
        revisionNumber: map['revisionNumber'],
        tempExprId: map['tempExprId'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        partyId: map['partyId'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        thruDate: map['thruDate'],
        specialTerms: map['specialTerms'],
        fromDate: map['fromDate'],
        statusId: map['statusId'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        assignedByUserLoginId: map['assignedByUserLoginId'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        moneyUomId: map['moneyUomId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        delegateReasonEnumId: map['delegateReasonEnumId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        statusDateTime: map['statusDateTime'],
        actualStartDate: map['actualStartDate'],
        availabilityStatusId: map['availabilityStatusId'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        roleTypeId: map['roleTypeId'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        expectationEnumId: map['expectationEnumId'],
        partyAssignFacilityId: map['partyAssignFacilityId'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAndPartyAssignAndType extractWorkEffortAndPartyAssignAndType(dynamic json) {
    return WorkEffortAndPartyAssignAndType(
        entityId: create_id_from('WorkEffortAndPartyAssignAndType', ['workEffortId', 'roleTypeId', 'fromDate', 'partyId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        mustRsvp: json['mustRsvp'] as String,
        revisionNumber: json['revisionNumber'] as int,
        tempExprId: json['tempExprId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        partyId: json['partyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        thruDate: check_dt(json['thruDate']),
        specialTerms: json['specialTerms'] as String,
        fromDate: check_dt(json['fromDate']),
        statusId: json['statusId'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        assignedByUserLoginId: json['assignedByUserLoginId'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        moneyUomId: json['moneyUomId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        delegateReasonEnumId: json['delegateReasonEnumId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        statusDateTime: check_dt(json['statusDateTime']),
        actualStartDate: check_dt(json['actualStartDate']),
        availabilityStatusId: json['availabilityStatusId'] as String,
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        roleTypeId: json['roleTypeId'] as String,
        parentTypeId: json['parentTypeId'] as String,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        expectationEnumId: json['expectationEnumId'] as String,
        partyAssignFacilityId: json['partyAssignFacilityId'] as String,
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAndPartyAssignAndType overridesWorkEffortAndPartyAssignAndType(Map<String, dynamic> map) {
    return WorkEffortAndPartyAssignAndType(
        entityId: create_id_from('WorkEffortAndPartyAssignAndType', ['workEffortId', 'roleTypeId', 'fromDate', 'partyId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        mustRsvp: map['mustRsvp'],
        revisionNumber: map['revisionNumber'],
        tempExprId: map['tempExprId'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        partyId: map['partyId'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        thruDate: map['thruDate'],
        specialTerms: map['specialTerms'],
        fromDate: map['fromDate'],
        statusId: map['statusId'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        assignedByUserLoginId: map['assignedByUserLoginId'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        moneyUomId: map['moneyUomId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        delegateReasonEnumId: map['delegateReasonEnumId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        statusDateTime: map['statusDateTime'],
        actualStartDate: map['actualStartDate'],
        availabilityStatusId: map['availabilityStatusId'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        roleTypeId: map['roleTypeId'],
        parentTypeId: map['parentTypeId'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        expectationEnumId: map['expectationEnumId'],
        partyAssignFacilityId: map['partyAssignFacilityId'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAndSalesOpportunity extractWorkEffortAndSalesOpportunity(dynamic json) {
    return WorkEffortAndSalesOpportunity(
        entityId: create_id_from('WorkEffortAndSalesOpportunity', ['salesOpportunityId', 'workEffortId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        revisionNumber: json['revisionNumber'] as int,
        tempExprId: json['tempExprId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        estimatedProbability: json['estimatedProbability'] as double,
        opportunityName: json['opportunityName'] as String,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        opportunityStageId: json['opportunityStageId'] as String,
        typeEnumId: json['typeEnumId'] as String,
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        specialTerms: json['specialTerms'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        nextStep: json['nextStep'] as String,
        fixedAssetId: json['fixedAssetId'] as String,
        estimatedAmount: json['estimatedAmount'] as double,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        salesOpportunityId: json['salesOpportunityId'] as String,
        workEffortCreatedByUserLogin: json['workEffortCreatedByUserLogin'] as String,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        marketingCampaignId: json['marketingCampaignId'] as String,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        description: json['description'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        moneyUomId: json['moneyUomId'] as String,
        workEffortDescription: json['workEffortDescription'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        nextStepDate: check_dt(json['nextStepDate']),
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        facilityId: json['facilityId'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        estimatedCloseDate: check_dt(json['estimatedCloseDate']),
        currencyUomId: json['currencyUomId'] as String,
        createdDate: check_dt(json['createdDate']),
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAndSalesOpportunity overridesWorkEffortAndSalesOpportunity(Map<String, dynamic> map) {
    return WorkEffortAndSalesOpportunity(
        entityId: create_id_from('WorkEffortAndSalesOpportunity', ['salesOpportunityId', 'workEffortId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        revisionNumber: map['revisionNumber'],
        tempExprId: map['tempExprId'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        estimatedProbability: map['estimatedProbability'],
        opportunityName: map['opportunityName'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        opportunityStageId: map['opportunityStageId'],
        typeEnumId: map['typeEnumId'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        specialTerms: map['specialTerms'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        nextStep: map['nextStep'],
        fixedAssetId: map['fixedAssetId'],
        estimatedAmount: map['estimatedAmount'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        salesOpportunityId: map['salesOpportunityId'],
        workEffortCreatedByUserLogin: map['workEffortCreatedByUserLogin'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        marketingCampaignId: map['marketingCampaignId'],
        estimateCalcMethod: map['estimateCalcMethod'],
        description: map['description'],
        workEffortParentId: map['workEffortParentId'],
        moneyUomId: map['moneyUomId'],
        workEffortDescription: map['workEffortDescription'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        actualStartDate: map['actualStartDate'],
        nextStepDate: map['nextStepDate'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        facilityId: map['facilityId'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        estimatedCloseDate: map['estimatedCloseDate'],
        currencyUomId: map['currencyUomId'],
        createdDate: map['createdDate'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAndTimeEntry extractWorkEffortAndTimeEntry(dynamic json) {
    return WorkEffortAndTimeEntry(
        entityId: create_id_from('WorkEffortAndTimeEntry', ['workEffortId', 'timeEntryId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        revisionNumber: json['revisionNumber'] as int,
        tempExprId: json['tempExprId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        partyId: json['partyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        thruDate: check_dt(json['thruDate']),
        specialTerms: json['specialTerms'] as String,
        fromDate: check_dt(json['fromDate']),
        timesheetId: json['timesheetId'] as String,
        timeEntryId: json['timeEntryId'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        rateTypeId: json['rateTypeId'] as String,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        moneyUomId: json['moneyUomId'] as String,
        invoiceItemSeqId: json['invoiceItemSeqId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        hours: json['hours'] as double,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        invoiceId: json['invoiceId'] as String,
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAndTimeEntry overridesWorkEffortAndTimeEntry(Map<String, dynamic> map) {
    return WorkEffortAndTimeEntry(
        entityId: create_id_from('WorkEffortAndTimeEntry', ['workEffortId', 'timeEntryId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        revisionNumber: map['revisionNumber'],
        tempExprId: map['tempExprId'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        partyId: map['partyId'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        thruDate: map['thruDate'],
        specialTerms: map['specialTerms'],
        fromDate: map['fromDate'],
        timesheetId: map['timesheetId'],
        timeEntryId: map['timeEntryId'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        rateTypeId: map['rateTypeId'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        moneyUomId: map['moneyUomId'],
        invoiceItemSeqId: map['invoiceItemSeqId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        actualStartDate: map['actualStartDate'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        hours: map['hours'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        invoiceId: map['invoiceId'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAssoc extractWorkEffortAssoc(dynamic json) {
    return WorkEffortAssoc(
        entityId: create_id_from('WorkEffortAssoc', ['workEffortIdFrom', 'workEffortIdTo', 'workEffortAssocTypeId', 'fromDate'], json),
        workEffortIdTo: json['workEffortIdTo'] as String,
        fromDate: check_dt(json['fromDate']),
        workEffortIdFrom: json['workEffortIdFrom'] as String,
        sequenceNum: json['sequenceNum'] as int,
        workEffortAssocTypeId: json['workEffortAssocTypeId'] as String,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAssoc overridesWorkEffortAssoc(Map<String, dynamic> map) {
    return WorkEffortAssoc(
        entityId: create_id_from('WorkEffortAssoc', ['workEffortIdFrom', 'workEffortIdTo', 'workEffortAssocTypeId', 'fromDate'], map),
        workEffortIdTo: map['workEffortIdTo'],
        fromDate: map['fromDate'],
        workEffortIdFrom: map['workEffortIdFrom'],
        sequenceNum: map['sequenceNum'],
        workEffortAssocTypeId: map['workEffortAssocTypeId'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAssocAttribute extractWorkEffortAssocAttribute(dynamic json) {
    return WorkEffortAssocAttribute(
        entityId: create_id_from('WorkEffortAssocAttribute', ['workEffortIdFrom', 'workEffortIdTo', 'workEffortAssocTypeId', 'attrName'], json),
        workEffortIdTo: json['workEffortIdTo'] as String,
        fromDate: check_dt(json['fromDate']),
        workEffortIdFrom: json['workEffortIdFrom'] as String,
        attrDescription: json['attrDescription'] as String,
        attrValue: json['attrValue'] as String,
        workEffortAssocTypeId: json['workEffortAssocTypeId'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAssocAttribute overridesWorkEffortAssocAttribute(Map<String, dynamic> map) {
    return WorkEffortAssocAttribute(
        entityId: create_id_from('WorkEffortAssocAttribute', ['workEffortIdFrom', 'workEffortIdTo', 'workEffortAssocTypeId', 'attrName'], map),
        workEffortIdTo: map['workEffortIdTo'],
        fromDate: map['fromDate'],
        workEffortIdFrom: map['workEffortIdFrom'],
        attrDescription: map['attrDescription'],
        attrValue: map['attrValue'],
        workEffortAssocTypeId: map['workEffortAssocTypeId'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAssocFromView extractWorkEffortAssocFromView(dynamic json) {
    return WorkEffortAssocFromView(
        entityId: create_id_from('WorkEffortAssocFromView', ['workEffortIdTo', 'fromDate', 'workEffortIdFrom', 'workEffortAssocTypeId', 'workEffortId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        revisionNumber: json['revisionNumber'] as int,
        tempExprId: json['tempExprId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        workEffortIdFrom: json['workEffortIdFrom'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        thruDate: check_dt(json['thruDate']),
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        workEffortIdTo: json['workEffortIdTo'] as String,
        fromDate: check_dt(json['fromDate']),
        specialTerms: json['specialTerms'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        moneyUomId: json['moneyUomId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        facilityId: json['facilityId'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        workEffortAssocTypeId: json['workEffortAssocTypeId'] as String,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAssocFromView overridesWorkEffortAssocFromView(Map<String, dynamic> map) {
    return WorkEffortAssocFromView(
        entityId: create_id_from('WorkEffortAssocFromView', ['workEffortIdTo', 'fromDate', 'workEffortIdFrom', 'workEffortAssocTypeId', 'workEffortId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        sequenceNum: map['sequenceNum'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        revisionNumber: map['revisionNumber'],
        tempExprId: map['tempExprId'],
        showAsEnumId: map['showAsEnumId'],
        workEffortIdFrom: map['workEffortIdFrom'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        thruDate: map['thruDate'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        workEffortIdTo: map['workEffortIdTo'],
        fromDate: map['fromDate'],
        specialTerms: map['specialTerms'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        moneyUomId: map['moneyUomId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        actualStartDate: map['actualStartDate'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        facilityId: map['facilityId'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        workEffortAssocTypeId: map['workEffortAssocTypeId'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAssocToView extractWorkEffortAssocToView(dynamic json) {
    return WorkEffortAssocToView(
        entityId: create_id_from('WorkEffortAssocToView', ['workEffortIdTo', 'fromDate', 'workEffortIdFrom', 'workEffortAssocTypeId', 'workEffortId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        sequenceNum: json['sequenceNum'] as int,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        revisionNumber: json['revisionNumber'] as int,
        tempExprId: json['tempExprId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        workEffortIdFrom: json['workEffortIdFrom'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        thruDate: check_dt(json['thruDate']),
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        workEffortIdTo: json['workEffortIdTo'] as String,
        fromDate: check_dt(json['fromDate']),
        specialTerms: json['specialTerms'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        moneyUomId: json['moneyUomId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        facilityId: json['facilityId'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        workEffortAssocTypeId: json['workEffortAssocTypeId'] as String,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAssocToView overridesWorkEffortAssocToView(Map<String, dynamic> map) {
    return WorkEffortAssocToView(
        entityId: create_id_from('WorkEffortAssocToView', ['workEffortIdTo', 'fromDate', 'workEffortIdFrom', 'workEffortAssocTypeId', 'workEffortId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        sequenceNum: map['sequenceNum'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        revisionNumber: map['revisionNumber'],
        tempExprId: map['tempExprId'],
        showAsEnumId: map['showAsEnumId'],
        workEffortIdFrom: map['workEffortIdFrom'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        thruDate: map['thruDate'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        workEffortIdTo: map['workEffortIdTo'],
        fromDate: map['fromDate'],
        specialTerms: map['specialTerms'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        moneyUomId: map['moneyUomId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        actualStartDate: map['actualStartDate'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        facilityId: map['facilityId'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        workEffortAssocTypeId: map['workEffortAssocTypeId'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAssocType extractWorkEffortAssocType(dynamic json) {
    return WorkEffortAssocType(
        entityId: create_id_from('WorkEffortAssocType', ['workEffortAssocTypeId'], json),
        parentTypeId: json['parentTypeId'] as String,
        hasTable: json['hasTable'] as String,
        description: json['description'] as String,
        workEffortAssocTypeId: json['workEffortAssocTypeId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAssocType overridesWorkEffortAssocType(Map<String, dynamic> map) {
    return WorkEffortAssocType(
        entityId: create_id_from('WorkEffortAssocType', ['workEffortAssocTypeId'], map),
        parentTypeId: map['parentTypeId'],
        hasTable: map['hasTable'],
        description: map['description'],
        workEffortAssocTypeId: map['workEffortAssocTypeId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAssocTypeAttr extractWorkEffortAssocTypeAttr(dynamic json) {
    return WorkEffortAssocTypeAttr(
        entityId: create_id_from('WorkEffortAssocTypeAttr', ['workEffortAssocTypeId', 'attrName'], json),
        description: json['description'] as String,
        workEffortAssocTypeId: json['workEffortAssocTypeId'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAssocTypeAttr overridesWorkEffortAssocTypeAttr(Map<String, dynamic> map) {
    return WorkEffortAssocTypeAttr(
        entityId: create_id_from('WorkEffortAssocTypeAttr', ['workEffortAssocTypeId', 'attrName'], map),
        description: map['description'],
        workEffortAssocTypeId: map['workEffortAssocTypeId'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAssocView extractWorkEffortAssocView(dynamic json) {
    return WorkEffortAssocView(
        entityId: create_id_from('WorkEffortAssocView', ['workEffortIdTo', 'fromDate', 'workEffortIdFrom', 'workEffortAssocTypeId'], json),
        workEffortToWorkEffortPurposeTypeId: json['workEffortToWorkEffortPurposeTypeId'] as String,
        workEffortToSetup: json['workEffortToSetup'] as double,
        sequenceNum: json['sequenceNum'] as int,
        workEffortToCurrentStatusId: json['workEffortToCurrentStatusId'] as String,
        workEffortToActualCompletionDate: check_dt(json['workEffortToActualCompletionDate']),
        workEffortToRun: json['workEffortToRun'] as double,
        workEffortToEstimatedCompletionDate: check_dt(json['workEffortToEstimatedCompletionDate']),
        workEffortAssocTypeId: json['workEffortAssocTypeId'] as String,
        thruDate: check_dt(json['thruDate']),
        workEffortIdTo: json['workEffortIdTo'] as String,
        fromDate: check_dt(json['fromDate']),
        workEffortToActualStartDate: check_dt(json['workEffortToActualStartDate']),
        workEffortToEstimatedStartDate: check_dt(json['workEffortToEstimatedStartDate']),
        workEffortIdFrom: json['workEffortIdFrom'] as String,
        workEffortToParentId: json['workEffortToParentId'] as String,
        workEffortToName: json['workEffortToName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAssocView overridesWorkEffortAssocView(Map<String, dynamic> map) {
    return WorkEffortAssocView(
        entityId: create_id_from('WorkEffortAssocView', ['workEffortIdTo', 'fromDate', 'workEffortIdFrom', 'workEffortAssocTypeId'], map),
        workEffortToWorkEffortPurposeTypeId: map['workEffortToWorkEffortPurposeTypeId'],
        workEffortToSetup: map['workEffortToSetup'],
        sequenceNum: map['sequenceNum'],
        workEffortToCurrentStatusId: map['workEffortToCurrentStatusId'],
        workEffortToActualCompletionDate: map['workEffortToActualCompletionDate'],
        workEffortToRun: map['workEffortToRun'],
        workEffortToEstimatedCompletionDate: map['workEffortToEstimatedCompletionDate'],
        workEffortAssocTypeId: map['workEffortAssocTypeId'],
        thruDate: map['thruDate'],
        workEffortIdTo: map['workEffortIdTo'],
        fromDate: map['fromDate'],
        workEffortToActualStartDate: map['workEffortToActualStartDate'],
        workEffortToEstimatedStartDate: map['workEffortToEstimatedStartDate'],
        workEffortIdFrom: map['workEffortIdFrom'],
        workEffortToParentId: map['workEffortToParentId'],
        workEffortToName: map['workEffortToName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortAttribute extractWorkEffortAttribute(dynamic json) {
    return WorkEffortAttribute(
        entityId: create_id_from('WorkEffortAttribute', ['workEffortId', 'attrName'], json),
        workEffortId: json['workEffortId'] as String,
        attrDescription: json['attrDescription'] as String,
        attrValue: json['attrValue'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortAttribute overridesWorkEffortAttribute(Map<String, dynamic> map) {
    return WorkEffortAttribute(
        entityId: create_id_from('WorkEffortAttribute', ['workEffortId', 'attrName'], map),
        workEffortId: map['workEffortId'],
        attrDescription: map['attrDescription'],
        attrValue: map['attrValue'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortBilling extractWorkEffortBilling(dynamic json) {
    return WorkEffortBilling(
        entityId: create_id_from('WorkEffortBilling', ['workEffortId', 'invoiceId', 'invoiceItemSeqId'], json),
        workEffortId: json['workEffortId'] as String,
        percentage: json['percentage'] as double,
        invoiceId: json['invoiceId'] as String,
        invoiceItemSeqId: json['invoiceItemSeqId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortBilling overridesWorkEffortBilling(Map<String, dynamic> map) {
    return WorkEffortBilling(
        entityId: create_id_from('WorkEffortBilling', ['workEffortId', 'invoiceId', 'invoiceItemSeqId'], map),
        workEffortId: map['workEffortId'],
        percentage: map['percentage'],
        invoiceId: map['invoiceId'],
        invoiceItemSeqId: map['invoiceItemSeqId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortCommunicationEventView extractWorkEffortCommunicationEventView(dynamic json) {
    return WorkEffortCommunicationEventView(
        entityId: create_id_from('WorkEffortCommunicationEventView', ['workEffortId', 'communicationEventId'], json),
        workEffortId: json['workEffortId'] as String,
        partyIdFrom: json['partyIdFrom'] as String,
        note: json['note'] as String,
        subject: json['subject'] as String,
        ccString: json['ccString'] as String,
        description: json['description'] as String,
        contactMechTypeId: json['contactMechTypeId'] as String,
        communicationEventTypeId: json['communicationEventTypeId'] as String,
        content: json['content'] as String,
        contentMimeTypeId: json['contentMimeTypeId'] as String,
        datetimeStarted: check_dt(json['datetimeStarted']),
        contactListId: json['contactListId'] as String,
        contactMechIdFrom: json['contactMechIdFrom'] as String,
        reasonEnumId: json['reasonEnumId'] as String,
        roleTypeIdTo: json['roleTypeIdTo'] as String,
        parentCommEventId: json['parentCommEventId'] as String,
        entryDate: check_dt(json['entryDate']),
        datetimeEnded: check_dt(json['datetimeEnded']),
        origCommEventId: json['origCommEventId'] as String,
        messageId: json['messageId'] as String,
        roleTypeIdFrom: json['roleTypeIdFrom'] as String,
        contactMechIdTo: json['contactMechIdTo'] as String,
        headerString: json['headerString'] as String,
        statusId: json['statusId'] as String,
        communicationEventId: json['communicationEventId'] as String,
        bccString: json['bccString'] as String,
        partyIdTo: json['partyIdTo'] as String,
        toStr: json['toString'] as String,
        fromString: json['fromString'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortCommunicationEventView overridesWorkEffortCommunicationEventView(Map<String, dynamic> map) {
    return WorkEffortCommunicationEventView(
        entityId: create_id_from('WorkEffortCommunicationEventView', ['workEffortId', 'communicationEventId'], map),
        workEffortId: map['workEffortId'],
        partyIdFrom: map['partyIdFrom'],
        note: map['note'],
        subject: map['subject'],
        ccString: map['ccString'],
        description: map['description'],
        contactMechTypeId: map['contactMechTypeId'],
        communicationEventTypeId: map['communicationEventTypeId'],
        content: map['content'],
        contentMimeTypeId: map['contentMimeTypeId'],
        datetimeStarted: map['datetimeStarted'],
        contactListId: map['contactListId'],
        contactMechIdFrom: map['contactMechIdFrom'],
        reasonEnumId: map['reasonEnumId'],
        roleTypeIdTo: map['roleTypeIdTo'],
        parentCommEventId: map['parentCommEventId'],
        entryDate: map['entryDate'],
        datetimeEnded: map['datetimeEnded'],
        origCommEventId: map['origCommEventId'],
        messageId: map['messageId'],
        roleTypeIdFrom: map['roleTypeIdFrom'],
        contactMechIdTo: map['contactMechIdTo'],
        headerString: map['headerString'],
        statusId: map['statusId'],
        communicationEventId: map['communicationEventId'],
        bccString: map['bccString'],
        partyIdTo: map['partyIdTo'],
        toStr: map['toString'],
        fromString: map['fromString'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortContactMech extractWorkEffortContactMech(dynamic json) {
    return WorkEffortContactMech(
        entityId: create_id_from('WorkEffortContactMech', ['workEffortId', 'contactMechId', 'fromDate'], json),
        workEffortId: json['workEffortId'] as String,
        fromDate: check_dt(json['fromDate']),
        comments: json['comments'] as String,
        contactMechId: json['contactMechId'] as String,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortContactMech overridesWorkEffortContactMech(Map<String, dynamic> map) {
    return WorkEffortContactMech(
        entityId: create_id_from('WorkEffortContactMech', ['workEffortId', 'contactMechId', 'fromDate'], map),
        workEffortId: map['workEffortId'],
        fromDate: map['fromDate'],
        comments: map['comments'],
        contactMechId: map['contactMechId'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortContactMechView extractWorkEffortContactMechView(dynamic json) {
    return WorkEffortContactMechView(
        entityId: create_id_from('WorkEffortContactMechView', ['workEffortId', 'fromDate', 'contactMechId'], json),
        workEffortId: json['workEffortId'] as String,
        fromDate: check_dt(json['fromDate']),
        comments: json['comments'] as String,
        infoString: json['infoString'] as String,
        contactMechTypeId: json['contactMechTypeId'] as String,
        contactMechId: json['contactMechId'] as String,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortContactMechView overridesWorkEffortContactMechView(Map<String, dynamic> map) {
    return WorkEffortContactMechView(
        entityId: create_id_from('WorkEffortContactMechView', ['workEffortId', 'fromDate', 'contactMechId'], map),
        workEffortId: map['workEffortId'],
        fromDate: map['fromDate'],
        comments: map['comments'],
        infoString: map['infoString'],
        contactMechTypeId: map['contactMechTypeId'],
        contactMechId: map['contactMechId'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortContent extractWorkEffortContent(dynamic json) {
    return WorkEffortContent(
        entityId: create_id_from('WorkEffortContent', ['workEffortId', 'contentId', 'workEffortContentTypeId', 'fromDate'], json),
        workEffortId: json['workEffortId'] as String,
        fromDate: check_dt(json['fromDate']),
        workEffortContentTypeId: json['workEffortContentTypeId'] as String,
        contentId: json['contentId'] as String,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortContent overridesWorkEffortContent(Map<String, dynamic> map) {
    return WorkEffortContent(
        entityId: create_id_from('WorkEffortContent', ['workEffortId', 'contentId', 'workEffortContentTypeId', 'fromDate'], map),
        workEffortId: map['workEffortId'],
        fromDate: map['fromDate'],
        workEffortContentTypeId: map['workEffortContentTypeId'],
        contentId: map['contentId'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortContentAndInfo extractWorkEffortContentAndInfo(dynamic json) {
    return WorkEffortContentAndInfo(
        entityId: create_id_from('WorkEffortContentAndInfo', ['workEffortId', 'fromDate', 'workEffortContentTypeId', 'contentId', 'drDataResourceId'], json),
        workEffortId: json['workEffortId'] as String,
        drDataResourceId: json['drDataResourceId'] as String,
        drSurveyResponseId: json['drSurveyResponseId'] as String,
        ownerContentId: json['ownerContentId'] as String,
        drStatusId: json['drStatusId'] as String,
        contentId: json['contentId'] as String,
        contentTypeId: json['contentTypeId'] as String,
        description: json['description'] as String,
        mimeTypeId: json['mimeTypeId'] as String,
        childLeafCount: json['childLeafCount'] as int,
        drRelatedDetailId: json['drRelatedDetailId'] as String,
        drDataCategoryId: json['drDataCategoryId'] as String,
        drIsPublic: json['drIsPublic'] as String,
        drDataResourceTypeId: json['drDataResourceTypeId'] as String,
        drCreatedByUserLogin: json['drCreatedByUserLogin'] as String,
        workEffortContentTypeId: json['workEffortContentTypeId'] as String,
        privilegeEnumId: json['privilegeEnumId'] as String,
        dataSourceId: json['dataSourceId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        drDataTemplateTypeId: json['drDataTemplateTypeId'] as String,
        dataResourceId: json['dataResourceId'] as String,
        drSurveyId: json['drSurveyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        drObjectInfo: json['drObjectInfo'] as String,
        templateDataResourceId: json['templateDataResourceId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        instanceOfContentId: json['instanceOfContentId'] as String,
        serviceName: json['serviceName'] as String,
        customMethodId: json['customMethodId'] as String,
        characterSetId: json['characterSetId'] as String,
        drCharacterSetId: json['drCharacterSetId'] as String,
        drLastModifiedByUserLogin: json['drLastModifiedByUserLogin'] as String,
        thruDate: check_dt(json['thruDate']),
        contentName: json['contentName'] as String,
        fromDate: check_dt(json['fromDate']),
        drCreatedDate: check_dt(json['drCreatedDate']),
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        localeString: json['localeString'] as String,
        drLastModifiedDate: check_dt(json['drLastModifiedDate']),
        drDataResourceName: json['drDataResourceName'] as String,
        drDataSourceId: json['drDataSourceId'] as String,
        decoratorContentId: json['decoratorContentId'] as String,
        drMimeTypeId: json['drMimeTypeId'] as String,
        drLocaleString: json['drLocaleString'] as String,
        childBranchCount: json['childBranchCount'] as int,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortContentAndInfo overridesWorkEffortContentAndInfo(Map<String, dynamic> map) {
    return WorkEffortContentAndInfo(
        entityId: create_id_from('WorkEffortContentAndInfo', ['workEffortId', 'fromDate', 'workEffortContentTypeId', 'contentId', 'drDataResourceId'], map),
        workEffortId: map['workEffortId'],
        drDataResourceId: map['drDataResourceId'],
        drSurveyResponseId: map['drSurveyResponseId'],
        ownerContentId: map['ownerContentId'],
        drStatusId: map['drStatusId'],
        contentId: map['contentId'],
        contentTypeId: map['contentTypeId'],
        description: map['description'],
        mimeTypeId: map['mimeTypeId'],
        childLeafCount: map['childLeafCount'],
        drRelatedDetailId: map['drRelatedDetailId'],
        drDataCategoryId: map['drDataCategoryId'],
        drIsPublic: map['drIsPublic'],
        drDataResourceTypeId: map['drDataResourceTypeId'],
        drCreatedByUserLogin: map['drCreatedByUserLogin'],
        workEffortContentTypeId: map['workEffortContentTypeId'],
        privilegeEnumId: map['privilegeEnumId'],
        dataSourceId: map['dataSourceId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        drDataTemplateTypeId: map['drDataTemplateTypeId'],
        dataResourceId: map['dataResourceId'],
        drSurveyId: map['drSurveyId'],
        createdByUserLogin: map['createdByUserLogin'],
        drObjectInfo: map['drObjectInfo'],
        templateDataResourceId: map['templateDataResourceId'],
        lastModifiedDate: map['lastModifiedDate'],
        instanceOfContentId: map['instanceOfContentId'],
        serviceName: map['serviceName'],
        customMethodId: map['customMethodId'],
        characterSetId: map['characterSetId'],
        drCharacterSetId: map['drCharacterSetId'],
        drLastModifiedByUserLogin: map['drLastModifiedByUserLogin'],
        thruDate: map['thruDate'],
        contentName: map['contentName'],
        fromDate: map['fromDate'],
        drCreatedDate: map['drCreatedDate'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        localeString: map['localeString'],
        drLastModifiedDate: map['drLastModifiedDate'],
        drDataResourceName: map['drDataResourceName'],
        drDataSourceId: map['drDataSourceId'],
        decoratorContentId: map['decoratorContentId'],
        drMimeTypeId: map['drMimeTypeId'],
        drLocaleString: map['drLocaleString'],
        childBranchCount: map['childBranchCount'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortContentType extractWorkEffortContentType(dynamic json) {
    return WorkEffortContentType(
        entityId: create_id_from('WorkEffortContentType', ['workEffortContentTypeId'], json),
        workEffortContentTypeId: json['workEffortContentTypeId'] as String,
        parentTypeId: json['parentTypeId'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortContentType overridesWorkEffortContentType(Map<String, dynamic> map) {
    return WorkEffortContentType(
        entityId: create_id_from('WorkEffortContentType', ['workEffortContentTypeId'], map),
        workEffortContentTypeId: map['workEffortContentTypeId'],
        parentTypeId: map['parentTypeId'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortCostCalc extractWorkEffortCostCalc(dynamic json) {
    return WorkEffortCostCalc(
        entityId: create_id_from('WorkEffortCostCalc', ['workEffortId', 'costComponentTypeId', 'fromDate'], json),
        workEffortId: json['workEffortId'] as String,
        fromDate: check_dt(json['fromDate']),
        costComponentTypeId: json['costComponentTypeId'] as String,
        costComponentCalcId: json['costComponentCalcId'] as String,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortCostCalc overridesWorkEffortCostCalc(Map<String, dynamic> map) {
    return WorkEffortCostCalc(
        entityId: create_id_from('WorkEffortCostCalc', ['workEffortId', 'costComponentTypeId', 'fromDate'], map),
        workEffortId: map['workEffortId'],
        fromDate: map['fromDate'],
        costComponentTypeId: map['costComponentTypeId'],
        costComponentCalcId: map['costComponentCalcId'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortCustRequestItemView extractWorkEffortCustRequestItemView(dynamic json) {
    return WorkEffortCustRequestItemView(
        entityId: create_id_from('WorkEffortCustRequestItemView', ['workEffortId', 'custRequestId', 'custRequestItemSeqId'], json),
        workEffortId: json['workEffortId'] as String,
        custRequestResolutionId: json['custRequestResolutionId'] as String,
        quantity: json['quantity'] as double,
        reservLength: json['reservLength'] as double,
        sequenceNum: json['sequenceNum'] as int,
        productId: json['productId'] as String,
        reservPersons: json['reservPersons'] as double,
        maximumAmount: json['maximumAmount'] as double,
        requiredByDate: check_dt(json['requiredByDate']),
        description: json['description'] as String,
        priority: json['priority'] as int,
        custRequestItemSeqId: json['custRequestItemSeqId'] as String,
        statusId: json['statusId'] as String,
        statusItemDescription: json['statusItemDescription'] as String,
        reservStart: check_dt(json['reservStart']),
        configId: json['configId'] as String,
        custRequestId: json['custRequestId'] as String,
        selectedAmount: json['selectedAmount'] as double,
        story: json['story'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortCustRequestItemView overridesWorkEffortCustRequestItemView(Map<String, dynamic> map) {
    return WorkEffortCustRequestItemView(
        entityId: create_id_from('WorkEffortCustRequestItemView', ['workEffortId', 'custRequestId', 'custRequestItemSeqId'], map),
        workEffortId: map['workEffortId'],
        custRequestResolutionId: map['custRequestResolutionId'],
        quantity: map['quantity'],
        reservLength: map['reservLength'],
        sequenceNum: map['sequenceNum'],
        productId: map['productId'],
        reservPersons: map['reservPersons'],
        maximumAmount: map['maximumAmount'],
        requiredByDate: map['requiredByDate'],
        description: map['description'],
        priority: map['priority'],
        custRequestItemSeqId: map['custRequestItemSeqId'],
        statusId: map['statusId'],
        statusItemDescription: map['statusItemDescription'],
        reservStart: map['reservStart'],
        configId: map['configId'],
        custRequestId: map['custRequestId'],
        selectedAmount: map['selectedAmount'],
        story: map['story'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortCustRequestView extractWorkEffortCustRequestView(dynamic json) {
    return WorkEffortCustRequestView(
        entityId: create_id_from('WorkEffortCustRequestView', ['workEffortId', 'custRequestId'], json),
        workEffortId: json['workEffortId'] as String,
        reason: json['reason'] as String,
        salesChannelEnumId: json['salesChannelEnumId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        revisionNumber: json['revisionNumber'] as int,
        workEffortPriority: json['workEffortPriority'] as int,
        custRequestDate: check_dt(json['custRequestDate']),
        tempExprId: json['tempExprId'] as String,
        internalComment: json['internalComment'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        custRequestTypeDescription: json['custRequestTypeDescription'] as String,
        closedDateTime: check_dt(json['closedDateTime']),
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        maximumAmountUomId: json['maximumAmountUomId'] as String,
        currentStatusId: json['currentStatusId'] as String,
        openDateTime: check_dt(json['openDateTime']),
        runtimeDataId: json['runtimeDataId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        specialTerms: json['specialTerms'] as String,
        statusId: json['statusId'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        workEffortCreatedDate: check_dt(json['workEffortCreatedDate']),
        custRequestCategoryId: json['custRequestCategoryId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        workEffortCreatedByUserLogin: json['workEffortCreatedByUserLogin'] as String,
        fromPartyId: json['fromPartyId'] as String,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        fulfillContactMechId: json['fulfillContactMechId'] as String,
        description: json['description'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        moneyUomId: json['moneyUomId'] as String,
        workEffortDescription: json['workEffortDescription'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        workEffortLastModifiedDate: check_dt(json['workEffortLastModifiedDate']),
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        custRequestId: json['custRequestId'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        productStoreId: json['productStoreId'] as String,
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        custRequestName: json['custRequestName'] as String,
        responseRequiredDate: check_dt(json['responseRequiredDate']),
        facilityId: json['facilityId'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        currencyUomId: json['currencyUomId'] as String,
        createdDate: check_dt(json['createdDate']),
        statusItemDescription: json['statusItemDescription'] as String,
        workEffortLastModByUserLogin: json['workEffortLastModByUserLogin'] as String,
        custRequestTypeId: json['custRequestTypeId'] as String,
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortCustRequestView overridesWorkEffortCustRequestView(Map<String, dynamic> map) {
    return WorkEffortCustRequestView(
        entityId: create_id_from('WorkEffortCustRequestView', ['workEffortId', 'custRequestId'], map),
        workEffortId: map['workEffortId'],
        reason: map['reason'],
        salesChannelEnumId: map['salesChannelEnumId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        revisionNumber: map['revisionNumber'],
        workEffortPriority: map['workEffortPriority'],
        custRequestDate: map['custRequestDate'],
        tempExprId: map['tempExprId'],
        internalComment: map['internalComment'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        createdByUserLogin: map['createdByUserLogin'],
        custRequestTypeDescription: map['custRequestTypeDescription'],
        closedDateTime: map['closedDateTime'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        maximumAmountUomId: map['maximumAmountUomId'],
        currentStatusId: map['currentStatusId'],
        openDateTime: map['openDateTime'],
        runtimeDataId: map['runtimeDataId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        specialTerms: map['specialTerms'],
        statusId: map['statusId'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        workEffortCreatedDate: map['workEffortCreatedDate'],
        custRequestCategoryId: map['custRequestCategoryId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        workEffortCreatedByUserLogin: map['workEffortCreatedByUserLogin'],
        fromPartyId: map['fromPartyId'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        fulfillContactMechId: map['fulfillContactMechId'],
        description: map['description'],
        workEffortParentId: map['workEffortParentId'],
        moneyUomId: map['moneyUomId'],
        workEffortDescription: map['workEffortDescription'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        workEffortLastModifiedDate: map['workEffortLastModifiedDate'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        custRequestId: map['custRequestId'],
        actualStartDate: map['actualStartDate'],
        productStoreId: map['productStoreId'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        custRequestName: map['custRequestName'],
        responseRequiredDate: map['responseRequiredDate'],
        facilityId: map['facilityId'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        currencyUomId: map['currencyUomId'],
        createdDate: map['createdDate'],
        statusItemDescription: map['statusItemDescription'],
        workEffortLastModByUserLogin: map['workEffortLastModByUserLogin'],
        custRequestTypeId: map['custRequestTypeId'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortDeliverableProd extractWorkEffortDeliverableProd(dynamic json) {
    return WorkEffortDeliverableProd(
        entityId: create_id_from('WorkEffortDeliverableProd', ['workEffortId', 'deliverableId'], json),
        workEffortId: json['workEffortId'] as String,
        deliverableId: json['deliverableId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortDeliverableProd overridesWorkEffortDeliverableProd(Map<String, dynamic> map) {
    return WorkEffortDeliverableProd(
        entityId: create_id_from('WorkEffortDeliverableProd', ['workEffortId', 'deliverableId'], map),
        workEffortId: map['workEffortId'],
        deliverableId: map['deliverableId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortEventReminder extractWorkEffortEventReminder(dynamic json) {
    return WorkEffortEventReminder(
        entityId: create_id_from('WorkEffortEventReminder', ['workEffortId', 'sequenceId'], json),
        workEffortId: json['workEffortId'] as String,
        timeZoneId: json['timeZoneId'] as String,
        reminderDateTime: check_dt(json['reminderDateTime']),
        reminderOffset: json['reminderOffset'] as int,
        sequenceId: json['sequenceId'] as String,
        contactMechId: json['contactMechId'] as String,
        currentCount: json['currentCount'] as int,
        repeatInterval: json['repeatInterval'] as int,
        partyId: json['partyId'] as String,
        localeId: json['localeId'] as String,
        repeatCount: json['repeatCount'] as int,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortEventReminder overridesWorkEffortEventReminder(Map<String, dynamic> map) {
    return WorkEffortEventReminder(
        entityId: create_id_from('WorkEffortEventReminder', ['workEffortId', 'sequenceId'], map),
        workEffortId: map['workEffortId'],
        timeZoneId: map['timeZoneId'],
        reminderDateTime: map['reminderDateTime'],
        reminderOffset: map['reminderOffset'],
        sequenceId: map['sequenceId'],
        contactMechId: map['contactMechId'],
        currentCount: map['currentCount'],
        repeatInterval: map['repeatInterval'],
        partyId: map['partyId'],
        localeId: map['localeId'],
        repeatCount: map['repeatCount'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortFindView extractWorkEffortFindView(dynamic json) {
    return WorkEffortFindView(
        entityId: create_id_from('WorkEffortFindView', ['workEffortParentId', 'partyId', 'fixedAssetId', 'workEffortId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        revisionNumber: json['revisionNumber'] as int,
        tempExprId: json['tempExprId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        partyId: json['partyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        specialTerms: json['specialTerms'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        moneyUomId: json['moneyUomId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        facilityId: json['facilityId'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortFindView overridesWorkEffortFindView(Map<String, dynamic> map) {
    return WorkEffortFindView(
        entityId: create_id_from('WorkEffortFindView', ['workEffortParentId', 'partyId', 'fixedAssetId', 'workEffortId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        revisionNumber: map['revisionNumber'],
        tempExprId: map['tempExprId'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        partyId: map['partyId'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        specialTerms: map['specialTerms'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        moneyUomId: map['moneyUomId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        actualStartDate: map['actualStartDate'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        facilityId: map['facilityId'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortFixedAssetAssign extractWorkEffortFixedAssetAssign(dynamic json) {
    return WorkEffortFixedAssetAssign(
        entityId: create_id_from('WorkEffortFixedAssetAssign', ['workEffortId', 'fixedAssetId', 'fromDate'], json),
        workEffortId: json['workEffortId'] as String,
        fromDate: check_dt(json['fromDate']),
        comments: json['comments'] as String,
        statusId: json['statusId'] as String,
        allocatedCost: json['allocatedCost'] as double,
        fixedAssetId: json['fixedAssetId'] as String,
        availabilityStatusId: json['availabilityStatusId'] as String,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortFixedAssetAssign overridesWorkEffortFixedAssetAssign(Map<String, dynamic> map) {
    return WorkEffortFixedAssetAssign(
        entityId: create_id_from('WorkEffortFixedAssetAssign', ['workEffortId', 'fixedAssetId', 'fromDate'], map),
        workEffortId: map['workEffortId'],
        fromDate: map['fromDate'],
        comments: map['comments'],
        statusId: map['statusId'],
        allocatedCost: map['allocatedCost'],
        fixedAssetId: map['fixedAssetId'],
        availabilityStatusId: map['availabilityStatusId'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortFixedAssetStd extractWorkEffortFixedAssetStd(dynamic json) {
    return WorkEffortFixedAssetStd(
        entityId: create_id_from('WorkEffortFixedAssetStd', ['workEffortId', 'fixedAssetTypeId'], json),
        workEffortId: json['workEffortId'] as String,
        fixedAssetTypeId: json['fixedAssetTypeId'] as String,
        estimatedQuantity: json['estimatedQuantity'] as double,
        estimatedCost: json['estimatedCost'] as double,
        estimatedDuration: json['estimatedDuration'] as double,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortFixedAssetStd overridesWorkEffortFixedAssetStd(Map<String, dynamic> map) {
    return WorkEffortFixedAssetStd(
        entityId: create_id_from('WorkEffortFixedAssetStd', ['workEffortId', 'fixedAssetTypeId'], map),
        workEffortId: map['workEffortId'],
        fixedAssetTypeId: map['fixedAssetTypeId'],
        estimatedQuantity: map['estimatedQuantity'],
        estimatedCost: map['estimatedCost'],
        estimatedDuration: map['estimatedDuration'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortGoodStandard extractWorkEffortGoodStandard(dynamic json) {
    return WorkEffortGoodStandard(
        entityId: create_id_from('WorkEffortGoodStandard', ['workEffortId', 'productId', 'workEffortGoodStdTypeId', 'fromDate'], json),
        workEffortId: json['workEffortId'] as String,
        workEffortGoodStdTypeId: json['workEffortGoodStdTypeId'] as String,
        fromDate: check_dt(json['fromDate']),
        productId: json['productId'] as String,
        statusId: json['statusId'] as String,
        estimatedQuantity: json['estimatedQuantity'] as double,
        estimatedCost: json['estimatedCost'] as double,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortGoodStandard overridesWorkEffortGoodStandard(Map<String, dynamic> map) {
    return WorkEffortGoodStandard(
        entityId: create_id_from('WorkEffortGoodStandard', ['workEffortId', 'productId', 'workEffortGoodStdTypeId', 'fromDate'], map),
        workEffortId: map['workEffortId'],
        workEffortGoodStdTypeId: map['workEffortGoodStdTypeId'],
        fromDate: map['fromDate'],
        productId: map['productId'],
        statusId: map['statusId'],
        estimatedQuantity: map['estimatedQuantity'],
        estimatedCost: map['estimatedCost'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortGoodStandardType extractWorkEffortGoodStandardType(dynamic json) {
    return WorkEffortGoodStandardType(
        entityId: create_id_from('WorkEffortGoodStandardType', ['workEffortGoodStdTypeId'], json),
        workEffortGoodStdTypeId: json['workEffortGoodStdTypeId'] as String,
        parentTypeId: json['parentTypeId'] as String,
        hasTable: json['hasTable'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortGoodStandardType overridesWorkEffortGoodStandardType(Map<String, dynamic> map) {
    return WorkEffortGoodStandardType(
        entityId: create_id_from('WorkEffortGoodStandardType', ['workEffortGoodStdTypeId'], map),
        workEffortGoodStdTypeId: map['workEffortGoodStdTypeId'],
        parentTypeId: map['parentTypeId'],
        hasTable: map['hasTable'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortIcalData extractWorkEffortIcalData(dynamic json) {
    return WorkEffortIcalData(
        entityId: create_id_from('WorkEffortIcalData', ['workEffortId'], json),
        workEffortId: json['workEffortId'] as String,
        icalData: json['icalData'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortIcalData overridesWorkEffortIcalData(Map<String, dynamic> map) {
    return WorkEffortIcalData(
        entityId: create_id_from('WorkEffortIcalData', ['workEffortId'], map),
        workEffortId: map['workEffortId'],
        icalData: map['icalData'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortInventoryAssign extractWorkEffortInventoryAssign(dynamic json) {
    return WorkEffortInventoryAssign(
        entityId: create_id_from('WorkEffortInventoryAssign', ['workEffortId', 'inventoryItemId'], json),
        workEffortId: json['workEffortId'] as String,
        inventoryItemId: json['inventoryItemId'] as String,
        quantity: json['quantity'] as double,
        statusId: json['statusId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortInventoryAssign overridesWorkEffortInventoryAssign(Map<String, dynamic> map) {
    return WorkEffortInventoryAssign(
        entityId: create_id_from('WorkEffortInventoryAssign', ['workEffortId', 'inventoryItemId'], map),
        workEffortId: map['workEffortId'],
        inventoryItemId: map['inventoryItemId'],
        quantity: map['quantity'],
        statusId: map['statusId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortInventoryProduced extractWorkEffortInventoryProduced(dynamic json) {
    return WorkEffortInventoryProduced(
        entityId: create_id_from('WorkEffortInventoryProduced', ['workEffortId', 'inventoryItemId'], json),
        workEffortId: json['workEffortId'] as String,
        inventoryItemId: json['inventoryItemId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortInventoryProduced overridesWorkEffortInventoryProduced(Map<String, dynamic> map) {
    return WorkEffortInventoryProduced(
        entityId: create_id_from('WorkEffortInventoryProduced', ['workEffortId', 'inventoryItemId'], map),
        workEffortId: map['workEffortId'],
        inventoryItemId: map['inventoryItemId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortKeyword extractWorkEffortKeyword(dynamic json) {
    return WorkEffortKeyword(
        entityId: create_id_from('WorkEffortKeyword', ['workEffortId', 'keyword'], json),
        workEffortId: json['workEffortId'] as String,
        relevancyWeight: json['relevancyWeight'] as int,
        keyword: json['keyword'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortKeyword overridesWorkEffortKeyword(Map<String, dynamic> map) {
    return WorkEffortKeyword(
        entityId: create_id_from('WorkEffortKeyword', ['workEffortId', 'keyword'], map),
        workEffortId: map['workEffortId'],
        relevancyWeight: map['relevancyWeight'],
        keyword: map['keyword'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortNote extractWorkEffortNote(dynamic json) {
    return WorkEffortNote(
        entityId: create_id_from('WorkEffortNote', ['workEffortId', 'noteId'], json),
        workEffortId: json['workEffortId'] as String,
        internalNote: json['internalNote'] as String,
        noteId: json['noteId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortNote overridesWorkEffortNote(Map<String, dynamic> map) {
    return WorkEffortNote(
        entityId: create_id_from('WorkEffortNote', ['workEffortId', 'noteId'], map),
        workEffortId: map['workEffortId'],
        internalNote: map['internalNote'],
        noteId: map['noteId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortNoteAndData extractWorkEffortNoteAndData(dynamic json) {
    return WorkEffortNoteAndData(
        entityId: create_id_from('WorkEffortNoteAndData', ['workEffortId', 'noteId'], json),
        workEffortId: json['workEffortId'] as String,
        internalNote: json['internalNote'] as String,
        noteName: json['noteName'] as String,
        noteDateTime: check_dt(json['noteDateTime']),
        noteInfo: json['noteInfo'] as String,
        noteId: json['noteId'] as String,
        noteParty: json['noteParty'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortNoteAndData overridesWorkEffortNoteAndData(Map<String, dynamic> map) {
    return WorkEffortNoteAndData(
        entityId: create_id_from('WorkEffortNoteAndData', ['workEffortId', 'noteId'], map),
        workEffortId: map['workEffortId'],
        internalNote: map['internalNote'],
        noteName: map['noteName'],
        noteDateTime: map['noteDateTime'],
        noteInfo: map['noteInfo'],
        noteId: map['noteId'],
        noteParty: map['noteParty'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortOrderHeaderView extractWorkEffortOrderHeaderView(dynamic json) {
    return WorkEffortOrderHeaderView(
        entityId: create_id_from('WorkEffortOrderHeaderView', ['workEffortId', 'orderId'], json),
        workEffortId: json['workEffortId'] as String,
        invoicePerShipment: json['invoicePerShipment'] as String,
        salesChannelEnumId: json['salesChannelEnumId'] as String,
        orderId: json['orderId'] as String,
        orderTypeId: json['orderTypeId'] as String,
        billingAccountId: json['billingAccountId'] as String,
        terminalId: json['terminalId'] as String,
        isViewed: json['isViewed'] as String,
        visitId: json['visitId'] as String,
        agreementId: json['agreementId'] as String,
        productStoreId: json['productStoreId'] as String,
        remainingSubTotal: json['remainingSubTotal'] as double,
        orderName: json['orderName'] as String,
        webSiteId: json['webSiteId'] as String,
        isRushOrder: json['isRushOrder'] as String,
        entryDate: check_dt(json['entryDate']),
        grandTotal: json['grandTotal'] as double,
        orderTypeDescription: json['orderTypeDescription'] as String,
        autoOrderShoppingListId: json['autoOrderShoppingListId'] as String,
        externalId: json['externalId'] as String,
        priority: json['priority'] as String,
        transactionId: json['transactionId'] as String,
        firstAttemptOrderId: json['firstAttemptOrderId'] as String,
        originFacilityId: json['originFacilityId'] as String,
        statusId: json['statusId'] as String,
        statusItemDescription: json['statusItemDescription'] as String,
        createdBy: json['createdBy'] as String,
        currencyUom: json['currencyUom'] as String,
        syncStatusId: json['syncStatusId'] as String,
        pickSheetPrintedDate: check_dt(json['pickSheetPrintedDate']),
        needsInventoryIssuance: json['needsInventoryIssuance'] as String,
        orderDate: check_dt(json['orderDate']),
        internalCode: json['internalCode'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortOrderHeaderView overridesWorkEffortOrderHeaderView(Map<String, dynamic> map) {
    return WorkEffortOrderHeaderView(
        entityId: create_id_from('WorkEffortOrderHeaderView', ['workEffortId', 'orderId'], map),
        workEffortId: map['workEffortId'],
        invoicePerShipment: map['invoicePerShipment'],
        salesChannelEnumId: map['salesChannelEnumId'],
        orderId: map['orderId'],
        orderTypeId: map['orderTypeId'],
        billingAccountId: map['billingAccountId'],
        terminalId: map['terminalId'],
        isViewed: map['isViewed'],
        visitId: map['visitId'],
        agreementId: map['agreementId'],
        productStoreId: map['productStoreId'],
        remainingSubTotal: map['remainingSubTotal'],
        orderName: map['orderName'],
        webSiteId: map['webSiteId'],
        isRushOrder: map['isRushOrder'],
        entryDate: map['entryDate'],
        grandTotal: map['grandTotal'],
        orderTypeDescription: map['orderTypeDescription'],
        autoOrderShoppingListId: map['autoOrderShoppingListId'],
        externalId: map['externalId'],
        priority: map['priority'],
        transactionId: map['transactionId'],
        firstAttemptOrderId: map['firstAttemptOrderId'],
        originFacilityId: map['originFacilityId'],
        statusId: map['statusId'],
        statusItemDescription: map['statusItemDescription'],
        createdBy: map['createdBy'],
        currencyUom: map['currencyUom'],
        syncStatusId: map['syncStatusId'],
        pickSheetPrintedDate: map['pickSheetPrintedDate'],
        needsInventoryIssuance: map['needsInventoryIssuance'],
        orderDate: map['orderDate'],
        internalCode: map['internalCode'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortPartyAssignAndRoleType extractWorkEffortPartyAssignAndRoleType(dynamic json) {
    return WorkEffortPartyAssignAndRoleType(
        entityId: create_id_from('WorkEffortPartyAssignAndRoleType', ['workEffortId', 'roleTypeId', 'fromDate', 'partyId'], json),
        workEffortId: json['workEffortId'] as String,
        roleTypeId: json['roleTypeId'] as String,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        parentTypeId: json['parentTypeId'] as String,
        mustRsvp: json['mustRsvp'] as String,
        assignedByUserLoginId: json['assignedByUserLoginId'] as String,
        description: json['description'] as String,
        delegateReasonEnumId: json['delegateReasonEnumId'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        statusId: json['statusId'] as String,
        hasTable: json['hasTable'] as String,
        statusDateTime: check_dt(json['statusDateTime']),
        expectationEnumId: json['expectationEnumId'] as String,
        availabilityStatusId: json['availabilityStatusId'] as String,
        partyId: json['partyId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortPartyAssignAndRoleType overridesWorkEffortPartyAssignAndRoleType(Map<String, dynamic> map) {
    return WorkEffortPartyAssignAndRoleType(
        entityId: create_id_from('WorkEffortPartyAssignAndRoleType', ['workEffortId', 'roleTypeId', 'fromDate', 'partyId'], map),
        workEffortId: map['workEffortId'],
        roleTypeId: map['roleTypeId'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        parentTypeId: map['parentTypeId'],
        mustRsvp: map['mustRsvp'],
        assignedByUserLoginId: map['assignedByUserLoginId'],
        description: map['description'],
        delegateReasonEnumId: map['delegateReasonEnumId'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        statusId: map['statusId'],
        hasTable: map['hasTable'],
        statusDateTime: map['statusDateTime'],
        expectationEnumId: map['expectationEnumId'],
        availabilityStatusId: map['availabilityStatusId'],
        partyId: map['partyId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortPartyAssignByGroup extractWorkEffortPartyAssignByGroup(dynamic json) {
    return WorkEffortPartyAssignByGroup(
        entityId: create_id_from('WorkEffortPartyAssignByGroup', ['partyId', 'groupPartyId', 'prelFromDate', 'workEffortId', 'roleTypeId', 'fromDate', 'roleTypeIdTo', 'roleTypeIdFrom'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        mustRsvp: json['mustRsvp'] as String,
        revisionNumber: json['revisionNumber'] as int,
        priorityTypeId: json['priorityTypeId'] as String,
        tempExprId: json['tempExprId'] as String,
        relationshipName: json['relationshipName'] as String,
        securityGroupId: json['securityGroupId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        partyId: json['partyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        roleTypeIdTo: json['roleTypeIdTo'] as String,
        prelThruDate: check_dt(json['prelThruDate']),
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        prelStatusId: json['prelStatusId'] as String,
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        thruDate: check_dt(json['thruDate']),
        specialTerms: json['specialTerms'] as String,
        fromDate: check_dt(json['fromDate']),
        partyRelationshipTypeId: json['partyRelationshipTypeId'] as String,
        statusId: json['statusId'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        positionTitle: json['positionTitle'] as String,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        assignedByUserLoginId: json['assignedByUserLoginId'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        prelFromDate: check_dt(json['prelFromDate']),
        moneyUomId: json['moneyUomId'] as String,
        groupPartyId: json['groupPartyId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        delegateReasonEnumId: json['delegateReasonEnumId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        statusDateTime: check_dt(json['statusDateTime']),
        actualStartDate: check_dt(json['actualStartDate']),
        availabilityStatusId: json['availabilityStatusId'] as String,
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        roleTypeId: json['roleTypeId'] as String,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        permissionsEnumId: json['permissionsEnumId'] as String,
        sourceReferenceId: json['sourceReferenceId'] as String,
        prelComments: json['prelComments'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        roleTypeIdFrom: json['roleTypeIdFrom'] as String,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        expectationEnumId: json['expectationEnumId'] as String,
        partyAssignFacilityId: json['partyAssignFacilityId'] as String,
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortPartyAssignByGroup overridesWorkEffortPartyAssignByGroup(Map<String, dynamic> map) {
    return WorkEffortPartyAssignByGroup(
        entityId: create_id_from('WorkEffortPartyAssignByGroup', ['partyId', 'groupPartyId', 'prelFromDate', 'workEffortId', 'roleTypeId', 'fromDate', 'roleTypeIdTo', 'roleTypeIdFrom'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        mustRsvp: map['mustRsvp'],
        revisionNumber: map['revisionNumber'],
        priorityTypeId: map['priorityTypeId'],
        tempExprId: map['tempExprId'],
        relationshipName: map['relationshipName'],
        securityGroupId: map['securityGroupId'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        partyId: map['partyId'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        roleTypeIdTo: map['roleTypeIdTo'],
        prelThruDate: map['prelThruDate'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        prelStatusId: map['prelStatusId'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        thruDate: map['thruDate'],
        specialTerms: map['specialTerms'],
        fromDate: map['fromDate'],
        partyRelationshipTypeId: map['partyRelationshipTypeId'],
        statusId: map['statusId'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        positionTitle: map['positionTitle'],
        estimateCalcMethod: map['estimateCalcMethod'],
        assignedByUserLoginId: map['assignedByUserLoginId'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        prelFromDate: map['prelFromDate'],
        moneyUomId: map['moneyUomId'],
        groupPartyId: map['groupPartyId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        delegateReasonEnumId: map['delegateReasonEnumId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        statusDateTime: map['statusDateTime'],
        actualStartDate: map['actualStartDate'],
        availabilityStatusId: map['availabilityStatusId'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        roleTypeId: map['roleTypeId'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        permissionsEnumId: map['permissionsEnumId'],
        sourceReferenceId: map['sourceReferenceId'],
        prelComments: map['prelComments'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        roleTypeIdFrom: map['roleTypeIdFrom'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        expectationEnumId: map['expectationEnumId'],
        partyAssignFacilityId: map['partyAssignFacilityId'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortPartyAssignByRole extractWorkEffortPartyAssignByRole(dynamic json) {
    return WorkEffortPartyAssignByRole(
        entityId: create_id_from('WorkEffortPartyAssignByRole', ['wepaPartyId', 'workEffortId', 'roleTypeId', 'fromDate', 'partyId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        mustRsvp: json['mustRsvp'] as String,
        revisionNumber: json['revisionNumber'] as int,
        tempExprId: json['tempExprId'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        locationDesc: json['locationDesc'] as String,
        partyId: json['partyId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        priority: json['priority'] as int,
        currentStatusId: json['currentStatusId'] as String,
        runtimeDataId: json['runtimeDataId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        thruDate: check_dt(json['thruDate']),
        specialTerms: json['specialTerms'] as String,
        fromDate: check_dt(json['fromDate']),
        statusId: json['statusId'] as String,
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        fixedAssetId: json['fixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        assignedByUserLoginId: json['assignedByUserLoginId'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        description: json['description'] as String,
        moneyUomId: json['moneyUomId'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        workEffortName: json['workEffortName'] as String,
        delegateReasonEnumId: json['delegateReasonEnumId'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        accommodationMapId: json['accommodationMapId'] as String,
        statusDateTime: check_dt(json['statusDateTime']),
        actualStartDate: check_dt(json['actualStartDate']),
        availabilityStatusId: json['availabilityStatusId'] as String,
        scopeEnumId: json['scopeEnumId'] as String,
        quantityProduced: json['quantityProduced'] as double,
        wepaPartyId: json['wepaPartyId'] as String,
        roleTypeId: json['roleTypeId'] as String,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        percentComplete: json['percentComplete'] as int,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        expectationEnumId: json['expectationEnumId'] as String,
        partyAssignFacilityId: json['partyAssignFacilityId'] as String,
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortPartyAssignByRole overridesWorkEffortPartyAssignByRole(Map<String, dynamic> map) {
    return WorkEffortPartyAssignByRole(
        entityId: create_id_from('WorkEffortPartyAssignByRole', ['wepaPartyId', 'workEffortId', 'roleTypeId', 'fromDate', 'partyId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        mustRsvp: map['mustRsvp'],
        revisionNumber: map['revisionNumber'],
        tempExprId: map['tempExprId'],
        showAsEnumId: map['showAsEnumId'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        locationDesc: map['locationDesc'],
        partyId: map['partyId'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        estimatedStartDate: map['estimatedStartDate'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        priority: map['priority'],
        currentStatusId: map['currentStatusId'],
        runtimeDataId: map['runtimeDataId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        thruDate: map['thruDate'],
        specialTerms: map['specialTerms'],
        fromDate: map['fromDate'],
        statusId: map['statusId'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        fixedAssetId: map['fixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        estimateCalcMethod: map['estimateCalcMethod'],
        assignedByUserLoginId: map['assignedByUserLoginId'],
        workEffortParentId: map['workEffortParentId'],
        description: map['description'],
        moneyUomId: map['moneyUomId'],
        reservNthPPPerc: map['reservNthPPPerc'],
        workEffortName: map['workEffortName'],
        delegateReasonEnumId: map['delegateReasonEnumId'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        accommodationMapId: map['accommodationMapId'],
        statusDateTime: map['statusDateTime'],
        actualStartDate: map['actualStartDate'],
        availabilityStatusId: map['availabilityStatusId'],
        scopeEnumId: map['scopeEnumId'],
        quantityProduced: map['quantityProduced'],
        wepaPartyId: map['wepaPartyId'],
        roleTypeId: map['roleTypeId'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        lastModifiedDate: map['lastModifiedDate'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        percentComplete: map['percentComplete'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        expectationEnumId: map['expectationEnumId'],
        partyAssignFacilityId: map['partyAssignFacilityId'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortPartyAssignView extractWorkEffortPartyAssignView(dynamic json) {
    return WorkEffortPartyAssignView(
        entityId: create_id_from('WorkEffortPartyAssignView', ['partyId', 'workEffortId', 'roleTypeId', 'fromDate'], json),
        workEffortId: json['workEffortId'] as String,
        lastName: json['lastName'] as String,
        mustRsvp: json['mustRsvp'] as String,
        assignedByUserLoginId: json['assignedByUserLoginId'] as String,
        description: json['description'] as String,
        suffix: json['suffix'] as String,
        delegateReasonEnumId: json['delegateReasonEnumId'] as String,
        partyTypeId: json['partyTypeId'] as String,
        groupNameLocal: json['groupNameLocal'] as String,
        statusDateTime: check_dt(json['statusDateTime']),
        availabilityStatusId: json['availabilityStatusId'] as String,
        assignmentStatusId: json['assignmentStatusId'] as String,
        partyId: json['partyId'] as String,
        roleTypeId: json['roleTypeId'] as String,
        lastNameLocal: json['lastNameLocal'] as String,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        firstName: json['firstName'] as String,
        groupName: json['groupName'] as String,
        statusId: json['statusId'] as String,
        expectationEnumId: json['expectationEnumId'] as String,
        middleName: json['middleName'] as String,
        firstNameLocal: json['firstNameLocal'] as String,
        personalTitle: json['personalTitle'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortPartyAssignView overridesWorkEffortPartyAssignView(Map<String, dynamic> map) {
    return WorkEffortPartyAssignView(
        entityId: create_id_from('WorkEffortPartyAssignView', ['partyId', 'workEffortId', 'roleTypeId', 'fromDate'], map),
        workEffortId: map['workEffortId'],
        lastName: map['lastName'],
        mustRsvp: map['mustRsvp'],
        assignedByUserLoginId: map['assignedByUserLoginId'],
        description: map['description'],
        suffix: map['suffix'],
        delegateReasonEnumId: map['delegateReasonEnumId'],
        partyTypeId: map['partyTypeId'],
        groupNameLocal: map['groupNameLocal'],
        statusDateTime: map['statusDateTime'],
        availabilityStatusId: map['availabilityStatusId'],
        assignmentStatusId: map['assignmentStatusId'],
        partyId: map['partyId'],
        roleTypeId: map['roleTypeId'],
        lastNameLocal: map['lastNameLocal'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        firstName: map['firstName'],
        groupName: map['groupName'],
        statusId: map['statusId'],
        expectationEnumId: map['expectationEnumId'],
        middleName: map['middleName'],
        firstNameLocal: map['firstNameLocal'],
        personalTitle: map['personalTitle'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortPartyAssignment extractWorkEffortPartyAssignment(dynamic json) {
    return WorkEffortPartyAssignment(
        entityId: create_id_from('WorkEffortPartyAssignment', ['workEffortId', 'partyId', 'roleTypeId', 'fromDate'], json),
        workEffortId: json['workEffortId'] as String,
        roleTypeId: json['roleTypeId'] as String,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        mustRsvp: json['mustRsvp'] as String,
        assignedByUserLoginId: json['assignedByUserLoginId'] as String,
        delegateReasonEnumId: json['delegateReasonEnumId'] as String,
        thruDate: check_dt(json['thruDate']),
        fromDate: check_dt(json['fromDate']),
        statusId: json['statusId'] as String,
        statusDateTime: check_dt(json['statusDateTime']),
        expectationEnumId: json['expectationEnumId'] as String,
        availabilityStatusId: json['availabilityStatusId'] as String,
        partyId: json['partyId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortPartyAssignment overridesWorkEffortPartyAssignment(Map<String, dynamic> map) {
    return WorkEffortPartyAssignment(
        entityId: create_id_from('WorkEffortPartyAssignment', ['workEffortId', 'partyId', 'roleTypeId', 'fromDate'], map),
        workEffortId: map['workEffortId'],
        roleTypeId: map['roleTypeId'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        mustRsvp: map['mustRsvp'],
        assignedByUserLoginId: map['assignedByUserLoginId'],
        delegateReasonEnumId: map['delegateReasonEnumId'],
        thruDate: map['thruDate'],
        fromDate: map['fromDate'],
        statusId: map['statusId'],
        statusDateTime: map['statusDateTime'],
        expectationEnumId: map['expectationEnumId'],
        availabilityStatusId: map['availabilityStatusId'],
        partyId: map['partyId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortProductGoods extractWorkEffortProductGoods(dynamic json) {
    return WorkEffortProductGoods(
        entityId: create_id_from('WorkEffortProductGoods', ['workEffortId', 'workEffortGoodStdTypeId', 'fromDate', 'productId'], json),
        originGeoId: json['originGeoId'] as String,
        mediumImageUrl: json['mediumImageUrl'] as String,
        productName: json['productName'] as String,
        originalImageUrl: json['originalImageUrl'] as String,
        inShippingBox: json['inShippingBox'] as String,
        showAsEnumId: json['showAsEnumId'] as String,
        supportDiscontinuationDate: check_dt(json['supportDiscontinuationDate']),
        productWidth: json['productWidth'] as double,
        infoUrl: json['infoUrl'] as String,
        universalId: json['universalId'] as String,
        productRating: json['productRating'] as double,
        createdByUserLogin: json['createdByUserLogin'] as String,
        actualMilliSeconds: json['actualMilliSeconds'] as double,
        quantityToProduce: json['quantityToProduce'] as double,
        requireAmount: json['requireAmount'] as String,
        productId: json['productId'] as String,
        taxable: json['taxable'] as String,
        serviceLoaderName: json['serviceLoaderName'] as String,
        accommodationSpotId: json['accommodationSpotId'] as String,
        primaryProductCategoryId: json['primaryProductCategoryId'] as String,
        salesDiscontinuationDate: check_dt(json['salesDiscontinuationDate']),
        estimatedCost: json['estimatedCost'] as double,
        priority: json['priority'] as int,
        runtimeDataId: json['runtimeDataId'] as String,
        salesDiscWhenNotAvail: json['salesDiscWhenNotAvail'] as String,
        returnable: json['returnable'] as String,
        statusId: json['statusId'] as String,
        fixedAssetId: json['fixedAssetId'] as String,
        reserv2ndPPPerc: json['reserv2ndPPPerc'] as double,
        priceDetailText: json['priceDetailText'] as String,
        diameterUomId: json['diameterUomId'] as String,
        totalMoneyAllowed: json['totalMoneyAllowed'] as double,
        productDiameter: json['productDiameter'] as double,
        estimatedQuantity: json['estimatedQuantity'] as double,
        ratingTypeEnum: json['ratingTypeEnum'] as String,
        workEffortParentId: json['workEffortParentId'] as String,
        moneyUomId: json['moneyUomId'] as String,
        chargeShipping: json['chargeShipping'] as String,
        reservNthPPPerc: json['reservNthPPPerc'] as double,
        quantityIncluded: json['quantityIncluded'] as double,
        heightUomId: json['heightUomId'] as String,
        virtualVariantMethodEnum: json['virtualVariantMethodEnum'] as String,
        shippingWeight: json['shippingWeight'] as double,
        shippingWidth: json['shippingWidth'] as double,
        shippingDepth: json['shippingDepth'] as double,
        accommodationMapId: json['accommodationMapId'] as String,
        scopeEnumId: json['scopeEnumId'] as String,
        inventoryItemTypeId: json['inventoryItemTypeId'] as String,
        piecesIncluded: json['piecesIncluded'] as int,
        estimatedSetupMillis: json['estimatedSetupMillis'] as double,
        productHeight: json['productHeight'] as double,
        sourceReferenceId: json['sourceReferenceId'] as String,
        lastStatusUpdate: check_dt(json['lastStatusUpdate']),
        defaultShipmentBoxTypeId: json['defaultShipmentBoxTypeId'] as String,
        orderDecimalQuantity: json['orderDecimalQuantity'] as String,
        productWeight: json['productWeight'] as double,
        depthUomId: json['depthUomId'] as String,
        totalMilliSecondsAllowed: json['totalMilliSecondsAllowed'] as double,
        createdDate: check_dt(json['createdDate']),
        isVariant: json['isVariant'] as String,
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        reservPersons: json['reservPersons'] as double,
        revisionNumber: json['revisionNumber'] as int,
        detailScreen: json['detailScreen'] as String,
        requireInventory: json['requireInventory'] as String,
        quantityUomId: json['quantityUomId'] as String,
        tempExprId: json['tempExprId'] as String,
        introductionDate: check_dt(json['introductionDate']),
        shippingHeight: json['shippingHeight'] as double,
        detailImageUrl: json['detailImageUrl'] as String,
        includeInPromotions: json['includeInPromotions'] as String,
        configId: json['configId'] as String,
        locationDesc: json['locationDesc'] as String,
        billOfMaterialLevel: json['billOfMaterialLevel'] as int,
        lotIdFilledIn: json['lotIdFilledIn'] as String,
        brandName: json['brandName'] as String,
        smallImageUrl: json['smallImageUrl'] as String,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        estimatedStartDate: check_dt(json['estimatedStartDate']),
        sendNotificationEmail: json['sendNotificationEmail'] as String,
        noteId: json['noteId'] as String,
        quantityRejected: json['quantityRejected'] as double,
        currentStatusId: json['currentStatusId'] as String,
        estimatedMilliSeconds: json['estimatedMilliSeconds'] as double,
        thruDate: check_dt(json['thruDate']),
        specialTerms: json['specialTerms'] as String,
        fromDate: check_dt(json['fromDate']),
        timeTransparency: json['timeTransparency'] as int,
        actualCompletionDate: check_dt(json['actualCompletionDate']),
        weightUomId: json['weightUomId'] as String,
        isVirtual: json['isVirtual'] as String,
        widthUomId: json['widthUomId'] as String,
        longDescription: json['longDescription'] as String,
        autoCreateKeywords: json['autoCreateKeywords'] as String,
        estimateCalcMethod: json['estimateCalcMethod'] as String,
        amountUomTypeId: json['amountUomTypeId'] as String,
        description: json['description'] as String,
        workEffortName: json['workEffortName'] as String,
        workEffortGoodStdTypeId: json['workEffortGoodStdTypeId'] as String,
        internalName: json['internalName'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        actualStartDate: check_dt(json['actualStartDate']),
        reservMaxPersons: json['reservMaxPersons'] as double,
        fixedAmount: json['fixedAmount'] as double,
        quantityProduced: json['quantityProduced'] as double,
        productDepth: json['productDepth'] as double,
        facilityId: json['facilityId'] as String,
        comments: json['comments'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        releaseDate: check_dt(json['releaseDate']),
        inventoryMessage: json['inventoryMessage'] as String,
        percentComplete: json['percentComplete'] as int,
        productTypeId: json['productTypeId'] as String,
        largeImageUrl: json['largeImageUrl'] as String,
        requirementMethodEnumId: json['requirementMethodEnumId'] as String,
        actualSetupMillis: json['actualSetupMillis'] as double,
        estimatedCompletionDate: check_dt(json['estimatedCompletionDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortProductGoods overridesWorkEffortProductGoods(Map<String, dynamic> map) {
    return WorkEffortProductGoods(
        entityId: create_id_from('WorkEffortProductGoods', ['workEffortId', 'workEffortGoodStdTypeId', 'fromDate', 'productId'], map),
        originGeoId: map['originGeoId'],
        mediumImageUrl: map['mediumImageUrl'],
        productName: map['productName'],
        originalImageUrl: map['originalImageUrl'],
        inShippingBox: map['inShippingBox'],
        showAsEnumId: map['showAsEnumId'],
        supportDiscontinuationDate: map['supportDiscontinuationDate'],
        productWidth: map['productWidth'],
        infoUrl: map['infoUrl'],
        universalId: map['universalId'],
        productRating: map['productRating'],
        createdByUserLogin: map['createdByUserLogin'],
        actualMilliSeconds: map['actualMilliSeconds'],
        quantityToProduce: map['quantityToProduce'],
        requireAmount: map['requireAmount'],
        productId: map['productId'],
        taxable: map['taxable'],
        serviceLoaderName: map['serviceLoaderName'],
        accommodationSpotId: map['accommodationSpotId'],
        primaryProductCategoryId: map['primaryProductCategoryId'],
        salesDiscontinuationDate: map['salesDiscontinuationDate'],
        estimatedCost: map['estimatedCost'],
        priority: map['priority'],
        runtimeDataId: map['runtimeDataId'],
        salesDiscWhenNotAvail: map['salesDiscWhenNotAvail'],
        returnable: map['returnable'],
        statusId: map['statusId'],
        fixedAssetId: map['fixedAssetId'],
        reserv2ndPPPerc: map['reserv2ndPPPerc'],
        priceDetailText: map['priceDetailText'],
        diameterUomId: map['diameterUomId'],
        totalMoneyAllowed: map['totalMoneyAllowed'],
        productDiameter: map['productDiameter'],
        estimatedQuantity: map['estimatedQuantity'],
        ratingTypeEnum: map['ratingTypeEnum'],
        workEffortParentId: map['workEffortParentId'],
        moneyUomId: map['moneyUomId'],
        chargeShipping: map['chargeShipping'],
        reservNthPPPerc: map['reservNthPPPerc'],
        quantityIncluded: map['quantityIncluded'],
        heightUomId: map['heightUomId'],
        virtualVariantMethodEnum: map['virtualVariantMethodEnum'],
        shippingWeight: map['shippingWeight'],
        shippingWidth: map['shippingWidth'],
        shippingDepth: map['shippingDepth'],
        accommodationMapId: map['accommodationMapId'],
        scopeEnumId: map['scopeEnumId'],
        inventoryItemTypeId: map['inventoryItemTypeId'],
        piecesIncluded: map['piecesIncluded'],
        estimatedSetupMillis: map['estimatedSetupMillis'],
        productHeight: map['productHeight'],
        sourceReferenceId: map['sourceReferenceId'],
        lastStatusUpdate: map['lastStatusUpdate'],
        defaultShipmentBoxTypeId: map['defaultShipmentBoxTypeId'],
        orderDecimalQuantity: map['orderDecimalQuantity'],
        productWeight: map['productWeight'],
        depthUomId: map['depthUomId'],
        totalMilliSecondsAllowed: map['totalMilliSecondsAllowed'],
        createdDate: map['createdDate'],
        isVariant: map['isVariant'],
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        workEffortTypeId: map['workEffortTypeId'],
        reservPersons: map['reservPersons'],
        revisionNumber: map['revisionNumber'],
        detailScreen: map['detailScreen'],
        requireInventory: map['requireInventory'],
        quantityUomId: map['quantityUomId'],
        tempExprId: map['tempExprId'],
        introductionDate: map['introductionDate'],
        shippingHeight: map['shippingHeight'],
        detailImageUrl: map['detailImageUrl'],
        includeInPromotions: map['includeInPromotions'],
        configId: map['configId'],
        locationDesc: map['locationDesc'],
        billOfMaterialLevel: map['billOfMaterialLevel'],
        lotIdFilledIn: map['lotIdFilledIn'],
        brandName: map['brandName'],
        smallImageUrl: map['smallImageUrl'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        estimatedStartDate: map['estimatedStartDate'],
        sendNotificationEmail: map['sendNotificationEmail'],
        noteId: map['noteId'],
        quantityRejected: map['quantityRejected'],
        currentStatusId: map['currentStatusId'],
        estimatedMilliSeconds: map['estimatedMilliSeconds'],
        thruDate: map['thruDate'],
        specialTerms: map['specialTerms'],
        fromDate: map['fromDate'],
        timeTransparency: map['timeTransparency'],
        actualCompletionDate: map['actualCompletionDate'],
        weightUomId: map['weightUomId'],
        isVirtual: map['isVirtual'],
        widthUomId: map['widthUomId'],
        longDescription: map['longDescription'],
        autoCreateKeywords: map['autoCreateKeywords'],
        estimateCalcMethod: map['estimateCalcMethod'],
        amountUomTypeId: map['amountUomTypeId'],
        description: map['description'],
        workEffortName: map['workEffortName'],
        workEffortGoodStdTypeId: map['workEffortGoodStdTypeId'],
        internalName: map['internalName'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        actualStartDate: map['actualStartDate'],
        reservMaxPersons: map['reservMaxPersons'],
        fixedAmount: map['fixedAmount'],
        quantityProduced: map['quantityProduced'],
        productDepth: map['productDepth'],
        facilityId: map['facilityId'],
        comments: map['comments'],
        lastModifiedDate: map['lastModifiedDate'],
        releaseDate: map['releaseDate'],
        inventoryMessage: map['inventoryMessage'],
        percentComplete: map['percentComplete'],
        productTypeId: map['productTypeId'],
        largeImageUrl: map['largeImageUrl'],
        requirementMethodEnumId: map['requirementMethodEnumId'],
        actualSetupMillis: map['actualSetupMillis'],
        estimatedCompletionDate: map['estimatedCompletionDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortPurposeType extractWorkEffortPurposeType(dynamic json) {
    return WorkEffortPurposeType(
        entityId: create_id_from('WorkEffortPurposeType', ['workEffortPurposeTypeId'], json),
        parentTypeId: json['parentTypeId'] as String,
        workEffortPurposeTypeId: json['workEffortPurposeTypeId'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortPurposeType overridesWorkEffortPurposeType(Map<String, dynamic> map) {
    return WorkEffortPurposeType(
        entityId: create_id_from('WorkEffortPurposeType', ['workEffortPurposeTypeId'], map),
        parentTypeId: map['parentTypeId'],
        workEffortPurposeTypeId: map['workEffortPurposeTypeId'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortQuoteView extractWorkEffortQuoteView(dynamic json) {
    return WorkEffortQuoteView(
        entityId: create_id_from('WorkEffortQuoteView', ['workEffortId', 'quoteId'], json),
        workEffortId: json['workEffortId'] as String,
        salesChannelEnumId: json['salesChannelEnumId'] as String,
        description: json['description'] as String,
        quoteId: json['quoteId'] as String,
        validThruDate: check_dt(json['validThruDate']),
        quoteTypeId: json['quoteTypeId'] as String,
        currencyUomId: json['currencyUomId'] as String,
        statusId: json['statusId'] as String,
        statusItemDescription: json['statusItemDescription'] as String,
        validFromDate: check_dt(json['validFromDate']),
        productStoreId: json['productStoreId'] as String,
        partyId: json['partyId'] as String,
        issueDate: check_dt(json['issueDate']),
        quoteName: json['quoteName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortQuoteView overridesWorkEffortQuoteView(Map<String, dynamic> map) {
    return WorkEffortQuoteView(
        entityId: create_id_from('WorkEffortQuoteView', ['workEffortId', 'quoteId'], map),
        workEffortId: map['workEffortId'],
        salesChannelEnumId: map['salesChannelEnumId'],
        description: map['description'],
        quoteId: map['quoteId'],
        validThruDate: map['validThruDate'],
        quoteTypeId: map['quoteTypeId'],
        currencyUomId: map['currencyUomId'],
        statusId: map['statusId'],
        statusItemDescription: map['statusItemDescription'],
        validFromDate: map['validFromDate'],
        productStoreId: map['productStoreId'],
        partyId: map['partyId'],
        issueDate: map['issueDate'],
        quoteName: map['quoteName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortRequirementView extractWorkEffortRequirementView(dynamic json) {
    return WorkEffortRequirementView(
        entityId: create_id_from('WorkEffortRequirementView', ['workEffortId', 'requirementId'], json),
        workEffortId: json['workEffortId'] as String,
        workReqFulfTypeId: json['workReqFulfTypeId'] as String,
        reason: json['reason'] as String,
        facilityId: json['facilityId'] as String,
        quantity: json['quantity'] as double,
        workReqFulfTypeDescription: json['workReqFulfTypeDescription'] as String,
        productId: json['productId'] as String,
        lastModifiedDate: check_dt(json['lastModifiedDate']),
        estimatedBudget: json['estimatedBudget'] as double,
        description: json['description'] as String,
        requiredByDate: check_dt(json['requiredByDate']),
        requirementDescription: json['requirementDescription'] as String,
        requirementStartDate: check_dt(json['requirementStartDate']),
        requirementTypeId: json['requirementTypeId'] as String,
        useCase: json['useCase'] as String,
        lastModifiedByUserLogin: json['lastModifiedByUserLogin'] as String,
        createdDate: check_dt(json['createdDate']),
        statusId: json['statusId'] as String,
        statusItemDescription: json['statusItemDescription'] as String,
        fixedAssetId: json['fixedAssetId'] as String,
        requirementId: json['requirementId'] as String,
        createdByUserLogin: json['createdByUserLogin'] as String,
        deliverableId: json['deliverableId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortRequirementView overridesWorkEffortRequirementView(Map<String, dynamic> map) {
    return WorkEffortRequirementView(
        entityId: create_id_from('WorkEffortRequirementView', ['workEffortId', 'requirementId'], map),
        workEffortId: map['workEffortId'],
        workReqFulfTypeId: map['workReqFulfTypeId'],
        reason: map['reason'],
        facilityId: map['facilityId'],
        quantity: map['quantity'],
        workReqFulfTypeDescription: map['workReqFulfTypeDescription'],
        productId: map['productId'],
        lastModifiedDate: map['lastModifiedDate'],
        estimatedBudget: map['estimatedBudget'],
        description: map['description'],
        requiredByDate: map['requiredByDate'],
        requirementDescription: map['requirementDescription'],
        requirementStartDate: map['requirementStartDate'],
        requirementTypeId: map['requirementTypeId'],
        useCase: map['useCase'],
        lastModifiedByUserLogin: map['lastModifiedByUserLogin'],
        createdDate: map['createdDate'],
        statusId: map['statusId'],
        statusItemDescription: map['statusItemDescription'],
        fixedAssetId: map['fixedAssetId'],
        requirementId: map['requirementId'],
        createdByUserLogin: map['createdByUserLogin'],
        deliverableId: map['deliverableId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortReview extractWorkEffortReview(dynamic json) {
    return WorkEffortReview(
        entityId: create_id_from('WorkEffortReview', ['workEffortId', 'userLoginId', 'reviewDate'], json),
        workEffortId: json['workEffortId'] as String,
        userLoginId: json['userLoginId'] as String,
        statusId: json['statusId'] as String,
        reviewDate: check_dt(json['reviewDate']),
        rating: json['rating'] as double,
        postedAnonymous: json['postedAnonymous'] as String,
        reviewText: json['reviewText'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortReview overridesWorkEffortReview(Map<String, dynamic> map) {
    return WorkEffortReview(
        entityId: create_id_from('WorkEffortReview', ['workEffortId', 'userLoginId', 'reviewDate'], map),
        workEffortId: map['workEffortId'],
        userLoginId: map['userLoginId'],
        statusId: map['statusId'],
        reviewDate: map['reviewDate'],
        rating: map['rating'],
        postedAnonymous: map['postedAnonymous'],
        reviewText: map['reviewText'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortSearchConstraint extractWorkEffortSearchConstraint(dynamic json) {
    return WorkEffortSearchConstraint(
        entityId: create_id_from('WorkEffortSearchConstraint', ['workEffortSearchResultId', 'constraintSeqId'], json),
        constraintSeqId: json['constraintSeqId'] as String,
        anyPrefix: json['anyPrefix'] as String,
        highValue: json['highValue'] as String,
        constraintName: json['constraintName'] as String,
        workEffortSearchResultId: json['workEffortSearchResultId'] as String,
        isAnd: json['isAnd'] as String,
        removeStems: json['removeStems'] as String,
        lowValue: json['lowValue'] as String,
        infoString: json['infoString'] as String,
        anySuffix: json['anySuffix'] as String,
        includeSubWorkEfforts: json['includeSubWorkEfforts'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortSearchConstraint overridesWorkEffortSearchConstraint(Map<String, dynamic> map) {
    return WorkEffortSearchConstraint(
        entityId: create_id_from('WorkEffortSearchConstraint', ['workEffortSearchResultId', 'constraintSeqId'], map),
        constraintSeqId: map['constraintSeqId'],
        anyPrefix: map['anyPrefix'],
        highValue: map['highValue'],
        constraintName: map['constraintName'],
        workEffortSearchResultId: map['workEffortSearchResultId'],
        isAnd: map['isAnd'],
        removeStems: map['removeStems'],
        lowValue: map['lowValue'],
        infoString: map['infoString'],
        anySuffix: map['anySuffix'],
        includeSubWorkEfforts: map['includeSubWorkEfforts'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortSearchResult extractWorkEffortSearchResult(dynamic json) {
    return WorkEffortSearchResult(
        entityId: create_id_from('WorkEffortSearchResult', ['workEffortSearchResultId'], json),
        workEffortSearchResultId: json['workEffortSearchResultId'] as String,
        visitId: json['visitId'] as String,
        orderByName: json['orderByName'] as String,
        numResults: json['numResults'] as int,
        secondsTotal: json['secondsTotal'] as double,
        searchDate: check_dt(json['searchDate']),
        isAscending: json['isAscending'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortSearchResult overridesWorkEffortSearchResult(Map<String, dynamic> map) {
    return WorkEffortSearchResult(
        entityId: create_id_from('WorkEffortSearchResult', ['workEffortSearchResultId'], map),
        workEffortSearchResultId: map['workEffortSearchResultId'],
        visitId: map['visitId'],
        orderByName: map['orderByName'],
        numResults: map['numResults'],
        secondsTotal: map['secondsTotal'],
        searchDate: map['searchDate'],
        isAscending: map['isAscending'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortShoppingListView extractWorkEffortShoppingListView(dynamic json) {
    return WorkEffortShoppingListView(
        entityId: create_id_from('WorkEffortShoppingListView', ['workEffortId', 'shoppingListId'], json),
        workEffortId: json['workEffortId'] as String,
        recurrenceInfoId: json['recurrenceInfoId'] as String,
        parentShoppingListId: json['parentShoppingListId'] as String,
        productPromoCodeId: json['productPromoCodeId'] as String,
        description: json['description'] as String,
        isActive: json['isActive'] as String,
        shoppingListTypeId: json['shoppingListTypeId'] as String,
        contactMechId: json['contactMechId'] as String,
        carrierPartyId: json['carrierPartyId'] as String,
        shoppingListId: json['shoppingListId'] as String,
        currencyUom: json['currencyUom'] as String,
        lastOrderedDate: check_dt(json['lastOrderedDate']),
        carrierRoleTypeId: json['carrierRoleTypeId'] as String,
        paymentMethodId: json['paymentMethodId'] as String,
        shoppingListTypeDescription: json['shoppingListTypeDescription'] as String,
        isPublic: json['isPublic'] as String,
        productStoreId: json['productStoreId'] as String,
        listName: json['listName'] as String,
        lastAdminModified: check_dt(json['lastAdminModified']),
        partyId: json['partyId'] as String,
        shipmentMethodTypeId: json['shipmentMethodTypeId'] as String,
        visitorId: json['visitorId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortShoppingListView overridesWorkEffortShoppingListView(Map<String, dynamic> map) {
    return WorkEffortShoppingListView(
        entityId: create_id_from('WorkEffortShoppingListView', ['workEffortId', 'shoppingListId'], map),
        workEffortId: map['workEffortId'],
        recurrenceInfoId: map['recurrenceInfoId'],
        parentShoppingListId: map['parentShoppingListId'],
        productPromoCodeId: map['productPromoCodeId'],
        description: map['description'],
        isActive: map['isActive'],
        shoppingListTypeId: map['shoppingListTypeId'],
        contactMechId: map['contactMechId'],
        carrierPartyId: map['carrierPartyId'],
        shoppingListId: map['shoppingListId'],
        currencyUom: map['currencyUom'],
        lastOrderedDate: map['lastOrderedDate'],
        carrierRoleTypeId: map['carrierRoleTypeId'],
        paymentMethodId: map['paymentMethodId'],
        shoppingListTypeDescription: map['shoppingListTypeDescription'],
        isPublic: map['isPublic'],
        productStoreId: map['productStoreId'],
        listName: map['listName'],
        lastAdminModified: map['lastAdminModified'],
        partyId: map['partyId'],
        shipmentMethodTypeId: map['shipmentMethodTypeId'],
        visitorId: map['visitorId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortSkillStandard extractWorkEffortSkillStandard(dynamic json) {
    return WorkEffortSkillStandard(
        entityId: create_id_from('WorkEffortSkillStandard', ['workEffortId', 'skillTypeId'], json),
        workEffortId: json['workEffortId'] as String,
        skillTypeId: json['skillTypeId'] as String,
        estimatedNumPeople: json['estimatedNumPeople'] as double,
        estimatedCost: json['estimatedCost'] as double,
        estimatedDuration: json['estimatedDuration'] as double,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortSkillStandard overridesWorkEffortSkillStandard(Map<String, dynamic> map) {
    return WorkEffortSkillStandard(
        entityId: create_id_from('WorkEffortSkillStandard', ['workEffortId', 'skillTypeId'], map),
        workEffortId: map['workEffortId'],
        skillTypeId: map['skillTypeId'],
        estimatedNumPeople: map['estimatedNumPeople'],
        estimatedCost: map['estimatedCost'],
        estimatedDuration: map['estimatedDuration'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortStatus extractWorkEffortStatus(dynamic json) {
    return WorkEffortStatus(
        entityId: create_id_from('WorkEffortStatus', ['workEffortId', 'statusId', 'statusDatetime'], json),
        workEffortId: json['workEffortId'] as String,
        reason: json['reason'] as String,
        statusId: json['statusId'] as String,
        setByUserLogin: json['setByUserLogin'] as String,
        statusDatetime: check_dt(json['statusDatetime']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortStatus overridesWorkEffortStatus(Map<String, dynamic> map) {
    return WorkEffortStatus(
        entityId: create_id_from('WorkEffortStatus', ['workEffortId', 'statusId', 'statusDatetime'], map),
        workEffortId: map['workEffortId'],
        reason: map['reason'],
        statusId: map['statusId'],
        setByUserLogin: map['setByUserLogin'],
        statusDatetime: map['statusDatetime'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortSurveyAppl extractWorkEffortSurveyAppl(dynamic json) {
    return WorkEffortSurveyAppl(
        entityId: create_id_from('WorkEffortSurveyAppl', ['workEffortId', 'surveyId', 'fromDate'], json),
        workEffortId: json['workEffortId'] as String,
        fromDate: check_dt(json['fromDate']),
        surveyId: json['surveyId'] as String,
        thruDate: check_dt(json['thruDate']),
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortSurveyAppl overridesWorkEffortSurveyAppl(Map<String, dynamic> map) {
    return WorkEffortSurveyAppl(
        entityId: create_id_from('WorkEffortSurveyAppl', ['workEffortId', 'surveyId', 'fromDate'], map),
        workEffortId: map['workEffortId'],
        fromDate: map['fromDate'],
        surveyId: map['surveyId'],
        thruDate: map['thruDate'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortTransBox extractWorkEffortTransBox(dynamic json) {
    return WorkEffortTransBox(
        entityId: create_id_from('WorkEffortTransBox', ['processWorkEffortId', 'toActivityId', 'transitionId'], json),
        toActivityId: json['toActivityId'] as String,
        processWorkEffortId: json['processWorkEffortId'] as String,
        transitionId: json['transitionId'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortTransBox overridesWorkEffortTransBox(Map<String, dynamic> map) {
    return WorkEffortTransBox(
        entityId: create_id_from('WorkEffortTransBox', ['processWorkEffortId', 'toActivityId', 'transitionId'], map),
        toActivityId: map['toActivityId'],
        processWorkEffortId: map['processWorkEffortId'],
        transitionId: map['transitionId'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortType extractWorkEffortType(dynamic json) {
    return WorkEffortType(
        entityId: create_id_from('WorkEffortType', ['workEffortTypeId'], json),
        parentTypeId: json['parentTypeId'] as String,
        workEffortTypeId: json['workEffortTypeId'] as String,
        hasTable: json['hasTable'] as String,
        description: json['description'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortType overridesWorkEffortType(Map<String, dynamic> map) {
    return WorkEffortType(
        entityId: create_id_from('WorkEffortType', ['workEffortTypeId'], map),
        parentTypeId: map['parentTypeId'],
        workEffortTypeId: map['workEffortTypeId'],
        hasTable: map['hasTable'],
        description: map['description'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

  static WorkEffortTypeAttr extractWorkEffortTypeAttr(dynamic json) {
    return WorkEffortTypeAttr(
        entityId: create_id_from('WorkEffortTypeAttr', ['workEffortTypeId', 'attrName'], json),
        workEffortTypeId: json['workEffortTypeId'] as String,
        description: json['description'] as String,
        attrName: json['attrName'] as String,
        lastUpdatedStamp: check_dt(json['lastUpdatedStamp']),
        createdStamp: check_dt(json['createdStamp']));
  }

  static WorkEffortTypeAttr overridesWorkEffortTypeAttr(Map<String, dynamic> map) {
    return WorkEffortTypeAttr(
        entityId: create_id_from('WorkEffortTypeAttr', ['workEffortTypeId', 'attrName'], map),
        workEffortTypeId: map['workEffortTypeId'],
        description: map['description'],
        attrName: map['attrName'],
        lastUpdatedStamp: map['lastUpdatedStamp'],
        createdStamp: map['createdStamp']);
  }

}